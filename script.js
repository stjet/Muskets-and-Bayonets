// disabled, use for debug: @ts-check

//possible future desktop port: https://developer.mozilla.org/en-US/docs/Games/Publishing_games/Game_distribution#available_tools
//also add a semblance at mobile support

window.gameScaleFactor = 1;
window.gameTranslate = [0, 0];
window.helpIndex = 0;
//set after region selection
window.starting_region = undefined;
//time tracking
window.ticks = 0;
window.tick_interval_id = undefined;

window.game_views = ["buildings", "units", "markers", "none"];
window.game_view = "buildings";

window.move_ids = 0;

const UNHOUSED_UPKEEP_MULT = 2;

const buildings_info = {
  "settlement": {
    //cost is in wealth and supply
    "co": {
      "wealth": 25,
      "supply": 75
    },
    //maintenance is in supply (unimplemented)
    "mt": 0,
    //homes for units
    "ho": 3,
    //duration of how long it takes to construct (in ticks) [which are days])
    "dur": 50,
    //pay period is how long it takes for the resources are produced, and maintenance paid)
    "per": 150,
    //workers required. if greater than 0, workers must be assigned to work on it
    //if greater than 0, actual production = production*((number of workers)/(workers)) rounded down
    "wor": 0,
    //production of resources
    "pr": {
      //citizens
      "ci": 1,
      //supply
      "su": 0
    },
    //special effects
    "ef": {
      //province wealth, happiness probably
    },
    //enables production of the units
    "en": {},
    "img": "/images/buildings/settlement.png",
    "upgrades": ["town"],
    "benefits": "Makes citizens and homes 3 units",
    "description": "A small settlement just getting started."
  },
  "town": {
    "co": {
      "wealth": 50,
      "supply": 150
    },
    "mt": 0,
    "ho": 5,
    "dur": 200,
    "per": 100,
    "wor": 0,
    "pr": {
      //citizens
      "ci": 1,
      //supply
      "su": 0
    },
    "ef": {
      //
    },
    "en": {},
    "img": "/images/buildings/town.png",
    "from": "settlement",
    "upgrades": ["city"],
    "benefits": "Makes citizens faster and homes 5 units",
    "description": "A bustling town growing all the time."
  },
  "city": {
    "co": {
      "wealth": 100,
      "supply": 300
    },
    "mt": 0,
    "ho": 10,
    "dur": 300,
    "per": 75,
    "wor": 0,
    "pr": {
      //citizens
      "ci": 1,
      //supply
      "su": 0
    },
    "ef": {
      //
    },
    "en": {},
    "img": "/images/buildings/town.png",
    "from": "town",
    "upgrades": [],
    "benefits": "Makes citizens much faster and homes 10 units",
    "description": "A metropolis, the center of commerce in the region."
  },
  "farm": {
    "co": {
      "wealth": 10,
      "supply": 40
    },
    "mt": 0,
    "ho": 0,
    "dur": 40,
    "per": 10,
    "wor": 0,
    "pr": {
      //supply
      "su": 5
    },
    "ef": {
      //
    },
    "en": {},
    "img": "/images/buildings/settlement_simp.png",
    "upgrades": [],
    "benefits": "Produces 5 supply per citizen every 10 days",
    "description": "Farms: They make food™️."
  }
};

//convert_into is days to convert other unit into that type, speed is days per region, base upkeep is per half season (45 days) but calculated every 15 days
const units_info = {
  "citizen": {
    "convert_into": 20,
    "speed": 30,
    "base_upkeep": {
      "supply": 1,
      "wealth": 0
    }
  },
  "colonist": {
    "convert_into": 40,
    "speed": 30,
    "colonize_base": 180,
    "base_upkeep": {
      "supply": 0.5,
      "wealth": 0
    }
  },
  "conscript": {
    "convert_into": 60,
    "speed": 30,
    "base_upkeep": {
      "supply": 1,
      "wealth": 0.5
    }
  },
  "merchant": {
    "convert_into": 80,
    "speed": 30,
    "base_upkeep": {
      "supply": 1,
      "wealth": 0
    }
  }
};

//sea tiles
let sea_info = {
  "S1": {
    "coords": [[0,0],[370,0],[359,22],[348,57],[348,99],[374,153],[422,188],[459,198],[416,207],[360,241],[319,266],[255,285],[177,322],[136,351],[102,400],[75,469],[64,527],[59,580],[72,627],[54,604],[29,592],[0,598]],
    "neighbors": ["S2", "S14", "S15", "S20"]
  },
  "S2": {
    "coords": [[380,0],[903,0],[907,16],[903,38],[842,66],[787,94],[723,126],[703,133],[676,134],[646,146],[621,178],[607,214],[604,256],[580,233],[551,212],[493,193],[447,188],[414,174],[375,140],[357,104],[359,46]],
    "neighbors": ["S1", "S3", "S6", "S7", "S15"]
  },
  "S3": {
    "coords": [[915,37],[918,12],[909,0],[1492,0],[1492,26],[1478,72],[1468,71],[1452,83],[1429,81],[1398,68],[1372,66],[1362,67],[1334,63],[1318,68],[1315,76],[1328,86],[1365,102],[1375,94],[1393,96],[1420,113],[1440,144],[1442,175],[1458,204],[1472,208],[1510,235],[1521,244],[1482,250],[1450,259],[1434,226],[1403,176],[1360,140],[1338,133],[1315,114],[1313,102],[1265,84],[1238,76],[1182,54],[1161,52],[1158,64],[1166,86],[1115,52],[1050,25],[987,21],[947,24]],
    "neighbors": ["S2", "S4", "S6", "15", "16", "17"]
  },
  "S4": {
    "coords": [[1508,0],[1704,0],[1717,36],[1741,70],[1774,112],[1795,159],[1807,210],[1786,281],[1754,285],[1723,295],[1693,299],[1652,297],[1610,297],[1588,288],[1577,278],[1555,265],[1547,259],[1536,262],[1536,273],[1541,289],[1513,285],[1489,284],[1457,267],[1480,259],[1529,253],[1530,239],[1523,218],[1514,210],[1507,191],[1497,173],[1476,161],[1467,150],[1467,139],[1476,130],[1483,112],[1487,87],[1482,80],[1498,39],[1505,5]],
    "neighbors": ["S3", "S5", "17", "18", "20", "21"]
  },
  "S5": {
    "coords": [[2272,51],[2284,65],[2295,55],[2314,38],[2332,23],[2353,0],[2358,0],[2358,9],[2345,21],[2336,34],[2316,62],[2293,78],[2270,102],[2262,106],[2258,104],[2258,98],[2264,93],[2278,73],[2283,66],[2271,52],[2295,20],[2310,0],[1713,0],[1727,31],[1756,72],[1788,110],[1808,165],[1815,194],[1815,215],[1806,251],[1798,279],[1814,279],[1829,277],[1858,279],[1874,287],[1876,296],[1862,305],[1837,307],[1823,307],[1825,311],[1837,313],[1849,315],[1855,313],[1882,313],[1902,302],[1947,281],[1938,261],[1927,271],[1897,284],[1880,284],[1883,271],[1892,259],[1926,242],[1970,221],[1983,204],[1999,195],[2014,195],[2051,178],[2070,174],[2078,167],[2090,167],[2106,160],[2124,166],[2124,177],[2094,194],[2030,218],[2012,223],[1990,236],[1937,262],[1949,281],[1979,267],[2050,232],[2110,203],[2159,180],[2193,158],[2214,140],[2232,123],[2230,118],[2210,134],[2173,159],[2158,164],[2150,160],[2150,144],[2209,93]],
    "neighbors": ["S4", "21", "25", "26"]
  },
  "S6": {
    "coords": [[831,243],[812,220],[786,179],[760,157],[728,137],[754,122],[810,92],[876,59],[944,36],[1004,32],[1066,41],[1144,78],[1155,91],[1136,96],[1133,108],[1136,118],[1118,117],[1110,113],[1095,118],[1079,102],[1067,108],[1044,123],[1032,126],[1000,123],[981,132],[980,145],[965,150],[952,127],[929,116],[922,122],[923,160],[916,168],[902,175],[905,183],[892,188],[887,184],[873,180],[851,184],[826,199],[816,210],[819,218],[824,224],[835,224],[852,219],[869,213],[885,206],[892,197],[892,189],[904,185],[908,191],[920,196],[941,200],[964,196],[977,184],[976,167],[969,159],[965,150],[980,146],[986,156],[994,166],[1023,172],[1047,184],[1052,193],[1051,204],[1055,213],[1071,228],[1084,239],[1032,255],[956,263],[939,271],[911,272],[877,269],[858,261]],
    "neighbors": ["S2", "S3", "S7", "S8", "14"]
  },
  "S7": {
    "coords": [[819,244],[863,273],[888,280],[922,280],[966,269],[953,280],[929,296],[914,331],[920,370],[929,404],[927,441],[915,480],[883,510],[832,523],[779,515],[723,491],[679,446],[653,392],[618,317],[613,276],[610,235],[621,187],[644,161],[674,145],[714,140],[762,169],[806,223],[816,239],[744,251],[734,245],[719,246],[712,233],[710,228],[705,207],[680,200],[667,208],[662,222],[650,230],[639,231],[636,233],[648,259],[663,286],[642,288],[635,293],[638,306],[654,311],[683,306],[710,302],[715,287],[746,276],[752,264],[745,251],[774,258],[762,270],[753,286],[775,300],[795,303],[724,350],[716,349],[702,358],[692,366],[698,386],[712,395],[728,393],[735,371],[751,378],[746,386],[760,390],[773,394],[782,405],[797,412],[814,444],[838,459],[843,464],[860,466],[885,460],[889,447],[886,426],[898,420],[898,409],[881,399],[871,395],[857,386],[852,363],[838,344],[831,321],[823,317],[819,330],[816,362],[808,372],[798,370],[780,366],[757,370],[750,377],[733,370],[724,352],[796,302],[805,302],[809,290],[805,286],[805,275],[807,266],[799,258],[785,256],[772,260],[745,251],[816,239]],
    "neighbors": ["S2", "S6", "S8", "S15", "S16", "S17", "5", "6"]
  },
  "S8": {
    "coords": [[1030,424],[988,411],[953,395],[937,381],[926,350],[926,326],[934,303],[962,283],[1011,268],[1055,261],[1094,246],[1105,254],[1122,258],[1123,265],[1120,279],[1111,294],[1116,303],[1090,291],[1088,281],[1067,277],[1050,267],[1038,275],[1038,290],[1051,309],[1042,346],[1035,358],[1021,356],[998,345],[974,341],[964,353],[976,373],[1002,404],[1014,414],[1038,421],[1045,424],[1052,420],[1062,414],[1079,417],[1096,415],[1111,423],[1103,436],[1091,438],[1082,452],[1091,458],[1122,453],[1141,451],[1155,466],[1159,477],[1162,492],[1178,495],[1189,490],[1185,466],[1197,461],[1210,469],[1226,463],[1233,452],[1246,449],[1253,447],[1253,422],[1230,410],[1212,415],[1198,431],[1190,441],[1192,457],[1195,460],[1182,466],[1168,442],[1157,426],[1154,409],[1143,406],[1131,417],[1132,426],[1118,434],[1106,434],[1114,421],[1122,418],[1126,402],[1132,389],[1142,387],[1136,378],[1138,369],[1151,362],[1161,355],[1171,343],[1166,334],[1149,332],[1136,330],[1124,337],[1119,348],[1126,362],[1138,369],[1134,378],[1123,380],[1110,383],[1105,386],[1086,369],[1064,357],[1057,350],[1050,345],[1041,348],[1053,307],[1061,313],[1074,307],[1083,302],[1089,291],[1117,302],[1130,304],[1157,290],[1164,262],[1171,262],[1186,270],[1199,286],[1203,293],[1194,295],[1174,299],[1174,310],[1197,317],[1214,323],[1203,329],[1191,343],[1176,350],[1168,367],[1188,381],[1210,396],[1226,397],[1238,389],[1246,370],[1260,370],[1278,367],[1285,353],[1296,355],[1300,366],[1296,379],[1284,391],[1283,404],[1295,412],[1314,407],[1318,403],[1341,409],[1338,418],[1330,429],[1307,433],[1273,431],[1271,441],[1282,451],[1278,466],[1270,479],[1272,494],[1287,504],[1288,516],[1278,525],[1281,536],[1270,542],[1264,543],[1256,546],[1198,518],[1124,470],[1098,457],[1090,459],[1078,450],[1082,445],[1051,433]],
    "neighbors": ["S6", "S7", "S9", "S17", "7", "10", "12", "13"]
  },
  "S9": {
    "coords": [[1305,692],[1274,708],[1253,712],[1230,703],[1218,683],[1206,689],[1193,697],[1145,697],[1134,691],[1133,677],[1152,663],[1160,649],[1174,642],[1190,647],[1194,660],[1206,667],[1207,687],[1223,681],[1234,657],[1278,639],[1302,624],[1338,620],[1363,613],[1350,602],[1354,592],[1370,592],[1377,584],[1368,578],[1352,575],[1341,562],[1326,562],[1310,565],[1304,561],[1290,567],[1271,569],[1258,556],[1254,549],[1227,541],[1248,555],[1265,569],[1284,585],[1287,600],[1267,620],[1215,628],[1161,640],[1123,658],[1074,687],[1054,718],[1056,759],[1084,794],[1096,812],[1128,808],[1203,791],[1314,752],[1354,750],[1369,738],[1426,716],[1464,699],[1497,653],[1534,583],[1535,569],[1549,533],[1554,523],[1560,512],[1539,503],[1533,480],[1531,468],[1509,477],[1486,477],[1470,469],[1438,457],[1430,453],[1422,457],[1434,463],[1430,484],[1450,495],[1461,516],[1456,535],[1440,542],[1424,539],[1418,536],[1350,534],[1361,541],[1385,550],[1394,560],[1391,569],[1401,570],[1412,580],[1429,588],[1451,600],[1457,612],[1471,624],[1478,638],[1469,644],[1449,648],[1450,664],[1450,673],[1442,681],[1431,685],[1418,682],[1409,672],[1391,667],[1378,660],[1373,667],[1373,677],[1358,682],[1352,688],[1333,684],[1328,679],[1315,680]],
    "neighbors": ["S8", "S10", "S17", "S18", "S19", "S24", "9", "10", "19"]
  },
  "S10": {
    "coords": [[1372,751],[1420,730],[1463,710],[1495,674],[1526,616],[1545,571],[1558,533],[1569,536],[1583,541],[1603,532],[1618,517],[1622,515],[1634,521],[1646,535],[1651,539],[1666,537],[1685,532],[1717,531],[1743,535],[1731,541],[1718,551],[1682,549],[1669,564],[1657,571],[1632,567],[1613,587],[1618,594],[1614,612],[1611,635],[1608,667],[1599,676],[1593,681],[1575,683],[1565,679],[1556,694],[1562,715],[1557,728],[1552,734],[1554,747],[1538,767],[1526,790],[1504,821],[1472,806],[1442,784],[1402,762],[1385,756]],
    "neighbors": ["S9", "S19", "19", "22", "40", "41"] //"S11"
  },
  "S11": {
    "coords": [[1726,575],[1750,574],[1777,562],[1784,541],[1800,528],[1819,516],[1830,515],[1817,524],[1804,536],[1788,550],[1785,566],[1799,576],[1819,584],[1844,584],[1854,565],[1868,541],[1893,533],[1911,526],[1939,518],[1952,520],[1959,540],[1968,576],[1961,606],[1944,624],[1900,637],[1842,648],[1814,656],[1791,669],[1799,650],[1811,632],[1815,629],[1815,609],[1795,594],[1773,588],[1759,592],[1743,599],[1719,596],[1720,583]],
    "neighbors": ["S12", "S13", "22", "23", "39", "40"]
  },
  "S12": {
    "coords": [[1970,610],[1978,585],[1971,543],[1956,522],[1966,521],[1985,519],[2011,506],[2018,504],[2018,484],[1998,479],[1968,482],[1959,479],[1966,471],[1968,464],[1966,442],[1969,424],[1969,411],[1982,404],[1995,400],[2004,409],[2018,409],[2034,417],[2054,429],[2054,433],[2031,432],[2008,433],[1994,439],[1972,441],[1969,447],[1973,457],[1997,464],[2037,479],[2087,495],[2123,503],[2130,500],[2129,495],[2104,482],[2090,470],[2083,463],[2092,458],[2094,436],[2089,415],[2106,410],[2122,401],[2131,396],[2134,409],[2127,425],[2116,441],[2124,473],[2141,493],[2162,506],[2167,525],[2188,534],[2217,541],[2244,548],[2248,569],[2252,586],[2265,594],[2286,593],[2298,601],[2303,620],[2296,632],[2286,646],[2247,659],[2210,667],[2186,676],[2154,672],[2127,651],[2085,614],[2040,603],[2016,602]],
    "neighbors": ["S11", "S13", "23", "24", "27", "29", "31", "32"]
  },
  "S13": {
    "coords": [[1911,670],[1888,661],[1862,657],[1830,667],[1810,673],[1815,668],[1842,656],[1883,652],[1934,637],[1978,614],[2029,612],[2075,623],[2106,639],[2131,668],[2170,683],[2150,697],[2127,729],[2107,755],[2091,775],[2071,783],[2048,792],[2025,791],[2010,777],[1996,782],[1972,762],[1938,721],[1925,691]],
    "neighbors": ["S11", "S12", "32", "35", "37", "38"]
  },
  "S14": {
    "coords": [[121,705],[99,691],[88,660],[126,640],[136,650],[158,644],[179,644],[194,635],[205,625],[205,615],[201,606],[183,609],[162,619],[145,628],[127,635],[127,640],[88,660],[79,631],[71,596],[72,530],[85,478],[110,411],[149,354],[200,314],[261,293],[327,271],[353,258],[347,274],[336,339],[340,394],[332,399],[307,376],[308,366],[296,358],[283,346],[272,350],[271,359],[250,369],[241,388],[222,401],[198,413],[190,427],[192,443],[209,460],[206,493],[217,502],[233,504],[252,522],[274,539],[284,542],[294,546],[307,550],[304,553],[293,557],[273,543],[253,533],[229,538],[207,544],[181,545],[176,557],[181,573],[196,585],[224,582],[236,594],[252,594],[264,599],[272,590],[277,592],[288,601],[296,603],[302,596],[320,594],[330,577],[352,568],[379,561],[385,550],[371,541],[361,529],[319,524],[325,517],[335,505],[346,477],[344,457],[337,445],[336,427],[340,425],[332,397],[341,393],[345,433],[353,482],[373,525],[385,546],[385,568],[380,623],[384,662],[398,690],[417,708],[388,711],[359,711],[327,722],[316,695],[330,674],[331,661],[323,651],[299,657],[279,670],[268,686],[283,701],[298,707],[316,695],[325,723],[284,737],[247,741],[208,740],[164,729]],
    "neighbors": ["S1", "S15", "S20", "1"]
  },
  "S15": {
    "coords": [[354,429],[348,378],[348,317],[352,276],[366,250],[424,215],[470,199],[532,210],[568,234],[535,274],[516,277],[511,292],[519,305],[532,307],[537,323],[524,331],[523,347],[512,364],[511,385],[512,396],[520,402],[529,401],[540,394],[548,386],[557,362],[564,356],[574,352],[570,342],[566,340],[566,334],[570,333],[571,322],[564,316],[557,318],[538,322],[532,306],[539,303],[544,300],[544,292],[542,284],[536,275],[569,235],[588,250],[602,267],[606,293],[624,343],[641,398],[664,439],[691,474],[702,482],[684,489],[660,509],[633,543],[618,591],[602,625],[585,664],[563,696],[549,709],[516,723],[488,726],[468,727],[452,723],[424,710],[398,673],[391,633],[392,605],[423,613],[426,624],[441,633],[466,631],[477,627],[496,631],[513,618],[527,607],[555,606],[560,609],[575,608],[584,590],[580,577],[558,557],[557,537],[541,529],[523,520],[507,520],[492,516],[489,504],[498,490],[515,449],[523,424],[517,417],[508,411],[500,399],[495,395],[504,386],[500,374],[484,374],[462,375],[475,357],[476,350],[488,334],[494,294],[482,283],[474,274],[472,264],[465,260],[453,258],[436,254],[420,262],[408,270],[393,269],[386,274],[385,290],[382,297],[371,303],[371,327],[385,355],[407,374],[422,395],[419,406],[412,410],[420,429],[424,453],[418,482],[398,508],[380,528],[384,541],[412,546],[427,561],[430,573],[443,581],[445,593],[432,602],[423,613],[391,604],[396,565],[385,544],[377,521],[358,471]],
    "neighbors": ["S1", "S2", "S7", "S14", "S16", "S20", "2", "3", "4"]
  },
  "S16": {
    "coords": [[590,680],[614,626],[629,581],[647,539],[667,510],[687,499],[708,490],[729,505],[773,525],[816,531],[871,523],[894,521],[870,533],[849,551],[807,581],[763,612],[748,624],[728,640],[701,665],[676,708],[660,750],[650,801],[640,853],[636,894],[636,933],[619,950],[596,957],[578,966],[547,963],[525,947],[507,924],[497,895],[497,823],[517,770],[555,722]],
    "neighbors": ["S7", "S15", "S17", "S18", "S20", "S22"]
  },
  "S17": {
    "coords": [[968,647],[912,614],[923,586],[936,586],[941,578],[949,579],[956,557],[957,546],[945,538],[932,538],[929,553],[918,559],[914,567],[915,586],[921,588],[911,614],[866,599],[825,603],[779,613],[797,600],[836,577],[866,555],[895,531],[918,501],[930,468],[960,476],[958,489],[960,508],[956,517],[956,531],[962,529],[980,516],[1004,491],[1019,484],[1029,479],[1044,482],[1054,475],[1065,468],[1060,458],[1045,454],[1015,458],[984,469],[972,471],[962,476],[931,467],[937,438],[937,404],[936,392],[956,404],[978,417],[1016,428],[1057,442],[1085,462],[1120,480],[1112,493],[1093,484],[1083,488],[1073,505],[1077,533],[1069,542],[1075,557],[1072,565],[1061,578],[1057,592],[1061,601],[1051,606],[1043,607],[1049,620],[1067,629],[1101,640],[1133,636],[1159,628],[1178,615],[1206,615],[1214,615],[1226,608],[1237,600],[1250,598],[1261,597],[1266,582],[1255,572],[1225,569],[1206,568],[1193,558],[1170,561],[1165,559],[1167,534],[1166,525],[1169,525],[1166,512],[1150,502],[1130,500],[1113,493],[1121,479],[1141,490],[1179,517],[1207,532],[1221,551],[1252,564],[1271,582],[1278,589],[1272,607],[1237,620],[1182,627],[1149,638],[1105,655],[1074,679],[1061,695],[1052,707],[1049,723],[1046,738],[1023,709],[971,654]],
    "neighbors": ["S7", "S8", "S9", "S16", "S18"]
  },
  "S18": {
    "coords": [[933,1006],[934,1052],[948,1090],[968,1128],[934,1116],[891,1107],[832,1100],[766,1084],[734,1072],[743,1061],[758,1057],[768,1056],[777,1040],[777,1008],[767,1007],[748,1011],[741,1035],[736,1049],[743,1060],[735,1072],[711,1064],[690,1047],[674,1023],[658,987],[651,962],[646,908],[722,905],[723,923],[741,934],[746,939],[737,949],[728,961],[718,970],[713,977],[709,990],[715,995],[726,991],[734,989],[756,970],[774,965],[770,943],[781,939],[788,934],[786,922],[768,915],[761,910],[763,904],[774,894],[783,888],[796,882],[802,886],[814,892],[826,884],[837,861],[850,862],[861,855],[862,842],[842,831],[832,825],[830,816],[835,803],[837,783],[821,774],[808,770],[799,778],[794,793],[787,810],[782,818],[782,834],[797,839],[805,853],[794,858],[781,854],[762,858],[751,862],[739,872],[741,886],[729,893],[724,907],[645,909],[648,886],[651,858],[658,814],[669,764],[679,725],[698,686],[726,651],[771,627],[813,611],[818,631],[800,638],[786,655],[781,657],[778,671],[804,687],[826,670],[833,649],[818,631],[814,611],[829,610],[862,608],[902,620],[892,640],[880,652],[880,676],[888,690],[894,695],[902,690],[909,664],[898,643],[892,639],[901,620],[919,629],[959,656],[992,692],[1017,718],[1042,754],[1062,784],[1078,804],[1052,802],[1017,806],[983,842],[958,884],[945,922]],
    "neighbors": ["S9", "S16", "S17", "S22", "S23", "S24"]
  },
  "S19": {
    "coords": [[1181,811],[1250,786],[1289,770],[1331,758],[1367,758],[1393,768],[1438,792],[1465,811],[1502,826],[1493,843],[1476,867],[1458,879],[1443,870],[1423,871],[1402,882],[1392,894],[1393,920],[1384,916],[1376,921],[1359,922],[1327,912],[1289,901],[1265,903],[1241,912],[1228,909],[1197,890],[1169,878],[1148,854],[1115,817],[1150,811]],
    "neighbors": ["S9", "S10", "S24", "55", "57"]
  },
  "S20": {
    "coords": [[177,743],[144,733],[116,713],[93,695],[74,651],[69,639],[54,617],[28,603],[0,607],[0,916],[26,934],[70,944],[128,941],[194,935],[226,931],[262,941],[302,953],[359,963],[408,962],[468,946],[496,926],[486,888],[491,835],[493,798],[506,766],[530,730],[503,733],[466,734],[424,720],[412,714],[375,717],[335,729],[310,740],[252,750]],
    "neighbors": ["S1", "S14", "S15", "S16", "S21", "S22"]
  },
  "S21": {
    "coords": [[185,942],[159,948],[99,954],[44,947],[0,928],[0,1309],[33,1311],[67,1306],[96,1298],[131,1290],[154,1281],[129,1274],[103,1266],[87,1255],[77,1248],[76,1238],[87,1227],[94,1223],[92,1218],[78,1209],[65,1196],[69,1182],[88,1175],[86,1168],[78,1150],[60,1135],[60,1122],[54,1104],[52,1087],[62,1082],[80,1080],[96,1083],[111,1087],[128,1094],[146,1094],[165,1087],[192,1075],[206,1071],[216,1074],[221,1091],[229,1103],[256,1111],[278,1119],[298,1121],[321,1123],[344,1135],[374,1151],[392,1175],[396,1201],[394,1218],[401,1229],[411,1243],[416,1266],[416,1291],[434,1291],[458,1287],[485,1266],[504,1227],[508,1170],[493,1112],[476,1072],[451,1032],[419,1000],[398,987],[360,976],[288,955],[250,946],[219,944]],
    "neighbors": ["S20", "S22", "S27", "S28", "98", "99"]
  },
  "S22": {
    "coords": [[647,983],[664,1028],[692,1063],[743,1086],[765,1094],[774,1112],[781,1143],[778,1182],[767,1233],[742,1276],[719,1300],[666,1314],[608,1318],[568,1310],[536,1291],[518,1266],[512,1237],[516,1206],[516,1158],[505,1107],[475,1046],[438,1005],[388,975],[417,972],[458,964],[482,952],[500,932],[516,952],[544,972],[582,974],[618,964],[638,946]],
    "neighbors": ["S16", "S18", "S20", "S21", "S23", "S28"]
  },
  "S23": {
    "coords": [[1034,1322],[1041,1357],[1047,1370],[1048,1405],[1031,1437],[1001,1470],[953,1502],[917,1516],[867,1525],[807,1524],[758,1513],[737,1501],[716,1471],[741,1467],[735,1479],[741,1491],[754,1497],[778,1489],[805,1477],[839,1461],[865,1449],[865,1438],[856,1425],[847,1414],[849,1405],[857,1393],[859,1381],[848,1367],[838,1366],[810,1373],[805,1373],[794,1381],[774,1393],[757,1403],[745,1413],[739,1432],[745,1444],[747,1456],[742,1469],[714,1470],[702,1450],[685,1417],[666,1387],[634,1348],[613,1328],[663,1322],[713,1309],[751,1287],[777,1231],[862,1284],[853,1306],[856,1323],[865,1330],[878,1330],[888,1322],[894,1302],[894,1286],[884,1282],[869,1282],[864,1286],[779,1232],[783,1210],[789,1174],[789,1148],[785,1125],[769,1095],[786,1097],[825,1107],[896,1115],[966,1138],[995,1177],[1017,1197],[1048,1215],[1043,1230],[1035,1270]],
    "neighbors": ["S18", "S22", "S24", "S25", "S28", "S29", "S30", "115"]
  },
  "S24": {
    "coords": [[960,1093],[948,1064],[942,1009],[949,956],[959,916],[977,868],[998,842],[1014,821],[1050,811],[1078,813],[1110,825],[1138,848],[1158,879],[1140,895],[1124,916],[1112,927],[1105,938],[1109,964],[1121,971],[1160,981],[1163,985],[1163,1011],[1172,1017],[1176,1030],[1177,1069],[1176,1094],[1175,1108],[1154,1120],[1122,1140],[1087,1167],[1064,1191],[1061,1203],[1049,1206],[1028,1194],[997,1165],[977,1132]],
    "neighbors": ["S9", "S18", "S19", "S23", "S25"]
  },
  "S25": {
    "coords": [[1059,1371],[1044,1340],[1041,1298],[1046,1255],[1066,1201],[1100,1171],[1128,1147],[1172,1116],[1185,1120],[1198,1129],[1217,1134],[1234,1135],[1258,1136],[1258,1148],[1263,1152],[1270,1153],[1272,1165],[1268,1191],[1265,1213],[1273,1244],[1281,1277],[1286,1305],[1281,1334],[1278,1360],[1268,1386],[1263,1400],[1262,1434],[1266,1448],[1263,1454],[1250,1449],[1217,1439],[1182,1437],[1149,1445],[1114,1456],[1089,1480],[1087,1449],[1074,1409],[1062,1385]],
    "neighbors": ["S23", "S24", "S26", "S30", "S31", "58", "60"]
  },
  "S26": {
    "coords": [[1334,1451],[1310,1438],[1290,1436],[1269,1443],[1275,1404],[1286,1393],[1303,1378],[1309,1381],[1321,1395],[1334,1406],[1373,1401],[1379,1398],[1381,1381],[1389,1365],[1396,1338],[1402,1314],[1413,1311],[1426,1322],[1438,1345],[1444,1358],[1454,1363],[1479,1360],[1506,1358],[1542,1358],[1557,1352],[1572,1346],[1591,1350],[1596,1354],[1586,1358],[1586,1369],[1577,1393],[1560,1409],[1529,1435],[1513,1454],[1489,1462],[1459,1461],[1427,1449],[1406,1446],[1382,1449],[1372,1455],[1353,1456]],
    "neighbors": ["S25", "60", "61", "75", "76", "77"] //S31?
  },
  "S27": {
    "coords": [[84,1315],[36,1321],[0,1314],[0,1682],[5,1683],[32,1666],[74,1644],[103,1619],[132,1602],[154,1589],[200,1576],[187,1563],[162,1546],[144,1535],[129,1519],[116,1504],[103,1491],[96,1476],[98,1463],[101,1449],[101,1438],[95,1428],[84,1411],[80,1378],[84,1348],[110,1337],[133,1312],[161,1293],[144,1297]],
    "neighbors": ["S21", "S33", "101", "102"]
  },
  "S28": {
    "coords": [[455,1295],[474,1290],[493,1268],[506,1254],[510,1270],[523,1296],[554,1315],[604,1334],[629,1358],[653,1384],[672,1417],[677,1439],[676,1453],[664,1468],[653,1477],[630,1477],[610,1481],[588,1482],[567,1481],[555,1469],[537,1457],[512,1460],[487,1461],[465,1442],[458,1442],[444,1449],[414,1465],[398,1473],[387,1476],[398,1465],[400,1457],[400,1449],[384,1438],[384,1431],[392,1416],[396,1383],[397,1367],[397,1332],[408,1306],[412,1292],[429,1299],[443,1300]],
    "neighbors": ["S21", "S22", "S23", "S28", "99", "103", "104", "113", "114"]
  },
  "S29": {
    "coords": [[726,1504],[745,1518],[770,1529],[796,1529],[805,1550],[816,1583],[819,1608],[819,1639],[813,1675],[798,1702],[784,1725],[767,1740],[737,1766],[698,1786],[653,1801],[616,1814],[584,1814],[543,1814],[522,1811],[541,1798],[556,1787],[567,1769],[572,1758],[580,1752],[598,1744],[631,1718],[644,1700],[660,1677],[660,1663],[651,1653],[644,1650],[646,1638],[658,1629],[676,1625],[683,1624],[700,1615],[716,1595],[731,1587],[741,1587],[752,1579],[753,1563],[750,1539],[742,1535],[712,1528],[688,1524],[680,1524],[669,1517],[668,1498],[671,1486],[670,1476],[683,1457],[685,1436],[704,1472]],
    "neighbors": ["S23", "S28", "S30", "S34", "112", "113"]
  },
  "S30": {
    "coords": [[824,1664],[829,1617],[824,1579],[817,1554],[802,1533],[822,1531],[852,1531],[895,1529],[931,1520],[974,1503],[1002,1482],[1023,1461],[1040,1444],[1053,1417],[1060,1397],[1069,1423],[1078,1445],[1080,1471],[1076,1495],[1063,1520],[1062,1540],[1059,1568],[1053,1599],[1037,1638],[1017,1673],[1003,1710],[1009,1742],[1018,1777],[1038,1813],[1057,1841],[1037,1841],[989,1850],[946,1860],[904,1871],[852,1872],[804,1866],[771,1862],[743,1854],[710,1842],[672,1832],[639,1818],[655,1812],[684,1802],[732,1781],[757,1761],[787,1734],[808,1709]],
    "neighbors": ["S23", "S25", "S29", "S31", "S34", "S35", "S36"]
  },
  "S31": {
    "coords": [[1144,1457],[1109,1476],[1087,1500],[1076,1532],[1065,1560],[1064,1577],[1061,1599],[1046,1637],[1024,1679],[1009,1719],[1018,1750],[1030,1783],[1047,1810],[1071,1836],[1091,1848],[1117,1861],[1145,1866],[1173,1866],[1213,1862],[1238,1850],[1250,1834],[1267,1822],[1266,1815],[1264,1802],[1269,1797],[1281,1770],[1286,1760],[1290,1727],[1289,1703],[1272,1698],[1252,1685],[1233,1673],[1222,1652],[1222,1617],[1221,1583],[1229,1568],[1241,1547],[1256,1523],[1271,1513],[1279,1497],[1286,1491],[1285,1487],[1277,1476],[1265,1466],[1258,1457],[1227,1450],[1181,1447]],
    "neighbors": ["S25", "S30", "S32", "S36", "77", "82"]
  },
  "S32": {
    "coords": [[1260,1845],[1275,1824],[1288,1823],[1306,1814],[1337,1798],[1357,1789],[1374,1781],[1392,1772],[1398,1770],[1404,1772],[1431,1784],[1448,1785],[1444,1793],[1434,1808],[1414,1821],[1415,1829],[1421,1838],[1417,1842],[1390,1848],[1375,1856],[1359,1863],[1346,1869],[1337,1874],[1342,1889],[1354,1890],[1370,1888],[1398,1885],[1424,1880],[1428,1876],[1435,1881],[1448,1882],[1467,1885],[1484,1890],[1489,1892],[1490,1897],[1488,1903],[1481,1910],[1479,1923],[1489,1921],[1506,1922],[1528,1923],[1533,1932],[1540,1939],[1552,1942],[1560,1936],[1571,1927],[1582,1917],[1588,1916],[1592,1916],[1592,1928],[1592,1943],[1589,1952],[1580,1960],[1569,1969],[1557,1979],[1542,1984],[1520,1980],[1508,1980],[1488,1979],[1477,1980],[1458,1975],[1449,1973],[1445,1978],[1446,1987],[1457,1996],[1469,2002],[1472,2005],[1474,2012],[1469,2020],[1469,2028],[1464,2032],[1427,2052],[1392,2067],[1369,2069],[1343,2072],[1328,2068],[1306,2052],[1296,2041],[1289,2026],[1282,2006],[1263,1964],[1241,1923],[1224,1906],[1198,1886],[1181,1875],[1208,1868],[1234,1864],[1247,1856]],
    "neighbors": ["S31", "S36", "S37", "82", "84", "85", "87"]
  },
  "S33": {
    "coords": [[0,1695],[0,2197],[24,2188],[51,2183],[92,2164],[124,2148],[141,2140],[163,2129],[202,2107],[219,2088],[244,2065],[256,2049],[273,2026],[275,2008],[280,1991],[274,1979],[264,1964],[257,1946],[252,1928],[249,1905],[251,1876],[266,1846],[264,1838],[260,1831],[245,1826],[231,1828],[215,1828],[210,1822],[214,1818],[216,1809],[204,1797],[199,1797],[197,1800],[195,1810],[186,1813],[176,1810],[168,1804],[148,1799],[144,1792],[149,1775],[142,1767],[130,1759],[126,1730],[129,1690],[148,1666],[161,1648],[175,1632],[192,1627],[204,1626],[204,1603],[207,1597],[208,1585],[202,1581],[169,1595],[88,1643]],
    "neighbors": ["S27", "S34", "S41", "105", "106"]
  },
  "S34": {
    "coords": [[446,2044],[518,2053],[553,2065],[580,2076],[599,2099],[623,2142],[628,2112],[635,2077],[646,2035],[660,1991],[678,1954],[648,1950],[647,1965],[639,1980],[642,1988],[645,2002],[638,2015],[628,2027],[609,2032],[590,2028],[577,2025],[560,2008],[555,2002],[545,1998],[525,1998],[516,1992],[499,1980],[493,1976],[490,1958],[489,1950],[496,1940],[513,1935],[526,1928],[541,1920],[557,1917],[577,1922],[597,1928],[614,1928],[628,1934],[644,1941],[649,1949],[679,1952],[689,1938],[705,1916],[709,1904],[719,1886],[726,1858],[699,1848],[658,1831],[619,1821],[599,1823],[567,1826],[540,1823],[509,1817],[502,1825],[496,1841],[496,1867],[495,1881],[500,1886],[499,1901],[491,1907],[471,1913],[452,1913],[428,1923],[413,1932],[382,1935],[374,1931],[374,1923],[369,1913],[362,1908],[351,1913],[343,1915],[334,1912],[333,1905],[331,1892],[320,1888],[315,1884],[324,1873],[328,1868],[314,1864],[304,1858],[288,1854],[269,1850],[264,1873],[257,1901],[264,1928],[275,1960],[284,1983],[302,2000],[333,2019],[376,2033]],
    "neighbors": ["S29", "S30", "S33", "S35", "S41", "108", "109", "116"]
  },
  "S35": {
    "coords": [[707,1930],[721,1900],[732,1884],[731,1858],[759,1867],[789,1873],[837,1878],[885,1879],[914,1876],[953,1868],[936,1880],[913,1898],[893,1924],[871,1968],[858,2011],[857,2054],[853,2093],[858,2132],[859,2161],[874,2202],[879,2221],[865,2241],[849,2266],[821,2279],[789,2289],[761,2287],[717,2276],[689,2263],[664,2244],[644,2213],[633,2178],[631,2150],[643,2073],[664,1999],[685,1964]],
    "neighbors": ["S30", "S34", "S36", "S41", "S42"]
  },
  "S36": {
    "coords": [[866,2036],[871,1990],[890,1947],[917,1904],[952,1880],[984,1859],[1032,1854],[1072,1845],[1088,1856],[1119,1871],[1156,1872],[1179,1877],[1215,1904],[1248,1951],[1268,1994],[1277,2013],[1278,2044],[1268,2094],[1256,2121],[1239,2165],[1228,2194],[1227,2235],[1230,2265],[1212,2269],[1166,2286],[1116,2304],[1088,2312],[1063,2313],[1024,2313],[977,2304],[949,2288],[917,2265],[884,2221],[868,2158],[864,2113],[863,2063]],
    "neighbors": ["S30", "S31", "S32", "S35", "S37", "S42", "S43"]
  },
  "S37": {
    "coords": [[1254,2153],[1264,2127],[1277,2094],[1285,2056],[1282,2033],[1297,2054],[1318,2072],[1345,2077],[1376,2080],[1398,2069],[1437,2057],[1461,2049],[1473,2038],[1480,2041],[1492,2046],[1524,2045],[1513,2053],[1492,2065],[1474,2069],[1469,2076],[1468,2088],[1476,2101],[1477,2106],[1470,2116],[1453,2133],[1440,2143],[1432,2156],[1430,2173],[1425,2185],[1437,2205],[1449,2225],[1458,2237],[1469,2243],[1479,2255],[1481,2271],[1490,2264],[1507,2265],[1528,2269],[1558,2265],[1581,2236],[1607,2196],[1629,2165],[1656,2137],[1676,2132],[1681,2149],[1685,2185],[1685,2218],[1677,2246],[1661,2281],[1637,2302],[1605,2319],[1568,2328],[1510,2335],[1441,2336],[1402,2336],[1360,2336],[1305,2329],[1277,2323],[1250,2293],[1238,2274],[1237,2242],[1238,2200]],
    "neighbors": ["S32", "S36", "S38", "S43", "86", "87", "88"]
  },
  "S38": {
    "coords": [[1736,2095],[1759,2086],[1777,2068],[1786,2034],[1797,2008],[1820,1968],[1836,1943],[1847,1923],[1854,1897],[1857,1891],[1863,1888],[1877,1896],[1888,1905],[1893,1920],[1895,1935],[1884,1951],[1878,1967],[1865,1985],[1859,2003],[1843,2019],[1820,2036],[1821,2057],[1817,2066],[1802,2076],[1785,2099],[1769,2111],[1755,2121],[1753,2145],[1765,2153],[1787,2152],[1786,2159],[1777,2173],[1772,2189],[1775,2197],[1788,2199],[1802,2194],[1817,2191],[1823,2201],[1824,2213],[1827,2225],[1821,2244],[1791,2257],[1775,2265],[1732,2266],[1696,2269],[1676,2275],[1687,2251],[1693,2227],[1693,2185],[1687,2132],[1697,2122],[1704,2113],[1709,2102],[1717,2097]],
    "neighbors": ["S37", "S39", "S43", "81", "86", "89", "90"]
  },
  "S39": {
    "coords": [[1822,2252],[1797,2262],[1769,2274],[1749,2272],[1747,2284],[1734,2301],[1723,2317],[1717,2344],[1720,2369],[1722,2400],[2026,2400],[2032,2383],[2045,2360],[2042,2348],[2032,2340],[2010,2344],[1983,2344],[1976,2338],[1980,2333],[1985,2329],[1986,2322],[1980,2318],[1959,2320],[1939,2323],[1917,2316],[1910,2312],[1908,2296],[1921,2296],[1936,2292],[1950,2281],[1963,2282],[1992,2280],[1995,2268],[2005,2254],[1995,2248],[1994,2239],[1998,2232],[2010,2212],[2006,2195],[2001,2181],[1975,2177],[1969,2181],[1969,2210],[1963,2222],[1951,2229],[1926,2239],[1905,2243],[1891,2237],[1871,2231],[1857,2225],[1839,2218],[1834,2219],[1827,2236]],
    "neighbors": ["S38", "S40", "S43", "89", "93", "95"]
  },
  "S40": {
    "coords": [[2039,2400],[2400,2400],[2400,2356],[2362,2360],[2295,2372],[2267,2376],[2215,2375],[2177,2367],[2142,2361],[2118,2350],[2094,2350],[2055,2353],[2046,2372],[2040,2387]],
    "neighbors": ["S39", "96", "97"]
  },
  "S41": {
    "coords": [[0,2205],[0,2400],[236,2400],[315,2392],[357,2368],[394,2343],[427,2308],[460,2279],[496,2247],[522,2227],[569,2217],[596,2213],[619,2213],[636,2217],[628,2192],[624,2163],[611,2134],[599,2111],[586,2091],[553,2072],[494,2061],[432,2054],[369,2043],[334,2034],[315,2021],[287,1997],[282,2028],[259,2061],[226,2090],[195,2121],[128,2157],[76,2178],[24,2196]],
    "neighbors": ["S33", "S34", "S35", "S42"]
  },
  "S42": {
    "coords": [[323,2400],[364,2382],[401,2353],[434,2318],[461,2285],[490,2259],[519,2242],[552,2231],[575,2227],[595,2220],[627,2221],[648,2232],[657,2249],[668,2261],[688,2273],[725,2286],[755,2296],[787,2298],[829,2286],[861,2275],[876,2240],[884,2232],[897,2252],[939,2291],[972,2308],[1024,2320],[1076,2322],[1055,2335],[1020,2362],[993,2395],[993,2400]],
    "neighbors": ["S35", "S36", "S41", "S43"]
  },
  "S43": {
    "coords": [[1008,2400],[1722,2400],[1715,2390],[1710,2361],[1714,2328],[1722,2306],[1737,2280],[1740,2276],[1726,2274],[1685,2280],[1670,2282],[1665,2295],[1630,2318],[1590,2336],[1483,2344],[1413,2344],[1330,2343],[1289,2334],[1261,2316],[1239,2293],[1236,2268],[1187,2286],[1125,2308],[1072,2334],[1031,2367]],
    "neighbors": ["S36", "S37", "S38", "S39", "S42"]
  }
  //skip a few
  /*"S38": {
    "coords": [[2112,2868],[2132,2816],[2140,2780],[2132,2724],[2128,2684],[2144,2680],[2156,2652],[2164,2648],[2192,2640],[2216,2628],[2236,2616],[2256,2568],[2276,2520],[2316,2452],[2340,2388],[2352,2384],[2364,2388],[2380,2404],[2388,2436],[2360,2500],[2352,2508],[2344,2528],[2304,2560],[2296,2572],[2296,2600],[2296,2608],[2272,2620],[2260,2644],[2248,2656],[2228,2668],[2208,2688],[2212,2704],[2224,2708],[2252,2712],[2256,2716],[2256,2724],[2252,2736],[2240,2756],[2240,2764],[2248,2772],[2272,2768],[2292,2760],[2296,2760],[2300,2764],[2300,2772],[2304,2784],[2304,2808],[2300,2828],[2228,2860],[2184,2864],[2124,2868],[2116,2872],[2116,2872],[2116,2872]],
    "neighbors": ["S37", "S39", "S43", "81", "86", "89", "90"]
  }*/
};

//1 region makes 1 wealth per 30 days?
//not const because we add properties. however, hardcoded properties should not change
let regions_info = {
  "1": {
    "coords": [[204,422],[207,418],[213,418],[212,414],[219,414],[226,410],[235,406],[248,395],[254,389],[255,377],[263,375],[272,370],[279,364],[279,357],[284,357],[285,360],[290,367],[298,373],[299,381],[307,387],[320,398],[327,410],[328,423],[326,431],[323,431],[324,445],[327,451],[335,458],[336,464],[338,467],[337,475],[334,482],[333,488],[327,495],[325,501],[323,509],[317,511],[311,514],[308,518],[311,525],[324,532],[337,534],[356,535],[357,539],[365,546],[372,550],[371,554],[363,556],[353,558],[345,560],[341,563],[329,565],[322,568],[318,573],[314,584],[306,583],[296,587],[294,592],[291,588],[286,583],[271,583],[263,588],[241,588],[233,576],[230,574],[197,574],[194,572],[185,560],[189,556],[194,554],[217,555],[221,552],[233,552],[234,549],[240,548],[241,544],[263,544],[264,548],[269,551],[274,557],[275,557],[277,559],[282,561],[283,562],[303,563],[313,560],[314,558],[321,556],[319,545],[313,543],[304,542],[302,538],[295,540],[291,535],[281,535],[271,522],[257,515],[241,504],[235,499],[231,497],[229,494],[223,496],[221,491],[219,491],[215,483],[217,471],[219,460],[216,455],[211,448],[207,444],[203,441]],
    "extensions": [[[141,636],[146,632],[151,631],[152,629],[163,627],[163,621],[173,620],[175,617],[196,616],[195,622],[192,625],[191,627],[188,631],[180,635],[168,635],[164,637],[152,639],[145,641],[139,640]], [[281,687],[287,681],[291,674],[303,667],[306,666],[316,663],[323,667],[319,670],[317,675],[311,684],[306,690],[303,698],[288,696],[287,693],[282,693]]],
    "neighbors": ["S14"]
  },
  "2": {
    "coords": [[381,312],[381,324],[386,334],[387,339],[391,340],[392,346],[395,348],[399,353],[413,368],[423,381],[429,391],[435,387],[436,385],[441,381],[442,370],[446,370],[451,366],[458,363],[464,359],[464,354],[467,345],[476,334],[483,326],[483,306],[485,299],[475,289],[466,280],[466,271],[455,270],[445,269],[435,270],[422,276],[415,279],[397,279],[396,293],[393,294],[394,300],[387,304],[382,308]],
    "extensions": [[[525,300],[521,294],[519,293],[519,289],[524,284],[535,284],[535,290],[534,298]]],
    "neighbors": ["3", "S15"]
  },
  "3": {
    "coords": [[426,412],[429,428],[432,445],[431,472],[428,478],[429,486],[416,501],[396,523],[390,530],[390,532],[398,533],[405,532],[416,536],[421,541],[422,545],[428,544],[430,537],[441,520],[455,512],[471,510],[482,512],[483,495],[494,475],[502,463],[502,453],[508,443],[508,435],[512,434],[511,423],[501,417],[494,412],[495,407],[485,400],[486,389],[490,388],[485,387],[452,385],[448,387],[448,394],[441,401],[437,406],[428,406]],
    "extensions": [[[521,391],[517,374],[521,371],[523,361],[525,358],[527,351],[530,347],[531,338],[535,331],[539,330],[548,326],[551,324],[561,325],[561,331],[560,350],[559,351],[554,359],[552,365],[549,365],[549,372],[545,372],[544,377],[537,384],[534,388],[527,395]]],
    "neighbors": ["2", "4", "S15"]
  },
  "4": {
    "coords": [[440,567],[440,548],[442,540],[450,531],[465,525],[490,525],[500,528],[514,530],[528,532],[532,534],[539,537],[547,541],[547,559],[554,565],[571,581],[571,592],[568,603],[561,602],[550,598],[524,600],[516,605],[499,619],[468,618],[467,622],[437,623],[430,617],[439,610],[452,602],[454,592],[454,581],[443,571]],
    "neighbors": ["3", "S15"]
  },
  "5": {
    "coords": [[652,239],[658,238],[657,235],[662,235],[666,231],[668,228],[668,227],[672,224],[672,220],[675,217],[676,215],[681,211],[686,208],[692,210],[694,212],[698,216],[699,229],[702,235],[707,241],[708,245],[716,253],[726,254],[733,254],[737,256],[738,260],[742,265],[739,267],[734,271],[728,271],[728,273],[718,273],[715,275],[712,277],[708,279],[704,283],[705,291],[698,297],[690,297],[690,299],[673,299],[673,301],[648,303],[647,300],[646,297],[662,297],[661,294],[665,295],[666,292],[670,290],[672,287],[672,281],[669,279],[668,276],[667,277],[663,269],[661,265],[660,263],[657,259],[653,253],[653,253]],
    "extensions": [[[767,286],[770,278],[771,271],[777,268],[785,265],[792,265],[797,268],[799,282],[796,284],[796,288],[796,294],[780,294],[774,291]]],
    "neighbors": ["S7"]
  },
  "6": {
    "coords": [[761,382],[767,378],[768,377],[784,376],[791,379],[797,381],[798,381],[808,382],[814,379],[818,377],[821,375],[826,370],[827,363],[829,359],[827,354],[827,338],[829,337],[834,345],[839,348],[841,359],[844,361],[847,369],[847,380],[851,385],[855,390],[859,393],[860,394],[861,396],[867,398],[870,400],[872,402],[874,407],[881,406],[889,409],[891,413],[891,418],[883,416],[879,418],[879,424],[879,434],[882,436],[883,445],[878,450],[871,453],[865,456],[858,458],[855,458],[855,453],[852,446],[845,447],[833,446],[834,444],[826,445],[825,439],[821,431],[817,427],[815,425],[816,417],[813,418],[811,412],[805,412],[803,405],[798,402],[787,399],[785,399],[787,393],[784,388],[780,385],[761,385]],
    "extensions": [[[702,371],[713,360],[720,356],[725,370],[723,382],[717,386],[711,388],[705,384],[703,380],[702,380]]],
    "neighbors": ["S7"]
  },
  "7": {
    "coords": [[979,352],[988,351],[992,354],[999,355],[1000,357],[1004,357],[1007,360],[1012,361],[1012,364],[1020,364],[1019,366],[1039,367],[1038,365],[1042,363],[1043,361],[1045,359],[1046,357],[1051,355],[1052,357],[1055,358],[1058,361],[1060,363],[1065,365],[1069,369],[1073,371],[1076,374],[1077,374],[1082,379],[1085,383],[1088,385],[1092,386],[1093,390],[1098,389],[1098,392],[1115,392],[1115,389],[1122,389],[1123,393],[1120,394],[1120,403],[1120,407],[1117,408],[1116,412],[1115,414],[1107,413],[1107,410],[1099,409],[1096,407],[1085,407],[1084,409],[1076,409],[1071,406],[1060,408],[1055,411],[1054,412],[1040,413],[1037,409],[1026,410],[1021,406],[1016,403],[1005,391],[1002,386],[999,384],[995,381],[990,376],[988,373],[984,368],[978,360],[978,361],[976,357]],
    "extensions": [[[1103,445],[1112,440],[1114,438],[1123,436],[1127,434],[1134,431],[1138,429],[1140,426],[1141,416],[1150,416],[1153,431],[1157,439],[1168,454],[1178,466],[1179,484],[1172,485],[1170,468],[1162,461],[1156,451],[1145,445],[1128,444],[1116,447],[1109,449]]],
    "neighbors": ["S8"]
  },
  "8": {
    "coords": [[1085,500],[1083,505],[1083,549],[1083,564],[1077,571],[1074,578],[1067,585],[1068,607],[1063,611],[1056,612],[1056,617],[1063,619],[1062,622],[1073,623],[1074,623],[1084,625],[1085,628],[1106,630],[1124,629],[1133,628],[1134,625],[1144,625],[1146,622],[1154,622],[1154,620],[1160,617],[1162,616],[1164,615],[1166,613],[1170,612],[1171,610],[1176,610],[1178,606],[1216,606],[1220,603],[1224,599],[1228,595],[1232,590],[1244,592],[1255,592],[1256,585],[1248,582],[1240,580],[1233,575],[1228,577],[1229,579],[1201,577],[1200,574],[1197,573],[1195,570],[1193,566],[1178,567],[1178,571],[1160,570],[1155,567],[1155,534],[1157,532],[1158,517],[1155,516],[1153,514],[1145,512],[1140,510],[1128,510],[1127,508],[1120,507],[1118,503],[1110,503],[1109,500],[1104,500],[1104,498],[1099,496],[1097,494],[1087,494],[1087,496]],
    "extensions": [[[967,515],[965,488],[967,486],[969,481],[984,481],[987,479],[994,477],[1004,472],[1013,468],[1023,468],[1025,462],[1048,464],[1041,474],[1038,470],[1031,470],[1032,471],[1021,472],[1016,480],[1009,481],[1009,488],[997,489],[983,502],[973,510],[973,512]], [[928,582],[920,576],[920,570],[925,570],[925,561],[931,561],[938,550],[944,546],[948,549],[948,561],[945,561],[945,568],[939,573],[933,577]]],
    "neighbors": ["S17"]
  },
  "9": {
    "coords": [[1238,670],[1245,663],[1249,660],[1254,657],[1257,655],[1261,655],[1263,653],[1269,652],[1273,649],[1277,649],[1279,646],[1286,646],[1289,644],[1291,643],[1296,639],[1299,639],[1306,635],[1312,633],[1318,630],[1336,630],[1337,627],[1350,627],[1350,624],[1360,623],[1362,620],[1367,620],[1374,613],[1374,605],[1369,601],[1370,599],[1375,597],[1383,595],[1384,593],[1391,591],[1396,583],[1392,582],[1392,579],[1398,579],[1399,581],[1404,583],[1409,588],[1413,593],[1418,592],[1419,594],[1425,595],[1425,599],[1434,597],[1434,601],[1439,602],[1442,604],[1447,606],[1447,615],[1451,615],[1451,619],[1455,623],[1462,629],[1465,630],[1467,637],[1460,639],[1449,641],[1441,642],[1436,648],[1436,659],[1438,659],[1440,664],[1440,672],[1436,673],[1433,676],[1425,676],[1422,672],[1419,670],[1411,662],[1408,661],[1395,659],[1391,657],[1385,655],[1382,653],[1370,653],[1367,661],[1367,671],[1358,675],[1351,679],[1343,677],[1335,672],[1315,673],[1311,676],[1305,677],[1300,683],[1296,689],[1286,691],[1279,694],[1277,696],[1269,698],[1269,701],[1253,701],[1246,701],[1238,697],[1233,693],[1230,691],[1230,681],[1231,679],[1232,675]],
    "extensions": [[[1143,683],[1159,669],[1162,662],[1169,652],[1183,651],[1184,659],[1194,669],[1197,671],[1197,688],[1187,688],[1176,686],[1146,686]]],
    "neighbors": ["10", "S9"]
  },
  "10": {
    "coords": [[1291,441],[1307,441],[1331,440],[1332,437],[1336,436],[1338,433],[1340,432],[1344,430],[1344,427],[1357,427],[1365,421],[1371,417],[1377,417],[1377,415],[1384,415],[1389,409],[1396,403],[1399,398],[1403,399],[1403,401],[1409,408],[1418,412],[1427,418],[1431,419],[1431,424],[1428,427],[1427,443],[1421,447],[1415,449],[1413,457],[1416,464],[1424,469],[1426,475],[1423,481],[1421,485],[1422,491],[1432,495],[1437,499],[1442,502],[1448,506],[1449,511],[1452,517],[1453,524],[1447,531],[1436,531],[1427,531],[1423,528],[1415,525],[1374,526],[1346,527],[1333,531],[1328,531],[1325,535],[1329,542],[1337,542],[1339,544],[1347,544],[1348,547],[1357,548],[1359,550],[1365,554],[1373,554],[1375,557],[1381,557],[1379,560],[1384,561],[1383,566],[1383,574],[1379,575],[1376,574],[1370,568],[1364,565],[1353,564],[1345,558],[1339,555],[1336,553],[1325,552],[1326,556],[1315,556],[1313,551],[1308,552],[1304,550],[1297,549],[1285,558],[1281,560],[1271,559],[1269,553],[1277,550],[1284,546],[1293,538],[1297,530],[1294,528],[1293,522],[1296,521],[1300,517],[1300,505],[1297,501],[1294,496],[1287,490],[1281,489],[1281,483],[1285,477],[1287,469],[1290,463],[1291,459],[1291,453],[1291,444],[1288,443]],
    "extensions": [[[1198,448],[1208,437],[1216,428],[1222,419],[1242,419],[1245,424],[1247,432],[1248,435],[1241,440],[1229,445],[1220,456],[1214,462],[1206,461]]],
    "neighbors": ["9", "12", "18", "19", "S8", "S9"]
  },
  "11": {
    "coords": [[807,784],[819,781],[821,783],[826,786],[828,791],[829,797],[826,800],[824,806],[823,808],[822,824],[824,823],[826,829],[831,833],[835,837],[838,838],[841,841],[853,844],[853,849],[847,851],[847,855],[839,854],[837,857],[833,857],[830,860],[825,869],[823,870],[821,876],[817,880],[815,882],[809,883],[806,878],[804,876],[790,876],[785,879],[771,886],[770,888],[766,889],[761,895],[755,899],[752,905],[752,913],[758,916],[763,921],[767,925],[773,925],[775,935],[765,939],[762,953],[761,958],[759,959],[755,963],[751,968],[746,971],[739,976],[733,981],[731,983],[723,984],[722,980],[721,976],[725,976],[725,974],[731,969],[735,965],[739,962],[745,954],[751,948],[757,944],[757,936],[751,931],[745,929],[741,924],[735,920],[735,908],[735,899],[747,886],[748,877],[752,877],[752,871],[755,871],[756,868],[762,869],[763,863],[777,864],[778,861],[805,861],[805,858],[811,857],[812,849],[808,847],[806,845],[805,841],[801,837],[794,835],[789,830],[788,824],[793,821],[793,815],[796,814],[798,810],[799,805],[802,803],[802,797],[802,790],[805,791],[804,783]],
    "extensions": [[[792,672],[789,661],[796,657],[806,649],[812,640],[819,641],[822,650],[818,666],[807,674]],[[894,678],[883,670],[887,655],[896,655],[896,669]],[[748,1049],[746,1042],[750,1040],[754,1028],[757,1016],[769,1013],[769,1039],[764,1044],[762,1051]]],
    "neighbors": ["S18"]
  },
  "12": {
    "coords": [[1308,284],[1316,278],[1322,274],[1328,271],[1329,268],[1352,268],[1352,271],[1361,273],[1363,274],[1365,275],[1368,278],[1373,278],[1375,280],[1377,285],[1384,285],[1383,287],[1381,290],[1375,295],[1369,304],[1367,311],[1369,320],[1365,325],[1364,335],[1360,336],[1361,354],[1364,357],[1365,367],[1361,370],[1359,375],[1357,383],[1355,384],[1354,390],[1352,390],[1351,402],[1352,405],[1358,406],[1359,411],[1355,412],[1349,413],[1348,407],[1345,405],[1343,403],[1339,403],[1338,402],[1331,399],[1329,395],[1326,395],[1325,394],[1317,393],[1316,396],[1308,397],[1308,399],[1295,400],[1294,399],[1293,396],[1295,395],[1297,389],[1300,387],[1302,386],[1303,383],[1305,384],[1305,379],[1310,378],[1309,362],[1308,356],[1306,358],[1306,353],[1303,351],[1303,350],[1300,349],[1300,347],[1294,347],[1293,344],[1291,343],[1289,331],[1287,330],[1287,320],[1288,316],[1291,310],[1290,305],[1293,304],[1295,298],[1300,292]],
    "neighbors": ["10", "13", "16", "S8"]
  },
  "13": {
    "coords": [[1110,241],[1115,236],[1119,233],[1122,231],[1123,227],[1124,226],[1125,219],[1129,219],[1127,190],[1130,190],[1133,193],[1139,193],[1143,197],[1149,197],[1160,198],[1170,196],[1172,193],[1176,191],[1183,186],[1189,183],[1190,180],[1194,177],[1200,182],[1203,186],[1208,187],[1210,189],[1214,190],[1217,192],[1224,193],[1224,196],[1233,195],[1244,196],[1258,196],[1259,207],[1263,210],[1263,215],[1265,216],[1267,220],[1270,222],[1270,226],[1275,231],[1281,237],[1288,244],[1298,252],[1302,256],[1307,256],[1308,259],[1313,260],[1315,262],[1312,267],[1308,267],[1305,270],[1300,275],[1293,281],[1290,286],[1285,292],[1281,298],[1279,306],[1277,312],[1277,324],[1279,335],[1279,347],[1276,351],[1274,351],[1272,355],[1271,359],[1264,359],[1262,362],[1246,361],[1241,359],[1237,368],[1233,372],[1233,377],[1229,381],[1223,387],[1216,388],[1211,388],[1207,385],[1201,379],[1196,375],[1190,369],[1187,364],[1183,365],[1182,359],[1189,357],[1191,355],[1195,355],[1197,351],[1203,347],[1207,343],[1211,338],[1211,334],[1216,329],[1221,326],[1220,317],[1215,316],[1209,312],[1195,312],[1197,309],[1184,309],[1185,305],[1190,304],[1197,304],[1198,301],[1207,300],[1210,297],[1211,287],[1210,282],[1206,280],[1202,274],[1198,272],[1198,266],[1191,263],[1186,262],[1179,258],[1174,255],[1170,253],[1161,254],[1157,260],[1155,262],[1155,272],[1153,273],[1151,280],[1148,287],[1143,291],[1139,294],[1135,295],[1123,296],[1123,293],[1125,289],[1127,287],[1128,281],[1131,280],[1132,274],[1135,272],[1134,258],[1129,255],[1127,251],[1118,251],[1119,248],[1111,249],[1109,245]],
    "extensions": [[[1045,284],[1057,281],[1079,291],[1069,304],[1059,303],[1046,292]], [[1134,343],[1141,341],[1158,343],[1153,352],[1147,353],[1140,360],[1130,359],[1130,344]]],
    "neighbors": ["12", "15", "16", "14", "S8"]
  },
  "14": {
    "coords": [[1075,116],[1082,117],[1082,119],[1088,120],[1088,121],[1095,123],[1094,127],[1123,125],[1126,129],[1143,128],[1144,126],[1145,117],[1144,105],[1146,104],[1173,104],[1179,104],[1182,106],[1193,107],[1193,111],[1190,115],[1189,125],[1186,128],[1186,134],[1183,135],[1183,158],[1184,166],[1187,166],[1186,169],[1182,172],[1174,177],[1168,182],[1167,186],[1149,185],[1142,180],[1136,176],[1125,177],[1118,179],[1115,187],[1117,197],[1118,203],[1117,211],[1114,219],[1109,227],[1098,232],[1086,230],[1077,224],[1070,217],[1065,210],[1061,207],[1060,204],[1059,200],[1059,184],[1054,177],[1047,171],[1035,167],[1024,167],[1024,161],[1014,163],[1013,160],[996,159],[993,155],[989,153],[988,141],[990,139],[993,136],[998,135],[999,132],[1019,133],[1025,135],[1042,135],[1047,131],[1053,126],[1058,126],[1059,123],[1062,121],[1065,119],[1069,119],[1069,118]],
    "extensions": [[[914,183],[924,175],[933,165],[932,130],[940,130],[950,143],[963,164],[967,168],[967,184],[954,188],[924,188]], [[830,212],[837,200],[844,199],[848,196],[855,195],[878,192],[881,195],[876,199],[864,206],[851,210],[843,214]]],
    "neighbors": ["13", "15", "S6"]
  },
  "15": {
    "coords": [[1171,63],[1183,63],[1187,67],[1194,67],[1196,69],[1203,70],[1204,72],[1210,73],[1211,75],[1218,76],[1219,78],[1224,78],[1231,82],[1235,85],[1242,86],[1244,87],[1251,88],[1260,92],[1262,94],[1268,94],[1271,97],[1280,98],[1284,100],[1291,99],[1292,102],[1296,105],[1298,105],[1302,108],[1307,113],[1302,116],[1306,121],[1316,125],[1313,127],[1302,127],[1298,129],[1292,130],[1286,134],[1276,141],[1270,148],[1265,154],[1262,163],[1258,173],[1256,178],[1256,185],[1240,185],[1228,185],[1223,181],[1214,178],[1208,174],[1201,169],[1197,164],[1194,161],[1194,150],[1195,139],[1198,138],[1198,131],[1202,128],[1202,117],[1204,116],[1204,100],[1200,97],[1194,94],[1188,90],[1182,89],[1178,86],[1174,80],[1172,78],[1170,77],[1169,64],[1170,63]],
    "neighbors": ["13", "14", "16", "S3"]
  },
  "16": {
    "coords": [[1307,139],[1316,141],[1325,143],[1341,141],[1342,145],[1346,145],[1349,147],[1353,148],[1356,151],[1359,152],[1370,161],[1386,173],[1398,184],[1407,198],[1414,210],[1416,216],[1422,220],[1422,228],[1424,228],[1426,234],[1427,237],[1431,245],[1434,249],[1438,257],[1441,262],[1444,263],[1443,267],[1429,270],[1426,269],[1423,274],[1418,274],[1417,277],[1412,277],[1410,283],[1405,283],[1403,280],[1393,281],[1388,277],[1381,272],[1374,267],[1364,263],[1352,261],[1351,258],[1336,259],[1330,255],[1324,254],[1313,248],[1298,238],[1290,232],[1285,224],[1284,220],[1280,217],[1274,207],[1271,199],[1270,184],[1271,174],[1275,165],[1276,164],[1277,157],[1284,151],[1289,145],[1293,143]],
    "neighbors": ["12", "13", "15", "18", "S3"]
  },
  "17": {
    "coords": [[1338,72],[1342,75],[1358,75],[1386,74],[1392,76],[1395,78],[1402,79],[1407,81],[1411,84],[1417,85],[1420,87],[1425,89],[1427,91],[1439,91],[1450,91],[1451,88],[1459,89],[1460,84],[1465,85],[1466,80],[1475,81],[1475,90],[1475,104],[1471,112],[1472,117],[1467,122],[1461,130],[1458,133],[1459,146],[1459,156],[1465,163],[1471,169],[1479,173],[1486,176],[1496,187],[1498,193],[1500,193],[1501,199],[1504,201],[1504,206],[1507,207],[1507,211],[1510,212],[1511,217],[1513,218],[1513,219],[1517,220],[1517,223],[1519,224],[1520,227],[1518,229],[1513,227],[1509,224],[1504,221],[1497,214],[1487,205],[1479,200],[1472,196],[1466,197],[1460,189],[1457,181],[1455,180],[1455,172],[1451,171],[1452,157],[1448,156],[1448,143],[1445,142],[1445,132],[1441,125],[1436,120],[1431,110],[1425,104],[1417,96],[1409,90],[1397,89],[1398,86],[1387,83],[1379,83],[1376,87],[1371,87],[1369,90],[1362,90],[1359,88],[1354,86],[1353,84],[1347,84],[1347,81],[1338,79],[1336,78]],
    "neighbors": ["S3", "S4"]
  },
  "18": {
    "coords": [[1415,292],[1424,285],[1429,283],[1443,281],[1441,279],[1454,279],[1456,279],[1461,282],[1463,283],[1468,286],[1470,288],[1474,289],[1476,291],[1490,291],[1490,293],[1513,296],[1515,297],[1534,298],[1547,297],[1550,301],[1553,301],[1557,304],[1560,306],[1561,313],[1563,311],[1563,322],[1566,326],[1567,340],[1563,346],[1562,352],[1561,356],[1559,367],[1557,374],[1553,376],[1551,374],[1545,370],[1539,367],[1535,368],[1528,364],[1516,366],[1509,368],[1499,369],[1489,374],[1479,379],[1470,384],[1461,389],[1451,396],[1444,403],[1440,409],[1435,409],[1433,408],[1427,405],[1425,403],[1419,399],[1415,396],[1408,387],[1401,387],[1399,381],[1398,370],[1395,370],[1394,361],[1397,354],[1401,350],[1404,344],[1406,338],[1408,335],[1411,332],[1410,325],[1411,315],[1413,312]],
    "neighbors": ["10", "16", "19", "20", "S4"]
  },
  "19": {
    "coords": [[1445,421],[1450,413],[1458,407],[1469,399],[1475,394],[1486,387],[1496,383],[1505,383],[1504,380],[1526,379],[1539,379],[1541,382],[1548,382],[1548,385],[1553,386],[1556,389],[1559,396],[1561,405],[1564,407],[1566,412],[1568,417],[1571,421],[1573,424],[1573,426],[1573,428],[1570,429],[1569,432],[1569,434],[1566,435],[1565,441],[1564,442],[1564,455],[1567,456],[1571,461],[1575,462],[1579,465],[1582,466],[1584,467],[1587,469],[1585,480],[1595,487],[1614,487],[1639,486],[1641,483],[1641,471],[1637,466],[1635,461],[1633,461],[1632,454],[1639,452],[1641,450],[1645,446],[1652,441],[1655,437],[1661,437],[1663,434],[1669,433],[1670,430],[1690,427],[1688,436],[1687,442],[1683,448],[1681,455],[1680,461],[1677,464],[1677,469],[1674,471],[1674,478],[1671,483],[1672,503],[1673,503],[1676,511],[1678,513],[1679,517],[1682,518],[1682,523],[1675,524],[1673,526],[1662,526],[1661,531],[1653,531],[1649,523],[1644,520],[1639,512],[1633,509],[1625,505],[1616,508],[1609,513],[1602,523],[1592,528],[1590,530],[1572,531],[1569,525],[1569,519],[1570,509],[1568,503],[1559,500],[1553,499],[1547,499],[1547,493],[1547,486],[1543,485],[1544,467],[1545,464],[1542,462],[1538,457],[1535,458],[1531,461],[1524,461],[1524,462],[1516,463],[1516,466],[1509,467],[1507,469],[1492,471],[1490,468],[1486,468],[1482,464],[1472,464],[1472,461],[1464,461],[1461,458],[1452,457],[1453,453],[1445,454],[1442,449],[1438,447],[1437,447],[1439,440],[1439,435],[1439,432],[1442,429]],
    "neighbors": ["10", "18", "20", "22", "S9", "S10"]
  },
  "20": {
    "coords": [[1548,271],[1557,277],[1567,278],[1568,281],[1570,281],[1572,284],[1575,288],[1585,294],[1596,302],[1601,303],[1610,304],[1622,306],[1653,307],[1680,306],[1686,308],[1684,314],[1680,318],[1678,324],[1676,337],[1678,348],[1678,357],[1680,358],[1682,363],[1685,370],[1688,370],[1688,384],[1691,387],[1692,416],[1686,417],[1674,419],[1669,421],[1663,423],[1657,423],[1647,429],[1638,435],[1628,446],[1615,444],[1611,441],[1601,440],[1599,438],[1593,435],[1589,432],[1588,423],[1582,417],[1576,405],[1572,399],[1569,391],[1568,383],[1568,372],[1572,369],[1572,358],[1574,355],[1575,350],[1578,347],[1579,323],[1575,320],[1575,312],[1572,306],[1571,300],[1568,300],[1568,293],[1564,290],[1556,289],[1557,286],[1551,287],[1549,281],[1547,281],[1546,275]],
    "neighbors": ["18", "19", "21", "22", "S4"]
  },
  "21": {
    "coords": [[1704,308],[1698,313],[1696,318],[1692,320],[1689,326],[1690,354],[1693,354],[1693,360],[1695,363],[1698,365],[1698,369],[1704,371],[1707,373],[1714,374],[1711,377],[1730,378],[1732,375],[1740,374],[1741,372],[1743,371],[1745,370],[1747,369],[1750,369],[1756,372],[1758,377],[1758,387],[1760,396],[1765,404],[1774,415],[1784,422],[1800,432],[1814,437],[1823,439],[1824,441],[1832,443],[1844,445],[1855,442],[1862,441],[1864,438],[1870,437],[1876,431],[1882,429],[1888,422],[1892,418],[1894,411],[1895,406],[1901,399],[1907,393],[1906,385],[1909,382],[1910,374],[1914,368],[1913,357],[1910,356],[1909,350],[1905,344],[1898,335],[1891,329],[1880,328],[1871,325],[1869,322],[1855,322],[1844,323],[1832,322],[1825,318],[1821,316],[1813,315],[1810,310],[1812,304],[1816,302],[1819,299],[1836,298],[1839,296],[1859,295],[1860,292],[1857,288],[1847,287],[1834,287],[1831,286],[1821,285],[1815,287],[1799,288],[1797,292],[1787,291],[1779,291],[1776,294],[1759,294],[1759,297],[1749,297],[1743,300],[1733,300],[1734,302],[1728,303],[1722,303],[1717,305],[1705,306]],
    "neighbors": ["20", "22", "23", "24", "25", "S4", "S5"]
  },
  "22": {
    "coords": [[1703,387],[1710,389],[1735,389],[1740,385],[1745,383],[1747,388],[1748,395],[1754,403],[1763,419],[1782,433],[1804,446],[1812,449],[1821,449],[1824,452],[1833,453],[1842,456],[1847,457],[1846,461],[1843,463],[1843,469],[1840,470],[1839,475],[1837,477],[1834,485],[1834,491],[1835,506],[1819,508],[1812,511],[1802,515],[1795,520],[1785,529],[1779,532],[1777,541],[1773,549],[1773,555],[1767,557],[1763,559],[1759,559],[1756,562],[1753,561],[1750,565],[1741,565],[1736,570],[1728,568],[1725,566],[1721,560],[1725,557],[1732,556],[1735,554],[1738,551],[1744,547],[1749,541],[1753,535],[1752,529],[1748,526],[1741,525],[1736,522],[1715,523],[1701,523],[1698,521],[1695,519],[1689,509],[1685,502],[1683,491],[1685,485],[1688,479],[1690,474],[1691,467],[1695,464],[1694,455],[1696,453],[1699,450],[1700,437],[1702,435],[1702,422],[1706,413],[1705,405]],
    "neighbors": ["19", "20", "21", "23", "40", "S10", "S11"]
  },
  "23": {
    "coords": [[1889,439],[1899,436],[1909,433],[1921,433],[1931,434],[1937,436],[1945,437],[1947,443],[1951,444],[1956,451],[1959,455],[1960,461],[1956,467],[1954,476],[1955,485],[1961,490],[1977,492],[1986,491],[2008,489],[2009,491],[2010,495],[2005,498],[2002,502],[1994,504],[1989,506],[1977,507],[1973,511],[1955,511],[1951,508],[1941,508],[1935,510],[1917,513],[1907,518],[1902,519],[1892,523],[1880,528],[1871,530],[1871,533],[1864,534],[1859,538],[1853,545],[1849,552],[1845,559],[1845,562],[1842,565],[1841,570],[1839,574],[1831,577],[1822,576],[1821,575],[1812,574],[1809,571],[1803,568],[1799,566],[1794,564],[1795,559],[1797,558],[1800,552],[1807,544],[1815,539],[1822,534],[1829,530],[1834,526],[1843,518],[1847,512],[1848,504],[1844,502],[1844,493],[1847,491],[1848,481],[1851,473],[1853,472],[1855,465],[1863,458],[1867,453],[1873,447],[1881,442]],
    "neighbors": ["22", "21", "29", "S11", "S12"]
  },
  "24": {
    "coords": [[1988,344],[1992,341],[2023,341],[2032,341],[2035,344],[2045,348],[2060,356],[2078,363],[2084,367],[2095,368],[2105,372],[2122,367],[2127,368],[2128,365],[2137,363],[2143,360],[2144,357],[2148,356],[2149,360],[2147,365],[2145,371],[2143,380],[2142,380],[2141,391],[2118,391],[2114,395],[2106,397],[2095,402],[2086,408],[2081,414],[2081,427],[2084,435],[2084,449],[2079,454],[2075,462],[2078,470],[2081,475],[2085,478],[2091,483],[2090,484],[2083,483],[2073,480],[2068,479],[2064,476],[2056,476],[2055,473],[2049,473],[2035,470],[2030,467],[2025,467],[2022,464],[2013,462],[2003,461],[2002,458],[1995,458],[1993,455],[1984,455],[1984,448],[1985,447],[2005,445],[2007,442],[2055,443],[2061,439],[2065,435],[2066,429],[2061,426],[2052,420],[2042,413],[2033,408],[2025,402],[2024,400],[2006,401],[2002,397],[1995,394],[1982,395],[1969,402],[1962,411],[1958,420],[1957,430],[1951,429],[1943,424],[1933,423],[1927,419],[1909,418],[1909,413],[1912,405],[1920,396],[1927,390],[1931,383],[1937,374],[1944,364],[1955,356],[1966,350],[1984,346],[1991,344],[1992,342]],
    "neighbors": ["23", "21", "25", "27", "S12"]
  },
  "25": {
    "coords": [[1896,319],[1908,328],[1916,338],[1921,349],[1924,355],[1924,370],[1930,363],[1940,352],[1958,342],[1974,335],[1984,332],[1988,331],[1997,330],[2002,327],[2024,327],[2027,330],[2037,331],[2042,334],[2053,338],[2064,346],[2076,351],[2084,354],[2089,356],[2123,354],[2130,353],[2146,344],[2156,335],[2158,333],[2158,305],[2155,296],[2143,282],[2129,269],[2118,258],[2110,248],[2107,239],[2105,232],[2102,230],[2102,224],[2106,219],[2103,218],[2090,223],[2063,237],[2053,243],[2040,247],[2015,260],[1990,273],[1951,290],[1921,303],[1909,309],[1899,313]],
    "extensions": [[[1895,277],[1890,273],[1902,261],[1956,234],[1980,217],[1993,206],[2015,202],[2035,191],[2070,181],[2077,174],[2109,171],[2111,173],[2106,178],[2078,192],[2060,200],[2027,206],[2025,209],[2013,210],[1989,226],[1955,245],[1906,274]]],
    "neighbors": ["21", "24", "26", "S5"] //"27"
  },
  "26": {
    "coords": [[2372,11],[2372,4],[2375,3],[2377,0],[2400,1],[2400,60],[2395,67],[2379,72],[2368,79],[2364,81],[2349,95],[2327,115],[2323,118],[2320,122],[2312,123],[2301,133],[2294,148],[2292,160],[2289,168],[2289,175],[2283,189],[2277,201],[2277,208],[2261,214],[2250,226],[2242,244],[2238,248],[2233,264],[2221,268],[2200,276],[2188,286],[2179,301],[2175,310],[2176,320],[2169,324],[2167,316],[2170,314],[2173,304],[2167,294],[2157,278],[2140,262],[2130,253],[2120,243],[2117,225],[2121,219],[2121,209],[2126,206],[2148,195],[2169,184],[2197,167],[2217,154],[2232,141],[2235,137],[2234,133],[2241,128],[2240,117],[2234,114],[2227,112],[2213,121],[2202,127],[2190,135],[2175,149],[2170,151],[2168,153],[2163,153],[2161,151],[2162,145],[2167,146],[2170,142],[2179,133],[2189,122],[2217,98],[2246,80],[2280,52],[2303,26],[2323,0],[2340,0],[2334,9],[2312,30],[2288,52],[2285,52],[2271,66],[2257,84],[2249,94],[2247,111],[2258,119],[2268,117],[2272,108],[2305,83],[2326,62],[2347,36],[2359,22]],
    "neighbors": ["25", "27", "28", "S5"]
  },
  "27": {
    "coords": [[2206,287],[2218,284],[2220,280],[2227,280],[2236,277],[2240,273],[2248,266],[2247,261],[2251,250],[2257,240],[2265,229],[2273,222],[2290,219],[2300,222],[2312,236],[2318,254],[2319,269],[2311,285],[2299,305],[2289,327],[2280,349],[2279,376],[2279,384],[2273,393],[2264,404],[2247,414],[2233,418],[2212,421],[2205,416],[2197,416],[2197,412],[2186,411],[2176,406],[2164,402],[2155,396],[2153,394],[2153,384],[2154,383],[2157,371],[2160,361],[2165,347],[2174,335],[2182,328],[2186,317],[2191,303]],
    "neighbors": ["24", "25", "26", "28", "29", "30"]
  },
  "28": {
    "coords": [[2400,85],[2400,329],[2393,333],[2385,342],[2374,356],[2366,363],[2353,366],[2339,366],[2329,371],[2320,379],[2308,389],[2298,391],[2295,390],[2293,385],[2292,375],[2291,358],[2294,352],[2294,341],[2297,336],[2300,331],[2310,313],[2323,290],[2329,278],[2333,266],[2333,251],[2325,235],[2312,218],[2299,210],[2290,208],[2289,202],[2293,195],[2300,182],[2301,171],[2304,164],[2305,151],[2307,147],[2311,139],[2319,139],[2324,133],[2341,121],[2361,106],[2381,92]],
    "neighbors": ["26", "27", "30"]
  },
  "29": {
    "coords": [[2148,405],[2158,411],[2164,412],[2164,414],[2169,417],[2177,419],[2175,421],[2182,421],[2187,424],[2193,425],[2196,427],[2205,428],[2211,431],[2238,429],[2238,427],[2247,427],[2250,424],[2253,424],[2255,427],[2263,426],[2272,431],[2285,444],[2289,450],[2293,458],[2299,469],[2303,471],[2305,494],[2303,494],[2303,502],[2299,503],[2293,509],[2287,518],[2280,528],[2273,539],[2253,540],[2247,537],[2239,537],[2235,535],[2221,536],[2219,534],[2207,533],[2202,531],[2194,531],[2193,526],[2188,526],[2183,522],[2177,520],[2173,518],[2170,508],[2167,500],[2162,498],[2151,491],[2142,486],[2133,476],[2127,465],[2126,451],[2128,447],[2130,441],[2131,434],[2135,426],[2141,418],[2142,415],[2142,406]],
    "neighbors": ["27", "30", "31", "S12"]
  },
  "30": {
    "coords": [[2400,345],[2400,548],[2388,549],[2375,546],[2375,542],[2367,543],[2360,536],[2349,524],[2339,510],[2333,502],[2327,494],[2323,489],[2316,490],[2314,476],[2313,469],[2310,465],[2309,457],[2301,447],[2290,433],[2277,422],[2269,419],[2269,414],[2279,406],[2282,400],[2286,397],[2291,401],[2300,404],[2309,401],[2320,393],[2332,384],[2343,377],[2350,375],[2352,385],[2355,392],[2361,391],[2364,382],[2362,379],[2367,375],[2375,369],[2385,360],[2386,357]],
    "neighbors": ["27", "28", "29", "31"]
  },
  "31": {
    "coords": [[2400,701],[2400,565],[2392,563],[2380,560],[2373,557],[2366,555],[2361,551],[2353,544],[2344,533],[2333,520],[2325,509],[2322,506],[2319,501],[2315,501],[2314,505],[2308,511],[2298,521],[2294,527],[2286,538],[2284,545],[2273,551],[2265,552],[2255,551],[2254,553],[2256,555],[2258,566],[2260,581],[2268,585],[2279,585],[2288,587],[2299,589],[2308,599],[2313,609],[2313,624],[2311,626],[2309,634],[2303,638],[2299,645],[2305,648],[2313,656],[2323,669],[2328,682],[2330,687],[2329,716],[2326,717],[2327,724],[2331,722],[2337,717],[2349,713],[2361,707],[2368,707],[2369,703],[2379,704],[2385,702]],
    "neighbors": ["29", "30", "32", "33", "S12"]
  },
  "32": {
    "coords": [[2159,704],[2168,695],[2179,689],[2189,687],[2207,679],[2233,673],[2234,671],[2245,671],[2255,666],[2265,663],[2272,660],[2279,657],[2287,654],[2299,657],[2307,664],[2313,677],[2317,685],[2319,696],[2317,712],[2312,730],[2308,732],[2301,743],[2289,753],[2274,759],[2267,763],[2253,772],[2243,778],[2235,786],[2234,779],[2233,769],[2230,757],[2225,743],[2210,725],[2192,711],[2179,708],[2165,708],[2159,707]],
    "neighbors": ["31", "33", "35", "S12", "S13"]
  },
  "33": {
    "coords": [[2400,714],[2400,859],[2382,859],[2361,859],[2349,860],[2335,864],[2325,868],[2307,874],[2283,887],[2262,904],[2255,911],[2249,919],[2247,917],[2246,908],[2237,903],[2229,896],[2211,887],[2194,879],[2189,879],[2185,875],[2178,873],[2179,869],[2189,858],[2196,851],[2213,827],[2217,819],[2227,808],[2241,794],[2250,788],[2252,784],[2277,771],[2298,761],[2306,754],[2312,746],[2328,737],[2347,726],[2367,719],[2381,715],[2391,713]],
    "neighbors": ["31", "32", "34", "35", "36"]
  },
  "34": {
    "coords": [[2400,874],[2400,984],[2393,989],[2379,994],[2371,997],[2369,999],[2361,1000],[2359,1001],[2351,1003],[2345,1006],[2316,1006],[2312,1003],[2305,1004],[2301,1000],[2295,998],[2285,988],[2280,984],[2274,969],[2272,958],[2266,948],[2257,928],[2255,923],[2262,923],[2269,912],[2282,901],[2300,890],[2313,884],[2331,876],[2346,874],[2350,870],[2393,870]],
    "neighbors": ["33", "36", "45", "46"]
  },
  "35": {
    "coords": [[2035,802],[2048,813],[2058,828],[2079,847],[2093,860],[2108,867],[2132,865],[2134,870],[2146,869],[2157,865],[2167,863],[2178,855],[2189,839],[2202,818],[2216,801],[2217,790],[2220,788],[2221,766],[2220,760],[2216,755],[2214,750],[2211,742],[2202,735],[2192,726],[2183,721],[2166,719],[2152,722],[2142,727],[2130,737],[2116,761],[2105,774],[2091,784],[2084,790],[2073,795],[2066,798],[2055,798],[2050,800]],
    "neighbors": ["32", "33", "36", "37", "S13"]
  },
  "36": {
    "coords": [[2089,872],[2100,878],[2107,876],[2106,881],[2133,881],[2156,881],[2163,884],[2171,884],[2186,888],[2189,890],[2203,896],[2212,899],[2226,908],[2233,919],[2230,928],[2226,936],[2220,943],[2209,954],[2191,964],[2171,973],[2151,976],[2149,980],[2123,983],[2035,984],[2035,980],[2041,978],[2049,972],[2059,965],[2075,944],[2084,919],[2088,908],[2089,893],[2087,872]],
    "neighbors": ["33", "34", "35", "37", "45"]
  },
  "37": {
    "coords": [[1923,746],[1931,743],[1947,743],[1950,751],[1963,762],[1976,777],[1982,780],[1984,787],[2001,795],[2019,806],[2039,823],[2046,835],[2061,849],[2071,859],[2074,865],[2075,874],[2077,892],[2074,899],[2074,917],[2071,919],[2070,928],[2068,929],[2064,940],[2058,948],[2047,958],[2030,971],[2019,976],[2012,978],[2011,982],[1997,982],[1994,984],[1967,985],[1959,979],[1954,981],[1948,977],[1935,974],[1927,969],[1916,960],[1909,953],[1904,943],[1903,933],[1901,927],[1899,878],[1892,867],[1885,861],[1882,859],[1884,850],[1886,849],[1887,843],[1887,838],[1889,831],[1893,829],[1895,808],[1897,795],[1898,785],[1901,783],[1903,763],[1907,757],[1911,750],[1918,745]],
    "neighbors": ["35", "36", "38", "43", "44", "S13"]
  },
  "38": {
    "coords": [[1792,683],[1816,684],[1821,681],[1828,679],[1838,676],[1847,671],[1855,668],[1878,668],[1882,671],[1892,671],[1896,675],[1899,675],[1902,678],[1907,682],[1915,692],[1918,699],[1920,706],[1922,709],[1929,722],[1932,727],[1932,730],[1921,730],[1909,736],[1900,746],[1893,759],[1889,774],[1885,788],[1886,799],[1882,799],[1884,816],[1880,819],[1879,829],[1875,844],[1870,856],[1867,855],[1858,865],[1852,863],[1851,867],[1842,866],[1838,869],[1826,874],[1815,872],[1809,870],[1801,869],[1797,866],[1788,861],[1782,856],[1780,847],[1778,846],[1778,833],[1781,827],[1782,811],[1785,811],[1784,798],[1782,789],[1778,779],[1772,769],[1765,765],[1770,757],[1778,745],[1780,740],[1782,731],[1783,729],[1786,725],[1787,723],[1787,710],[1790,709],[1790,694],[1791,685]],
    "neighbors": ["37", "39", "42", "43", "S13"]
  },
  "39": {
    "coords": [[1703,625],[1712,615],[1717,611],[1720,611],[1725,607],[1730,605],[1735,607],[1749,605],[1762,604],[1759,600],[1769,601],[1774,597],[1782,599],[1789,602],[1802,608],[1804,619],[1802,623],[1802,630],[1796,636],[1794,646],[1790,653],[1787,658],[1783,667],[1782,677],[1779,681],[1780,701],[1776,704],[1777,720],[1774,722],[1772,729],[1770,733],[1766,742],[1764,749],[1755,757],[1749,764],[1739,768],[1731,771],[1714,771],[1706,767],[1697,769],[1696,765],[1689,764],[1682,757],[1676,748],[1673,744],[1672,737],[1670,736],[1671,725],[1667,726],[1666,698],[1667,685],[1670,680],[1672,669],[1676,661],[1683,650],[1693,634]],
    "neighbors": ["38", "40", "41", "42", "S11"]
  },
  "40": {
    "coords": [[1713,597],[1697,613],[1681,631],[1668,650],[1662,664],[1658,671],[1659,679],[1649,679],[1642,690],[1635,692],[1629,692],[1623,685],[1623,656],[1623,628],[1625,627],[1627,608],[1631,602],[1625,594],[1625,585],[1627,586],[1631,581],[1633,576],[1658,577],[1660,578],[1667,578],[1673,574],[1682,565],[1687,557],[1696,557],[1700,559],[1707,560],[1711,571],[1715,573],[1715,576],[1712,580],[1711,583],[1709,585],[1710,592]],
    "neighbors": ["22", "39", "41", "S10", "S11"]
  },
  "41": {
    "coords": [[1570,692],[1590,694],[1591,690],[1597,691],[1599,686],[1603,687],[1605,684],[1606,683],[1609,681],[1612,687],[1622,698],[1630,704],[1642,704],[1647,698],[1653,693],[1656,694],[1651,702],[1656,715],[1657,727],[1660,736],[1655,742],[1656,763],[1653,770],[1653,777],[1649,783],[1640,795],[1631,804],[1620,812],[1614,813],[1613,815],[1606,814],[1604,819],[1580,822],[1565,819],[1551,819],[1546,816],[1521,816],[1523,812],[1526,807],[1530,804],[1534,794],[1539,788],[1539,783],[1543,781],[1547,774],[1560,754],[1562,753],[1563,735],[1566,728],[1573,724],[1571,713],[1569,711],[1567,703],[1565,700],[1565,696]],
    "neighbors": ["39", "40", "42", "55", "S10"]
  },
  "42": {
    "coords": [[1669,761],[1686,774],[1694,777],[1699,780],[1713,782],[1739,781],[1741,779],[1747,779],[1757,773],[1760,773],[1764,776],[1767,778],[1767,784],[1769,789],[1770,818],[1766,821],[1768,855],[1767,868],[1764,870],[1763,875],[1761,876],[1757,883],[1755,889],[1747,896],[1739,906],[1729,912],[1721,917],[1700,926],[1689,928],[1684,929],[1673,930],[1670,933],[1639,936],[1636,932],[1623,933],[1619,931],[1615,928],[1606,922],[1601,910],[1598,902],[1597,894],[1595,890],[1594,871],[1598,869],[1597,863],[1599,856],[1605,845],[1616,833],[1627,824],[1635,816],[1645,807],[1652,800],[1658,790],[1661,784],[1660,779],[1663,778],[1664,770],[1667,770],[1667,764]],
    "neighbors": ["38", "39", "41", "43", "54", "55"]
  },
  "43": {
    "coords": [[1780,869],[1789,875],[1793,876],[1799,878],[1801,880],[1809,880],[1817,884],[1831,884],[1835,879],[1841,880],[1846,878],[1853,876],[1855,875],[1863,874],[1867,871],[1871,870],[1871,869],[1876,868],[1881,872],[1882,873],[1887,881],[1887,894],[1887,906],[1888,915],[1889,929],[1891,939],[1894,943],[1894,949],[1901,959],[1911,970],[1916,974],[1916,989],[1919,991],[1918,1001],[1923,1004],[1925,1019],[1927,1036],[1926,1038],[1925,1047],[1923,1048],[1919,1045],[1910,1037],[1903,1033],[1901,1032],[1895,1030],[1881,1028],[1866,1027],[1861,1031],[1853,1031],[1848,1034],[1842,1035],[1840,1037],[1831,1038],[1833,1041],[1795,1042],[1790,1039],[1785,1037],[1786,1034],[1779,1035],[1777,1030],[1774,1025],[1769,1012],[1761,999],[1749,988],[1736,978],[1724,969],[1717,962],[1715,956],[1713,934],[1719,931],[1729,925],[1742,917],[1753,909],[1760,897],[1768,888],[1775,875],[1775,871]],
    "neighbors": ["37", "38", "42", "52", "53", "54"]
  },
  "44": {
    "coords": [[1983,995],[2039,994],[2040,1001],[2044,1003],[2044,1009],[2045,1011],[2047,1019],[2049,1021],[2049,1028],[2046,1036],[2046,1040],[2044,1040],[2041,1046],[2039,1047],[2035,1062],[2037,1089],[2037,1101],[2039,1102],[2042,1116],[2058,1137],[2077,1152],[2085,1155],[2085,1160],[2081,1163],[2075,1170],[2071,1176],[2065,1186],[2065,1193],[2060,1199],[2055,1205],[2052,1215],[2052,1228],[2054,1237],[2048,1241],[2038,1240],[2034,1242],[2012,1245],[1992,1248],[1982,1245],[1972,1244],[1972,1241],[1965,1241],[1962,1238],[1958,1237],[1956,1218],[1956,1196],[1959,1194],[1959,1182],[1962,1180],[1963,1169],[1966,1166],[1967,1158],[1968,1157],[1972,1140],[1975,1133],[1981,1114],[1990,1091],[1993,1076],[1996,1055],[1997,1031],[1994,1027],[1992,1017],[1988,1008],[1985,1006],[1984,999],[1981,997]],
    "neighbors": ["37", "45", "47", "49", "50"]
  },
  "45": {
    "coords": [[2053,995],[2139,994],[2144,991],[2157,991],[2158,988],[2177,986],[2191,977],[2214,964],[2236,943],[2239,932],[2251,943],[2262,972],[2270,992],[2270,1021],[2262,1035],[2253,1055],[2249,1066],[2243,1079],[2242,1085],[2239,1087],[2238,1101],[2231,1103],[2226,1110],[2212,1111],[2196,1117],[2183,1125],[2170,1139],[2161,1147],[2141,1154],[2115,1155],[2110,1153],[2103,1153],[2098,1150],[2090,1147],[2080,1139],[2063,1125],[2052,1111],[2051,1105],[2050,1097],[2047,1096],[2047,1063],[2051,1060],[2052,1045],[2057,1043],[2057,1037],[2060,1035],[2060,1015],[2057,1013],[2055,1003],[2050,997]],
    "neighbors": ["34", "36", "37", "44", "46", "47"]
  },
  "46": {
    "coords": [[2400,1000],[2400,1202],[2393,1200],[2387,1196],[2377,1196],[2376,1192],[2363,1192],[2359,1190],[2344,1190],[2332,1186],[2317,1183],[2299,1175],[2278,1163],[2269,1151],[2259,1138],[2254,1131],[2251,1119],[2249,1093],[2253,1093],[2254,1083],[2259,1074],[2264,1062],[2276,1036],[2283,1021],[2281,1004],[2289,1006],[2301,1012],[2302,1013],[2307,1013],[2311,1017],[2352,1017],[2356,1014],[2362,1013],[2364,1011],[2372,1009],[2380,1007],[2387,1003],[2394,1000]],
    "neighbors": ["34", "45", "47", "48"]
  },
  "47": {
    "coords": [[2099,1163],[2111,1168],[2141,1166],[2152,1163],[2166,1156],[2176,1150],[2187,1138],[2192,1133],[2211,1126],[2222,1121],[2232,1118],[2239,1114],[2240,1124],[2241,1131],[2248,1141],[2257,1157],[2269,1170],[2286,1183],[2286,1188],[2289,1192],[2297,1197],[2305,1202],[2309,1205],[2310,1215],[2306,1218],[2300,1222],[2294,1224],[2275,1224],[2270,1221],[2255,1222],[2239,1223],[2227,1221],[2226,1223],[2219,1225],[2215,1229],[2211,1231],[2203,1239],[2199,1247],[2198,1255],[2196,1267],[2194,1271],[2194,1286],[2191,1288],[2189,1298],[2185,1305],[2179,1311],[2172,1309],[2168,1307],[2165,1299],[2163,1288],[2156,1265],[2157,1253],[2153,1250],[2153,1241],[2149,1239],[2149,1230],[2139,1214],[2126,1195],[2117,1191],[2107,1183],[2099,1182],[2092,1180],[2084,1183],[2083,1179],[2088,1170],[2093,1166],[2093,1162]],
    "neighbors": ["44", "45", "46", "48", "49"]
  },
  "48": {
    "coords": [[2400,1218],[2400,1297],[2388,1302],[2377,1305],[2365,1311],[2347,1322],[2338,1331],[2328,1339],[2328,1342],[2320,1350],[2317,1357],[2311,1364],[2304,1378],[2299,1385],[2297,1391],[2292,1402],[2287,1414],[2280,1427],[2275,1437],[2270,1446],[2264,1454],[2264,1462],[2253,1463],[2232,1463],[2216,1465],[2204,1467],[2197,1465],[2186,1458],[2179,1447],[2177,1436],[2178,1416],[2179,1415],[2183,1405],[2193,1394],[2207,1380],[2215,1375],[2212,1370],[2214,1370],[2219,1359],[2227,1344],[2232,1333],[2235,1328],[2238,1313],[2241,1293],[2246,1272],[2243,1271],[2242,1263],[2237,1260],[2238,1253],[2235,1247],[2229,1238],[2234,1234],[2242,1231],[2261,1235],[2301,1235],[2315,1228],[2321,1220],[2324,1213],[2322,1206],[2317,1195],[2342,1198],[2361,1202],[2378,1207],[2391,1211]],
    "neighbors": ["46", "47", "49", "65", "66", "67"]
  },
  "49": {
    "coords": [[2083,1300],[2076,1278],[2068,1257],[2064,1244],[2064,1234],[2063,1213],[2070,1203],[2080,1196],[2096,1194],[2110,1200],[2126,1213],[2136,1233],[2142,1255],[2143,1266],[2144,1279],[2148,1284],[2151,1296],[2162,1317],[2173,1323],[2190,1318],[2199,1308],[2206,1297],[2206,1291],[2210,1275],[2209,1257],[2214,1247],[2216,1245],[2221,1246],[2226,1258],[2228,1268],[2230,1293],[2228,1300],[2226,1310],[2224,1314],[2220,1332],[2214,1344],[2205,1358],[2199,1370],[2191,1379],[2178,1392],[2168,1407],[2167,1416],[2164,1425],[2158,1432],[2148,1436],[2140,1439],[2127,1440],[2112,1440],[2104,1438],[2090,1433],[2075,1424],[2067,1416],[2060,1400],[2059,1370],[2068,1358],[2073,1347],[2080,1338],[2081,1328],[2083,1312]],
    "neighbors": ["44", "47", "48", "50", "65"]
  },
  "50": {
    "coords": [[1878,1294],[1884,1290],[1891,1285],[1898,1280],[1907,1275],[1918,1265],[1928,1254],[1935,1243],[1938,1239],[1945,1242],[1954,1246],[1961,1250],[1971,1251],[1970,1254],[1982,1255],[1988,1257],[2026,1255],[2043,1253],[2047,1251],[2058,1249],[2055,1254],[2054,1257],[2061,1271],[2067,1289],[2070,1306],[2071,1317],[2068,1324],[2066,1336],[2061,1345],[2060,1351],[2056,1353],[2049,1363],[2046,1365],[2040,1364],[2036,1361],[2028,1356],[2017,1347],[1997,1335],[1986,1333],[1980,1325],[1973,1323],[1963,1322],[1946,1323],[1942,1326],[1932,1327],[1929,1329],[1905,1330],[1900,1327],[1893,1325],[1888,1322],[1882,1316],[1879,1310],[1877,1307],[1876,1297]],
    "neighbors": ["44", "49", "51", "63", "64", "65"]
  },
  "51": {
    "coords": [[1639,1170],[1648,1171],[1659,1173],[1661,1175],[1670,1176],[1673,1178],[1709,1179],[1715,1176],[1725,1176],[1728,1174],[1734,1172],[1737,1170],[1742,1174],[1784,1175],[1798,1177],[1823,1178],[1847,1178],[1852,1181],[1859,1182],[1862,1183],[1870,1187],[1878,1189],[1891,1198],[1900,1204],[1908,1216],[1917,1216],[1918,1222],[1924,1227],[1926,1238],[1920,1241],[1922,1246],[1912,1254],[1912,1259],[1897,1268],[1882,1279],[1858,1292],[1830,1307],[1812,1315],[1808,1317],[1791,1319],[1778,1312],[1768,1308],[1755,1296],[1744,1284],[1740,1285],[1736,1276],[1723,1262],[1706,1254],[1688,1255],[1678,1262],[1674,1257],[1653,1257],[1645,1256],[1641,1252],[1634,1252],[1621,1245],[1612,1238],[1610,1234],[1606,1224],[1605,1200],[1611,1195],[1614,1187],[1626,1176]],
    "neighbors": ["50", "52", "53", "61", "62", "63"]
  },
  "52": {
    "coords": [[1897,1187],[1898,1177],[1895,1171],[1893,1124],[1897,1121],[1897,1112],[1899,1110],[1902,1105],[1905,1100],[1912,1088],[1918,1073],[1919,1063],[1917,1062],[1913,1053],[1903,1045],[1889,1039],[1867,1039],[1860,1042],[1852,1042],[1849,1046],[1845,1048],[1835,1050],[1831,1051],[1821,1052],[1819,1055],[1803,1055],[1800,1053],[1793,1051],[1787,1051],[1787,1049],[1782,1048],[1782,1057],[1777,1068],[1775,1079],[1768,1088],[1767,1095],[1764,1124],[1762,1139],[1759,1148],[1756,1152],[1748,1160],[1749,1161],[1774,1163],[1823,1163],[1841,1168],[1849,1167],[1866,1173]],
    "neighbors": ["43", "51", "53"]
  },
  "53": {
    "coords": [[1575,1090],[1597,1064],[1599,1059],[1605,1061],[1664,1061],[1679,1057],[1698,1050],[1717,1035],[1737,1015],[1743,999],[1747,997],[1752,1007],[1759,1015],[1763,1029],[1768,1033],[1768,1045],[1771,1059],[1766,1062],[1767,1069],[1760,1079],[1752,1091],[1754,1105],[1752,1126],[1749,1137],[1747,1146],[1735,1155],[1718,1165],[1681,1167],[1654,1161],[1635,1157],[1620,1145],[1609,1132],[1599,1113],[1588,1099],[1582,1093]],
    "neighbors": ["43", "51", "52", "54", "56", "61"]
  },
  "54": {
    "coords": [[1609,938],[1631,946],[1658,948],[1665,942],[1679,943],[1685,939],[1692,940],[1694,939],[1699,936],[1702,946],[1704,960],[1716,976],[1732,990],[1729,1000],[1728,1010],[1719,1017],[1707,1029],[1694,1039],[1685,1041],[1677,1044],[1662,1047],[1653,1048],[1605,1050],[1601,1047],[1604,1038],[1604,1020],[1601,1017],[1599,1005],[1595,995],[1587,983],[1593,975],[1600,967],[1605,952],[1607,948],[1607,938]],
    "neighbors": ["42", "43", "53", "55", "56"]
  },
  "55": {
    "coords": [[1400,923],[1404,921],[1405,910],[1400,910],[1399,895],[1410,887],[1419,887],[1425,881],[1435,881],[1441,884],[1448,887],[1462,886],[1472,883],[1487,865],[1502,849],[1514,827],[1534,826],[1553,828],[1567,829],[1567,832],[1593,832],[1598,831],[1599,833],[1595,841],[1584,861],[1582,884],[1584,896],[1588,910],[1596,924],[1596,944],[1590,960],[1582,971],[1569,980],[1557,987],[1532,991],[1505,1003],[1479,1012],[1465,1016],[1453,1013],[1439,1003],[1432,988],[1432,965],[1426,958],[1418,957],[1418,947],[1409,933]],
    "neighbors": ["41", "42", "54", "56", "57", "S19"]
  },
  "56": {
    "coords": [[1417,970],[1423,996],[1433,1012],[1455,1028],[1477,1025],[1504,1016],[1528,1004],[1550,1001],[1551,997],[1562,996],[1570,992],[1578,991],[1584,1001],[1590,1010],[1592,1027],[1593,1045],[1590,1048],[1588,1055],[1585,1062],[1574,1072],[1557,1090],[1545,1093],[1532,1100],[1518,1117],[1508,1129],[1499,1144],[1488,1158],[1476,1170],[1459,1177],[1443,1176],[1439,1174],[1426,1170],[1407,1155],[1400,1148],[1392,1131],[1392,1120],[1389,1118],[1388,1067],[1392,1054],[1395,1040],[1398,1023],[1408,1001],[1414,990]],
    "neighbors": ["53", "54", "55", "57", "58", "59", "61"]
  },
  "57": {
    "coords": [[1118,935],[1128,923],[1134,922],[1136,915],[1144,905],[1157,895],[1160,892],[1182,892],[1184,894],[1193,897],[1192,900],[1200,900],[1205,906],[1210,908],[1228,922],[1245,922],[1248,918],[1251,917],[1261,916],[1261,912],[1290,912],[1294,914],[1311,918],[1338,926],[1348,930],[1386,930],[1393,935],[1404,949],[1405,975],[1401,980],[1402,986],[1399,987],[1397,996],[1378,996],[1364,1001],[1349,1013],[1332,1029],[1320,1035],[1310,1037],[1307,1041],[1287,1041],[1278,1036],[1241,1037],[1239,1040],[1229,1041],[1216,1046],[1192,1058],[1187,1066],[1184,1029],[1180,1020],[1176,1018],[1175,999],[1171,994],[1171,981],[1166,975],[1157,971],[1145,970],[1141,968],[1136,968],[1134,964],[1125,964],[1119,961],[1115,958],[1115,943]],
    "neighbors": ["55", "56", "58", "S19", "S24"]
  },
  "58": {
    "coords": [[1186,1079],[1196,1071],[1208,1064],[1216,1059],[1223,1057],[1233,1053],[1246,1049],[1267,1048],[1285,1052],[1313,1052],[1315,1049],[1323,1047],[1337,1039],[1346,1033],[1362,1017],[1378,1007],[1393,1008],[1388,1016],[1385,1025],[1382,1027],[1381,1040],[1378,1051],[1375,1069],[1373,1074],[1373,1108],[1376,1110],[1376,1123],[1367,1123],[1358,1130],[1351,1140],[1343,1154],[1337,1168],[1335,1169],[1333,1176],[1330,1185],[1325,1192],[1306,1194],[1297,1185],[1289,1176],[1286,1171],[1284,1166],[1281,1164],[1278,1149],[1272,1140],[1264,1141],[1265,1136],[1268,1134],[1266,1127],[1255,1126],[1228,1125],[1218,1123],[1212,1121],[1201,1119],[1201,1117],[1194,1116],[1193,1114],[1188,1112],[1186,1110],[1185,1107],[1184,1089]],
    "neighbors": ["56", "57", "59", "60", "S24", "S25"]
  },
  "59": {
    "coords": [[1330,1203],[1334,1200],[1339,1196],[1339,1192],[1343,1184],[1344,1179],[1347,1176],[1346,1172],[1350,1169],[1350,1162],[1356,1156],[1359,1147],[1367,1138],[1375,1134],[1382,1134],[1385,1144],[1392,1158],[1407,1172],[1438,1187],[1452,1189],[1468,1187],[1469,1194],[1476,1196],[1491,1201],[1503,1206],[1509,1214],[1511,1221],[1510,1233],[1507,1235],[1505,1242],[1497,1248],[1490,1254],[1481,1258],[1471,1260],[1468,1261],[1451,1262],[1443,1259],[1432,1260],[1428,1254],[1417,1255],[1409,1251],[1406,1249],[1397,1239],[1381,1230],[1359,1220],[1348,1215],[1335,1211],[1334,1211],[1328,1207],[1328,1203]],
    "neighbors": ["56", "58", "60", "61"]
  },
  "60": {
    "coords": [[1280,1184],[1295,1200],[1315,1211],[1332,1220],[1359,1231],[1387,1246],[1403,1262],[1407,1271],[1409,1288],[1405,1291],[1405,1303],[1397,1311],[1393,1317],[1385,1339],[1382,1344],[1381,1352],[1380,1353],[1377,1362],[1371,1377],[1370,1393],[1353,1393],[1354,1396],[1337,1396],[1326,1381],[1314,1367],[1299,1368],[1290,1373],[1285,1378],[1284,1378],[1284,1371],[1287,1368],[1286,1359],[1290,1357],[1290,1344],[1293,1337],[1293,1289],[1291,1289],[1289,1271],[1287,1271],[1285,1260],[1280,1247],[1277,1230],[1276,1211],[1277,1185]],
    "neighbors": ["58", "59", "61", "S25", "S26"]
  },
  "61": {
    "coords": [[1475,1183],[1487,1187],[1498,1190],[1499,1191],[1503,1193],[1512,1199],[1522,1209],[1523,1219],[1525,1227],[1520,1239],[1515,1248],[1497,1263],[1485,1270],[1473,1273],[1444,1273],[1441,1271],[1431,1270],[1427,1267],[1419,1267],[1417,1270],[1420,1273],[1419,1296],[1417,1296],[1417,1304],[1423,1306],[1427,1311],[1434,1321],[1437,1327],[1438,1329],[1439,1335],[1441,1335],[1442,1343],[1444,1342],[1446,1348],[1448,1349],[1448,1351],[1454,1352],[1454,1354],[1467,1355],[1467,1350],[1478,1351],[1484,1347],[1487,1348],[1513,1349],[1517,1351],[1532,1352],[1541,1348],[1546,1348],[1548,1345],[1553,1345],[1557,1340],[1577,1341],[1583,1338],[1595,1339],[1600,1343],[1605,1345],[1615,1344],[1623,1340],[1629,1337],[1633,1331],[1638,1325],[1639,1316],[1643,1313],[1643,1304],[1645,1304],[1647,1296],[1651,1289],[1657,1279],[1661,1273],[1667,1269],[1665,1267],[1641,1267],[1641,1265],[1631,1264],[1625,1261],[1623,1258],[1617,1255],[1611,1250],[1602,1241],[1600,1237],[1599,1229],[1595,1227],[1595,1223],[1593,1220],[1593,1207],[1595,1201],[1597,1195],[1603,1182],[1610,1176],[1616,1170],[1617,1170],[1619,1168],[1622,1168],[1625,1163],[1621,1159],[1613,1155],[1605,1148],[1596,1135],[1589,1121],[1585,1115],[1581,1109],[1576,1104],[1565,1102],[1554,1103],[1545,1105],[1532,1118],[1526,1127],[1517,1141],[1506,1155],[1500,1164],[1494,1172],[1485,1178]],
    "neighbors": ["51", "53", "56", "59", "60", "62", "75", "S26"]
  },
  "62": {
    "coords": [[1636,1345],[1643,1341],[1644,1338],[1648,1335],[1648,1327],[1650,1327],[1652,1320],[1656,1312],[1659,1299],[1666,1290],[1674,1278],[1683,1270],[1692,1267],[1704,1265],[1713,1269],[1723,1274],[1726,1285],[1731,1295],[1731,1336],[1728,1338],[1729,1382],[1732,1389],[1732,1394],[1740,1408],[1754,1419],[1764,1422],[1755,1426],[1746,1432],[1734,1446],[1729,1455],[1727,1460],[1720,1463],[1714,1469],[1710,1471],[1703,1473],[1702,1475],[1693,1476],[1690,1474],[1685,1471],[1685,1469],[1681,1468],[1678,1461],[1671,1450],[1663,1438],[1663,1433],[1661,1432],[1661,1410],[1657,1400],[1657,1384],[1656,1382],[1655,1373],[1651,1366],[1645,1360],[1635,1348]],
    "neighbors": ["51", "61", "63", "74", "75", "79"]
  },
  "63": {
    "coords": [[1746,1305],[1743,1311],[1747,1313],[1745,1331],[1743,1336],[1742,1355],[1740,1357],[1740,1376],[1745,1382],[1745,1389],[1748,1392],[1751,1398],[1757,1407],[1765,1409],[1769,1412],[1789,1412],[1802,1411],[1807,1408],[1812,1408],[1821,1404],[1827,1401],[1835,1399],[1853,1397],[1855,1402],[1862,1402],[1865,1406],[1870,1406],[1873,1409],[1875,1408],[1878,1405],[1882,1405],[1886,1403],[1892,1396],[1894,1386],[1896,1386],[1897,1369],[1899,1364],[1900,1353],[1903,1350],[1904,1340],[1899,1340],[1896,1338],[1889,1335],[1881,1331],[1873,1321],[1871,1316],[1869,1315],[1867,1312],[1865,1310],[1865,1303],[1854,1306],[1840,1317],[1823,1323],[1805,1328],[1803,1332],[1793,1331],[1789,1329],[1781,1327],[1782,1325],[1772,1323],[1763,1316],[1750,1305]],
    "neighbors": ["50", "51", "62", "64", "74"]
  },
  "64": {
    "coords": [[1917,1346],[1919,1341],[1936,1341],[1938,1339],[1948,1336],[1952,1334],[1972,1334],[1974,1337],[1976,1338],[1972,1344],[1970,1349],[1970,1374],[1972,1380],[1974,1391],[1979,1403],[1985,1417],[1987,1429],[1992,1442],[1992,1453],[1989,1455],[1989,1461],[1985,1464],[1983,1475],[1971,1488],[1957,1500],[1950,1506],[1939,1510],[1939,1514],[1914,1513],[1910,1511],[1903,1508],[1896,1493],[1896,1479],[1893,1477],[1893,1461],[1893,1441],[1890,1440],[1889,1429],[1887,1427],[1886,1421],[1884,1419],[1884,1417],[1889,1417],[1901,1402],[1906,1394],[1907,1390],[1909,1381],[1911,1380],[1912,1373],[1911,1360],[1911,1356],[1914,1354],[1915,1344]],
    "neighbors": ["50", "63", "65", "73", "74"]
  },
  "65": {
    "coords": [[2003,1434],[2000,1423],[1997,1420],[1996,1414],[1995,1412],[1993,1403],[1989,1400],[1991,1394],[1988,1392],[1988,1385],[1983,1385],[1985,1370],[1983,1367],[1982,1353],[1985,1351],[1985,1347],[1997,1347],[2006,1353],[2021,1365],[2037,1375],[2047,1375],[2049,1406],[2051,1408],[2053,1414],[2057,1419],[2063,1428],[2077,1438],[2085,1443],[2089,1444],[2093,1446],[2095,1448],[2105,1450],[2110,1452],[2145,1451],[2145,1449],[2153,1449],[2152,1445],[2157,1445],[2162,1441],[2165,1442],[2166,1450],[2175,1463],[2185,1472],[2189,1471],[2186,1477],[2179,1483],[2177,1487],[2171,1495],[2166,1503],[2164,1507],[2161,1517],[2161,1520],[2159,1538],[2158,1539],[2155,1551],[2153,1554],[2153,1560],[2150,1562],[2150,1566],[2143,1575],[2135,1581],[2128,1586],[2121,1588],[2119,1589],[2110,1589],[2110,1594],[2087,1593],[2080,1597],[2064,1596],[2053,1592],[2035,1593],[2032,1589],[2030,1588],[2026,1585],[2024,1585],[2020,1583],[2019,1580],[2017,1581],[2011,1568],[2010,1567],[2008,1563],[2007,1560],[2006,1555],[2004,1555],[2003,1547],[2001,1545],[2000,1541],[1995,1533],[1988,1525],[1980,1518],[1968,1510],[1971,1505],[1980,1497],[1983,1490],[1988,1489],[1992,1484],[1998,1473],[2001,1467],[2002,1458],[2003,1456]],
    "neighbors": ["49", "50", "64", "66", "71", "73"]
  },
  "66": {
    "coords": [[2182,1498],[2196,1485],[2198,1477],[2209,1477],[2231,1477],[2236,1474],[2261,1474],[2270,1477],[2282,1480],[2289,1487],[2288,1499],[2293,1500],[2292,1517],[2292,1526],[2297,1529],[2298,1538],[2307,1546],[2315,1552],[2339,1551],[2340,1585],[2339,1593],[2337,1600],[2336,1603],[2331,1604],[2326,1608],[2303,1628],[2291,1643],[2281,1655],[2269,1668],[2257,1676],[2241,1686],[2227,1690],[2208,1695],[2207,1696],[2192,1698],[2183,1701],[2179,1700],[2175,1692],[2172,1692],[2167,1688],[2162,1681],[2155,1668],[2153,1646],[2149,1644],[2149,1625],[2147,1624],[2147,1610],[2150,1609],[2150,1601],[2159,1585],[2160,1582],[2165,1576],[2162,1568],[2169,1556],[2169,1544],[2171,1542],[2172,1522],[2174,1520],[2174,1513],[2177,1511],[2179,1504],[2181,1505]],
    "neighbors": ["48", "65", "67", "68", "70", "71"]
  },
  "67": {
    "coords": [[2400,1531],[2400,1312],[2391,1312],[2391,1316],[2383,1317],[2374,1321],[2363,1327],[2348,1337],[2331,1355],[2323,1369],[2312,1387],[2300,1410],[2289,1436],[2282,1448],[2278,1455],[2271,1462],[2281,1466],[2295,1475],[2305,1494],[2305,1522],[2311,1534],[2316,1538],[2326,1538],[2339,1537],[2354,1538],[2362,1542],[2373,1545],[2381,1541],[2387,1540],[2389,1538],[2392,1538]],
    "neighbors": ["48", "66", "68"]
  },
  "68": {
    "coords": [[2400,1547],[2400,1589],[2395,1599],[2395,1608],[2397,1612],[2397,1617],[2400,1617],[2400,1679],[2395,1680],[2394,1685],[2388,1685],[2379,1689],[2368,1690],[2367,1694],[2362,1694],[2361,1696],[2357,1698],[2345,1704],[2337,1712],[2328,1729],[2323,1742],[2321,1743],[2320,1751],[2318,1752],[2316,1760],[2297,1761],[2292,1758],[2286,1755],[2283,1753],[2277,1747],[2271,1742],[2269,1735],[2268,1735],[2266,1729],[2263,1727],[2262,1721],[2253,1710],[2251,1704],[2247,1700],[2246,1696],[2249,1693],[2257,1692],[2265,1686],[2285,1670],[2301,1650],[2319,1627],[2334,1617],[2343,1614],[2341,1605],[2349,1603],[2349,1595],[2351,1593],[2352,1582],[2355,1577],[2355,1559],[2353,1556],[2353,1552],[2360,1553],[2361,1557],[2369,1557],[2382,1556],[2383,1554],[2393,1552],[2393,1549]],
    "neighbors": ["66", "67", "69", "70"]
  },
  "69": {
    "coords": [[2400,1696],[2400,1816],[2396,1818],[2389,1829],[2378,1843],[2368,1858],[2364,1863],[2359,1870],[2347,1883],[2339,1888],[2329,1903],[2325,1911],[2323,1917],[2321,1922],[2319,1930],[2314,1928],[2309,1931],[2306,1935],[2301,1935],[2297,1932],[2292,1932],[2289,1928],[2283,1922],[2282,1916],[2280,1914],[2279,1909],[2279,1905],[2277,1904],[2273,1888],[2280,1885],[2290,1880],[2304,1866],[2316,1846],[2321,1821],[2324,1819],[2323,1797],[2327,1794],[2327,1769],[2329,1768],[2330,1755],[2333,1753],[2333,1745],[2335,1744],[2344,1724],[2350,1717],[2353,1708],[2360,1709],[2369,1705],[2383,1699],[2391,1696]],
    "neighbors": ["68", "70", "91", "92"]
  },
  "70": {
    "coords": [[2115,1698],[2128,1703],[2132,1705],[2138,1705],[2141,1708],[2151,1709],[2155,1711],[2192,1711],[2201,1711],[2205,1709],[2215,1708],[2225,1706],[2230,1701],[2234,1700],[2235,1706],[2241,1708],[2244,1713],[2247,1720],[2252,1727],[2259,1740],[2269,1757],[2281,1764],[2292,1770],[2303,1775],[2312,1775],[2318,1773],[2314,1780],[2312,1781],[2311,1799],[2310,1812],[2308,1813],[2309,1829],[2307,1830],[2303,1841],[2300,1851],[2293,1858],[2286,1866],[2278,1871],[2270,1874],[2262,1876],[2255,1878],[2249,1874],[2240,1873],[2225,1868],[2221,1865],[2217,1865],[2216,1862],[2209,1861],[2205,1858],[2192,1856],[2191,1851],[2177,1854],[2175,1846],[2166,1843],[2162,1843],[2160,1840],[2135,1829],[2122,1821],[2113,1813],[2097,1793],[2095,1782],[2089,1770],[2088,1740],[2091,1739],[2092,1730],[2094,1731],[2093,1724],[2097,1721],[2099,1714],[2107,1708],[2111,1708]],
    "neighbors": ["66", "68", "69", "71", "72", "91"]
  },
  "71": {
    "coords": [[2016,1597],[2024,1597],[2028,1599],[2032,1600],[2037,1603],[2046,1604],[2048,1605],[2096,1606],[2099,1604],[2112,1604],[2114,1600],[2121,1599],[2124,1599],[2131,1598],[2133,1593],[2140,1592],[2140,1597],[2138,1599],[2136,1608],[2135,1609],[2135,1630],[2139,1637],[2138,1655],[2139,1655],[2142,1666],[2144,1672],[2151,1684],[2160,1694],[2157,1698],[2151,1696],[2139,1694],[2133,1692],[2128,1689],[2122,1689],[2117,1687],[2110,1687],[2110,1684],[2103,1684],[2086,1680],[2083,1677],[2060,1678],[2052,1681],[2048,1681],[2042,1685],[2036,1685],[2018,1693],[2008,1700],[1998,1707],[1997,1688],[1994,1686],[1993,1677],[1989,1675],[1980,1661],[1980,1635],[1983,1633],[1985,1627],[1987,1621],[1992,1613],[2002,1605]],
    "neighbors": ["65", "66", "70", "72", "73"]
  },
  "72": {
    "coords": [[1947,1759],[1964,1751],[1979,1739],[1997,1723],[2013,1711],[2030,1701],[2052,1691],[2079,1689],[2082,1691],[2094,1692],[2093,1695],[2100,1697],[2092,1703],[2087,1717],[2081,1727],[2078,1736],[2078,1769],[2080,1774],[2080,1781],[2083,1787],[2086,1796],[2093,1803],[2098,1813],[2114,1827],[2137,1842],[2167,1855],[2159,1859],[2156,1864],[2148,1878],[2144,1885],[2140,1904],[2140,1914],[2138,1919],[2136,1926],[2126,1936],[2114,1944],[2106,1945],[2102,1947],[2082,1947],[2078,1945],[2068,1938],[2054,1927],[2041,1911],[2023,1895],[2005,1880],[1988,1865],[1975,1858],[1972,1857],[1971,1844],[1973,1842],[1975,1834],[1977,1832],[1982,1828],[1983,1820],[1984,1818],[1984,1795],[1981,1795],[1981,1789],[1974,1781],[1967,1773],[1955,1767],[1952,1764],[1946,1763]],
    "neighbors": ["70", "71", "73", "81", "90", "91"]
  },
  "73": {
    "coords": [[1885,1637],[1885,1624],[1888,1625],[1890,1612],[1892,1610],[1892,1577],[1896,1572],[1896,1561],[1899,1559],[1900,1550],[1902,1543],[1904,1536],[1912,1529],[1917,1526],[1929,1527],[1936,1524],[1943,1524],[1946,1521],[1958,1515],[1963,1519],[1969,1523],[1972,1524],[1981,1531],[1990,1547],[1994,1555],[1994,1565],[2002,1571],[2001,1575],[2007,1583],[2008,1587],[2004,1590],[1996,1594],[1987,1605],[1972,1622],[1970,1634],[1966,1646],[1967,1654],[1969,1660],[1974,1670],[1979,1679],[1984,1685],[1982,1689],[1986,1695],[1984,1702],[1981,1714],[1981,1719],[1974,1726],[1967,1733],[1953,1743],[1939,1748],[1924,1753],[1916,1757],[1902,1755],[1894,1753],[1886,1747],[1880,1737],[1884,1735],[1890,1729],[1895,1724],[1898,1719],[1899,1716],[1903,1713],[1900,1703],[1905,1704],[1905,1676],[1902,1674],[1901,1666],[1899,1665],[1898,1659],[1894,1656],[1889,1647]],
    "neighbors": ["64", "65", "71", "72", "74", "80", "81"]
  },
  "74": {
    "coords": [[1748,1449],[1757,1439],[1761,1437],[1767,1435],[1781,1431],[1783,1426],[1788,1427],[1798,1423],[1808,1421],[1817,1419],[1826,1415],[1833,1415],[1857,1413],[1863,1417],[1872,1421],[1872,1424],[1877,1431],[1877,1445],[1880,1449],[1880,1458],[1881,1471],[1882,1488],[1887,1503],[1896,1515],[1903,1519],[1895,1529],[1888,1546],[1887,1557],[1885,1557],[1883,1568],[1874,1572],[1866,1576],[1845,1576],[1845,1573],[1836,1573],[1831,1571],[1829,1565],[1823,1561],[1808,1550],[1795,1541],[1781,1543],[1777,1545],[1773,1545],[1769,1548],[1765,1549],[1765,1545],[1759,1543],[1745,1531],[1735,1517],[1731,1505],[1730,1480],[1733,1478],[1733,1470],[1741,1457]],
    "neighbors": ["62", "63", "64", "73", "79", "80"]
  },
  "75": {
    "coords": [[1602,1356],[1619,1355],[1625,1351],[1627,1357],[1635,1360],[1635,1365],[1639,1371],[1645,1386],[1646,1400],[1648,1424],[1652,1435],[1657,1446],[1661,1455],[1668,1465],[1669,1469],[1672,1471],[1671,1489],[1669,1496],[1669,1506],[1663,1515],[1655,1529],[1643,1542],[1636,1547],[1625,1549],[1623,1550],[1610,1551],[1604,1548],[1597,1545],[1588,1538],[1580,1525],[1574,1515],[1567,1502],[1557,1489],[1540,1474],[1527,1467],[1519,1466],[1517,1458],[1521,1456],[1527,1451],[1547,1435],[1571,1412],[1584,1399],[1590,1388],[1591,1378],[1595,1375],[1595,1368],[1597,1368],[1599,1361],[1601,1362]],
    "neighbors": ["61", "62", "76", "79", "S26"]
  },
  "76": {
    "coords": [[1377,1462],[1386,1460],[1388,1458],[1410,1457],[1417,1457],[1427,1461],[1433,1460],[1434,1462],[1443,1463],[1449,1467],[1461,1467],[1468,1469],[1488,1469],[1490,1467],[1502,1466],[1505,1464],[1507,1465],[1508,1471],[1515,1474],[1523,1475],[1526,1478],[1531,1481],[1541,1488],[1548,1494],[1557,1506],[1559,1508],[1561,1514],[1564,1515],[1564,1518],[1570,1528],[1575,1538],[1583,1545],[1583,1548],[1591,1553],[1592,1556],[1597,1555],[1605,1560],[1606,1563],[1601,1562],[1601,1566],[1589,1573],[1577,1582],[1561,1595],[1546,1611],[1543,1621],[1541,1619],[1530,1602],[1504,1586],[1491,1581],[1489,1579],[1477,1580],[1477,1576],[1465,1576],[1460,1573],[1436,1574],[1419,1572],[1415,1571],[1405,1569],[1403,1567],[1399,1565],[1396,1561],[1394,1561],[1394,1549],[1397,1544],[1401,1535],[1402,1534],[1405,1527],[1407,1522],[1408,1507],[1405,1505],[1403,1499],[1399,1491],[1398,1487],[1385,1475],[1382,1469],[1376,1467]],
    "neighbors": ["75", "77", "78", "79", "S26"]
  },
  "77": {
    "coords": [[1283,1445],[1304,1443],[1307,1447],[1312,1447],[1315,1450],[1321,1453],[1326,1455],[1329,1458],[1335,1458],[1333,1460],[1341,1462],[1344,1463],[1356,1465],[1361,1469],[1376,1479],[1386,1493],[1395,1506],[1395,1511],[1396,1517],[1394,1521],[1393,1530],[1390,1534],[1386,1541],[1383,1548],[1381,1551],[1381,1561],[1385,1565],[1390,1573],[1398,1578],[1402,1579],[1402,1584],[1398,1587],[1394,1588],[1385,1593],[1374,1596],[1363,1604],[1345,1615],[1327,1635],[1311,1654],[1298,1674],[1293,1684],[1291,1693],[1287,1694],[1287,1691],[1280,1692],[1275,1685],[1268,1683],[1260,1680],[1250,1675],[1239,1665],[1234,1656],[1231,1643],[1230,1608],[1233,1605],[1233,1583],[1236,1580],[1236,1570],[1241,1567],[1250,1548],[1265,1534],[1282,1513],[1296,1494],[1297,1485],[1295,1485],[1289,1478],[1287,1479],[1281,1471],[1272,1463],[1272,1458],[1277,1457],[1278,1449]],
    "neighbors": ["76", "78", "82", "S26", "S31"]
  },
  "78": {
    "coords": [[1334,1646],[1344,1631],[1358,1619],[1368,1613],[1390,1603],[1397,1596],[1404,1596],[1406,1594],[1412,1592],[1414,1590],[1426,1590],[1426,1588],[1461,1587],[1474,1587],[1479,1590],[1486,1591],[1489,1593],[1503,1597],[1516,1606],[1526,1614],[1526,1619],[1531,1624],[1534,1636],[1535,1647],[1535,1672],[1538,1674],[1539,1683],[1544,1692],[1539,1694],[1528,1694],[1525,1698],[1518,1698],[1507,1704],[1494,1715],[1490,1724],[1486,1723],[1473,1709],[1456,1694],[1440,1682],[1425,1673],[1408,1661],[1389,1657],[1380,1655],[1379,1653],[1364,1651],[1368,1648],[1350,1648],[1344,1645],[1332,1648]],
    "neighbors": ["76", "77", "79", "82", "83"]
  },
  "79": {
    "coords": [[1550,1638],[1551,1632],[1554,1630],[1553,1623],[1556,1618],[1577,1596],[1592,1584],[1604,1577],[1613,1571],[1622,1566],[1622,1562],[1635,1560],[1645,1555],[1656,1544],[1667,1532],[1674,1524],[1674,1518],[1677,1516],[1679,1507],[1683,1494],[1682,1483],[1690,1483],[1691,1484],[1707,1486],[1711,1483],[1716,1479],[1718,1479],[1718,1510],[1722,1511],[1723,1519],[1728,1526],[1735,1537],[1745,1545],[1758,1554],[1751,1560],[1742,1569],[1735,1578],[1719,1603],[1705,1618],[1676,1629],[1658,1637],[1640,1648],[1630,1670],[1626,1690],[1629,1703],[1621,1703],[1617,1711],[1606,1717],[1599,1719],[1587,1717],[1578,1715],[1571,1711],[1564,1707],[1559,1701],[1557,1696],[1553,1686],[1549,1680],[1550,1667],[1547,1666],[1545,1654],[1549,1646],[1550,1645]],
    "neighbors": ["62", "74", "75", "76", "78", "80", "83"]
  },
  "80": {
    "coords": [[1654,1656],[1664,1646],[1687,1640],[1698,1636],[1716,1627],[1732,1608],[1739,1594],[1756,1572],[1774,1558],[1776,1555],[1795,1556],[1799,1559],[1810,1564],[1820,1573],[1830,1580],[1834,1582],[1839,1585],[1851,1588],[1870,1587],[1874,1583],[1880,1583],[1879,1596],[1878,1603],[1875,1620],[1874,1630],[1870,1629],[1861,1625],[1852,1622],[1848,1620],[1835,1620],[1835,1625],[1826,1624],[1813,1628],[1805,1638],[1801,1648],[1798,1658],[1795,1663],[1796,1682],[1798,1684],[1799,1690],[1792,1694],[1787,1705],[1785,1712],[1788,1716],[1789,1725],[1790,1734],[1791,1735],[1792,1741],[1789,1745],[1789,1760],[1782,1765],[1779,1770],[1768,1771],[1762,1770],[1758,1767],[1754,1767],[1748,1759],[1739,1753],[1730,1749],[1706,1739],[1699,1733],[1686,1731],[1682,1730],[1670,1727],[1659,1718],[1646,1710],[1644,1705],[1638,1688],[1643,1671],[1646,1664]],
    "neighbors": ["73", "74", "79", "81", "83"]
  },
  "81": {
    "coords": [[1761,1782],[1776,1782],[1787,1776],[1799,1765],[1805,1752],[1803,1730],[1801,1725],[1801,1703],[1804,1702],[1808,1707],[1809,1712],[1819,1720],[1835,1737],[1845,1743],[1849,1745],[1855,1746],[1869,1744],[1874,1750],[1887,1764],[1897,1768],[1919,1768],[1928,1769],[1929,1765],[1932,1769],[1940,1771],[1948,1776],[1963,1784],[1970,1794],[1972,1801],[1973,1812],[1969,1814],[1965,1825],[1960,1836],[1958,1852],[1945,1854],[1920,1864],[1896,1888],[1890,1894],[1885,1891],[1875,1884],[1868,1883],[1868,1881],[1857,1880],[1849,1887],[1839,1898],[1831,1908],[1817,1913],[1812,1916],[1799,1916],[1783,1915],[1780,1913],[1771,1911],[1764,1904],[1759,1893],[1759,1888],[1757,1886],[1753,1872],[1755,1867],[1757,1854],[1760,1855],[1758,1845],[1764,1840],[1768,1826],[1770,1804],[1764,1794]],
    "neighbors": ["72", "73", "80", "83", "85", "86", "90", "S38"]
  },
  "82": {
    "coords": [[1275,1808],[1277,1813],[1287,1814],[1303,1806],[1322,1799],[1321,1792],[1328,1795],[1335,1791],[1357,1779],[1380,1768],[1390,1763],[1406,1765],[1423,1772],[1426,1773],[1439,1773],[1446,1777],[1476,1776],[1478,1778],[1486,1779],[1484,1776],[1482,1775],[1480,1768],[1478,1765],[1478,1746],[1480,1745],[1483,1733],[1473,1726],[1457,1710],[1439,1696],[1422,1681],[1404,1676],[1391,1669],[1375,1666],[1365,1661],[1332,1658],[1329,1660],[1322,1659],[1317,1666],[1312,1671],[1311,1675],[1306,1682],[1305,1687],[1302,1693],[1302,1698],[1297,1702],[1297,1711],[1301,1711],[1299,1721],[1297,1753],[1296,1764],[1290,1773],[1282,1792],[1277,1801]],
    "neighbors": ["77", "78", "83", "84", "S31", "S32"]
  },
  "83": {
    "coords": [[1548,1705],[1556,1714],[1575,1727],[1582,1729],[1606,1729],[1621,1722],[1632,1710],[1638,1719],[1657,1731],[1700,1751],[1726,1758],[1739,1768],[1748,1778],[1750,1785],[1752,1794],[1754,1801],[1753,1822],[1754,1831],[1747,1837],[1740,1842],[1733,1845],[1729,1845],[1719,1840],[1702,1828],[1684,1829],[1662,1834],[1643,1844],[1630,1862],[1623,1846],[1614,1834],[1610,1832],[1603,1824],[1590,1816],[1566,1802],[1548,1795],[1545,1793],[1540,1792],[1536,1790],[1528,1789],[1527,1785],[1516,1786],[1512,1782],[1496,1783],[1494,1773],[1491,1771],[1492,1763],[1490,1761],[1490,1750],[1494,1748],[1492,1741],[1496,1739],[1498,1732],[1502,1723],[1508,1717],[1520,1708],[1533,1706]],
    "neighbors": ["78", "79", "80", "81", "82", "84", "85"]
  },
  "84": {
    "coords": [[1460,1788],[1468,1786],[1473,1789],[1485,1790],[1490,1793],[1506,1795],[1517,1797],[1524,1798],[1534,1800],[1547,1806],[1558,1808],[1575,1820],[1590,1828],[1600,1837],[1606,1840],[1614,1855],[1618,1859],[1621,1868],[1624,1871],[1615,1888],[1607,1904],[1599,1912],[1596,1905],[1582,1907],[1567,1918],[1554,1934],[1546,1936],[1541,1933],[1541,1924],[1533,1915],[1524,1916],[1518,1913],[1504,1915],[1490,1916],[1493,1912],[1499,1904],[1500,1894],[1494,1885],[1484,1880],[1480,1881],[1477,1879],[1465,1878],[1462,1873],[1455,1875],[1448,1870],[1411,1871],[1407,1875],[1393,1875],[1387,1879],[1380,1879],[1377,1881],[1355,1882],[1351,1881],[1352,1877],[1360,1873],[1372,1867],[1387,1860],[1401,1855],[1415,1853],[1429,1845],[1431,1840],[1431,1833],[1426,1829],[1429,1823],[1439,1814],[1449,1803],[1454,1797],[1455,1790],[1457,1787]],
    "neighbors": ["82", "83", "85", "S32"]
  },
  "85": {
    "coords": [[1605,1923],[1617,1912],[1625,1894],[1632,1877],[1649,1856],[1666,1845],[1683,1840],[1701,1842],[1715,1850],[1726,1859],[1743,1854],[1743,1858],[1741,1870],[1744,1885],[1750,1902],[1760,1914],[1770,1921],[1765,1930],[1751,1943],[1744,1973],[1736,1993],[1723,2004],[1713,2005],[1700,1995],[1692,1985],[1685,1974],[1677,1977],[1674,1969],[1661,1957],[1649,1952],[1641,1952],[1631,1950],[1630,1947],[1614,1948],[1611,1942],[1604,1943],[1603,1930],[1603,1925]],
    "neighbors": ["81", "83", "84", "86", "87", "S32"]
  },
  "86": {
    "coords": [[1633,2081],[1642,2072],[1646,2066],[1659,2059],[1671,2047],[1679,2033],[1685,2018],[1687,1999],[1693,2004],[1698,2010],[1705,2012],[1709,2015],[1728,2016],[1729,2013],[1733,2012],[1743,2003],[1750,1991],[1756,1971],[1759,1967],[1759,1960],[1764,1958],[1765,1949],[1773,1937],[1777,1933],[1787,1927],[1805,1930],[1818,1925],[1826,1923],[1836,1917],[1837,1922],[1831,1931],[1829,1937],[1827,1938],[1827,1943],[1823,1945],[1823,1951],[1809,1969],[1798,1991],[1787,2014],[1782,2033],[1780,2033],[1779,2043],[1776,2044],[1770,2064],[1757,2076],[1753,2081],[1747,2080],[1746,2084],[1724,2087],[1715,2088],[1704,2097],[1693,2111],[1691,2119],[1674,2125],[1657,2128],[1643,2138],[1631,2154],[1621,2164],[1619,2149],[1617,2147],[1617,2138],[1613,2136],[1613,2123],[1616,2122],[1616,2110],[1619,2102],[1623,2096]],
    "neighbors": ["81", "85", "87", "88", "S37", "S38"]
  },
  "87": {
    "coords": [[1458,1983],[1469,1987],[1475,1987],[1477,1989],[1521,1991],[1533,1993],[1549,1993],[1551,1990],[1559,1990],[1565,1983],[1570,1985],[1575,1980],[1583,1971],[1587,1971],[1591,1965],[1593,1958],[1599,1955],[1610,1957],[1624,1959],[1628,1961],[1641,1961],[1651,1965],[1662,1975],[1672,1986],[1673,1994],[1673,1995],[1675,1997],[1674,2011],[1671,2013],[1671,2024],[1669,2027],[1663,2039],[1655,2047],[1651,2052],[1645,2053],[1638,2058],[1626,2059],[1623,2062],[1585,2062],[1581,2058],[1574,2057],[1566,2054],[1557,2046],[1546,2040],[1538,2037],[1529,2036],[1520,2032],[1513,2037],[1488,2036],[1482,2032],[1480,2032],[1479,2028],[1480,2027],[1481,2017],[1482,2011],[1483,2005],[1474,1997],[1469,1995],[1462,1990],[1457,1986]],
    "neighbors": ["85", "86", "88", "S32", "S37"]
  },
  "88": {
    "coords": [[1535,2051],[1544,2050],[1544,2052],[1552,2057],[1559,2060],[1565,2064],[1571,2069],[1578,2070],[1579,2072],[1612,2074],[1621,2073],[1623,2073],[1624,2077],[1619,2078],[1615,2085],[1610,2097],[1608,2097],[1605,2109],[1603,2118],[1601,2141],[1605,2141],[1606,2149],[1609,2156],[1608,2179],[1604,2182],[1598,2195],[1588,2206],[1579,2217],[1570,2232],[1561,2246],[1553,2255],[1546,2258],[1535,2258],[1513,2258],[1505,2255],[1497,2257],[1489,2259],[1487,2253],[1483,2249],[1481,2245],[1472,2237],[1465,2229],[1455,2217],[1454,2213],[1451,2211],[1451,2204],[1444,2195],[1438,2191],[1439,2165],[1448,2152],[1459,2141],[1460,2142],[1462,2139],[1467,2132],[1470,2133],[1471,2130],[1479,2122],[1481,2117],[1483,2116],[1483,2111],[1486,2111],[1486,2100],[1483,2099],[1483,2092],[1481,2091],[1480,2086],[1477,2086],[1476,2080],[1480,2077],[1492,2075],[1491,2073],[1500,2073],[1499,2071],[1505,2069],[1508,2067],[1516,2065]],
    "neighbors": ["86", "87", "S37"]
  },
  "89": {
    "coords": [[1803,2090],[1809,2085],[1816,2085],[1825,2076],[1833,2075],[1839,2072],[1880,2073],[1887,2076],[1897,2080],[1905,2084],[1914,2087],[1925,2100],[1931,2117],[1937,2131],[1936,2142],[1939,2147],[1949,2165],[1957,2179],[1961,2181],[1963,2188],[1964,2198],[1963,2204],[1961,2208],[1960,2218],[1952,2222],[1933,2228],[1933,2229],[1922,2230],[1923,2233],[1895,2234],[1891,2229],[1886,2228],[1876,2223],[1874,2220],[1867,2221],[1866,2217],[1857,2215],[1853,2214],[1839,2214],[1836,2212],[1832,2210],[1832,2190],[1827,2185],[1821,2181],[1811,2180],[1802,2182],[1804,2184],[1791,2185],[1792,2189],[1785,2189],[1781,2187],[1782,2185],[1786,2180],[1788,2176],[1790,2174],[1793,2170],[1795,2171],[1795,2164],[1797,2161],[1797,2150],[1793,2147],[1787,2140],[1764,2141],[1763,2131],[1767,2126],[1771,2122],[1779,2115],[1791,2107],[1793,2101]],
    "neighbors": ["90", "93", "S38", "S39"]
  },
  "90": {
    "coords": [[1915,1886],[1906,1897],[1897,1908],[1899,1910],[1901,1920],[1900,1935],[1898,1949],[1891,1958],[1883,1972],[1873,1985],[1869,1999],[1865,2010],[1853,2022],[1836,2035],[1829,2043],[1829,2062],[1842,2061],[1847,2058],[1870,2060],[1888,2061],[1888,2064],[1895,2066],[1907,2068],[1907,2072],[1909,2072],[1914,2074],[1917,2079],[1922,2078],[1925,2072],[1933,2074],[1935,2077],[1950,2077],[1960,2074],[1964,2071],[1971,2070],[1975,2068],[1979,2068],[1987,2064],[1993,2059],[2001,2048],[2016,2036],[2019,2028],[2025,2027],[2026,2020],[2037,2009],[2046,1999],[2057,1992],[2070,1984],[2079,1978],[2082,1961],[2079,1959],[2067,1952],[2054,1945],[2043,1931],[2025,1911],[2001,1890],[1987,1881],[1974,1870],[1960,1865],[1939,1868],[1925,1877]],
    "neighbors": ["72", "81", "89", "91", "93", "S38"]
  },
  "91": {
    "coords": [[2094,1958],[2110,1958],[2111,1957],[2122,1953],[2137,1942],[2148,1926],[2153,1920],[2152,1906],[2155,1889],[2159,1881],[2167,1869],[2174,1865],[2188,1866],[2202,1869],[2227,1881],[2238,1885],[2247,1886],[2248,1890],[2260,1888],[2262,1897],[2265,1902],[2265,1907],[2268,1911],[2268,1919],[2274,1928],[2285,1940],[2297,1944],[2308,1945],[2314,1942],[2316,1942],[2315,1949],[2306,1962],[2285,1987],[2265,2011],[2248,2034],[2234,2061],[2235,2081],[2236,2086],[2200,2087],[2192,2092],[2182,2098],[2180,2088],[2178,2081],[2173,2071],[2171,2069],[2166,2068],[2167,2061],[2163,2060],[2158,2054],[2156,2055],[2149,2051],[2142,2049],[2142,2045],[2135,2046],[2134,2043],[2122,2042],[2116,2039],[2091,2039],[2081,2036],[2067,2036],[2063,2038],[2056,2035],[2037,2035],[2032,2030],[2038,2023],[2048,2013],[2056,2004],[2068,1998],[2080,1992],[2087,1986],[2093,1981],[2092,1975],[2096,1975],[2095,1966],[2092,1964]],
    "neighbors": ["69", "70", "72", "90", "92", "93", "94"]
  },
  "92": {
    "coords": [[2400,1837],[2400,2118],[2391,2126],[2379,2134],[2367,2142],[2354,2149],[2341,2154],[2336,2157],[2327,2157],[2325,2154],[2315,2153],[2311,2148],[2305,2146],[2297,2146],[2290,2133],[2279,2123],[2259,2105],[2249,2089],[2247,2077],[2247,2063],[2259,2038],[2280,2011],[2302,1986],[2322,1959],[2329,1942],[2342,1906],[2349,1892],[2355,1892],[2368,1881],[2388,1850]],
    "neighbors": ["69", "91", "94", "97"]
  },
  "93": {
    "coords": [[1966,2171],[1993,2171],[1997,2175],[2006,2175],[2012,2181],[2018,2172],[2029,2165],[2046,2161],[2070,2159],[2081,2160],[2096,2165],[2106,2175],[2112,2175],[2116,2164],[2123,2148],[2135,2141],[2156,2127],[2167,2115],[2169,2099],[2162,2078],[2150,2064],[2132,2054],[2115,2052],[2095,2051],[2046,2048],[2036,2046],[2031,2044],[2028,2042],[2024,2042],[2018,2051],[2006,2063],[1985,2079],[1954,2087],[1930,2087],[1934,2098],[1940,2112],[1946,2134],[1948,2136],[1950,2145],[1953,2149],[1953,2153],[1955,2153],[1956,2159],[1957,2159],[1960,2164]],
    "neighbors": ["89", "90", "91", "94", "95", "96", "S39"]
  },
  "94": {
    "coords": [[2179,2113],[2187,2112],[2190,2109],[2195,2103],[2201,2100],[2211,2096],[2230,2099],[2242,2102],[2252,2112],[2260,2121],[2277,2137],[2286,2148],[2286,2159],[2288,2179],[2278,2193],[2265,2211],[2260,2220],[2253,2223],[2244,2229],[2238,2232],[2208,2232],[2190,2227],[2172,2220],[2158,2207],[2143,2194],[2129,2185],[2121,2182],[2123,2175],[2126,2168],[2129,2160],[2140,2153],[2154,2145],[2168,2132],[2172,2127]],
    "neighbors": ["91", "92", "93", "96", "97"]
  },
  "95": {
    "coords": [[2038,2333],[2020,2329],[2017,2333],[1999,2336],[1995,2338],[1989,2338],[1987,2332],[1991,2330],[1995,2326],[1998,2321],[1996,2313],[1993,2310],[1987,2308],[1976,2308],[1969,2312],[1929,2312],[1925,2309],[1921,2308],[1921,2304],[1927,2303],[1939,2300],[1957,2291],[1989,2289],[1997,2288],[2003,2278],[2008,2266],[2010,2264],[2009,2254],[2015,2251],[2009,2244],[2003,2241],[2005,2236],[2010,2228],[2012,2227],[2013,2221],[2015,2221],[2016,2212],[2020,2211],[2020,2205],[2022,2205],[2021,2186],[2029,2176],[2044,2174],[2062,2171],[2082,2174],[2092,2176],[2097,2180],[2097,2186],[2091,2191],[2075,2207],[2064,2238],[2061,2270],[2062,2294],[2060,2305],[2050,2320]],
    "neighbors": ["93", "96", "S39"]
  },
  "96": {
    "coords": [[2089,2212],[2095,2202],[2110,2196],[2124,2196],[2143,2211],[2170,2232],[2203,2245],[2223,2248],[2237,2244],[2247,2242],[2248,2246],[2259,2254],[2261,2267],[2262,2282],[2258,2284],[2253,2299],[2245,2321],[2243,2335],[2243,2359],[2247,2366],[2245,2368],[2233,2366],[2216,2365],[2211,2362],[2201,2361],[2195,2359],[2188,2360],[2181,2355],[2166,2357],[2161,2352],[2155,2352],[2149,2348],[2140,2349],[2137,2346],[2127,2348],[2127,2343],[2119,2342],[2115,2340],[2080,2340],[2075,2343],[2046,2344],[2052,2335],[2063,2326],[2071,2312],[2076,2302],[2075,2294],[2073,2289],[2074,2260],[2076,2251],[2076,2238],[2080,2234],[2081,2228]],
    "neighbors": ["93", "94", "95", "97", "S40"]
  },
  "97": {
    "coords": [[2400,2136],[2400,2263],[2388,2266],[2379,2270],[2378,2282],[2379,2289],[2387,2295],[2396,2304],[2400,2306],[2400,2346],[2379,2346],[2371,2350],[2355,2348],[2346,2353],[2336,2354],[2332,2356],[2321,2357],[2310,2360],[2302,2363],[2289,2364],[2267,2367],[2266,2363],[2259,2362],[2255,2356],[2253,2343],[2254,2334],[2255,2333],[2256,2323],[2259,2318],[2265,2307],[2271,2294],[2270,2287],[2272,2285],[2273,2255],[2268,2250],[2264,2244],[2255,2237],[2257,2234],[2263,2234],[2276,2218],[2288,2200],[2301,2179],[2301,2159],[2312,2162],[2317,2166],[2322,2169],[2345,2169],[2353,2163],[2364,2159],[2377,2149]],
    "neighbors": ["92", "94", "96", "S40"]
  },
  "98": {
    "coords": [[65,1094],[94,1092],[99,1096],[107,1095],[113,1099],[123,1099],[127,1101],[150,1102],[152,1100],[161,1099],[163,1096],[170,1095],[172,1094],[179,1092],[188,1086],[196,1084],[204,1080],[208,1082],[209,1088],[212,1098],[232,1114],[239,1116],[242,1118],[257,1118],[259,1120],[268,1122],[268,1123],[274,1126],[282,1127],[294,1128],[290,1137],[290,1146],[286,1148],[286,1164],[282,1167],[283,1190],[282,1195],[276,1204],[268,1216],[250,1232],[241,1238],[227,1251],[213,1258],[203,1265],[190,1273],[188,1273],[180,1276],[176,1279],[171,1277],[164,1274],[157,1271],[154,1269],[146,1269],[145,1267],[132,1266],[127,1263],[120,1260],[114,1259],[108,1256],[104,1255],[102,1253],[98,1251],[94,1249],[90,1246],[89,1240],[91,1235],[98,1230],[104,1226],[108,1222],[106,1216],[103,1214],[97,1209],[85,1198],[80,1195],[78,1187],[90,1187],[92,1185],[94,1184],[98,1178],[98,1165],[96,1163],[90,1152],[87,1147],[80,1142],[78,1137],[77,1136],[73,1131],[74,1120],[69,1115],[66,1107],[63,1100]],
    "neighbors": ["99", "100", "101", "S21"]
  },
  "99": {
    "coords": [[306,1128],[319,1129],[336,1138],[351,1150],[370,1163],[381,1175],[386,1189],[386,1207],[389,1227],[397,1238],[402,1250],[404,1263],[407,1279],[404,1281],[402,1290],[400,1298],[398,1303],[395,1306],[394,1310],[393,1318],[391,1320],[391,1330],[387,1329],[382,1324],[372,1322],[372,1319],[368,1320],[367,1318],[353,1317],[348,1320],[342,1320],[338,1323],[337,1322],[335,1311],[336,1299],[331,1289],[321,1283],[312,1275],[304,1265],[300,1261],[300,1255],[298,1255],[298,1248],[295,1248],[293,1232],[292,1229],[291,1182],[294,1181],[295,1172],[294,1157],[297,1156],[297,1143],[299,1142],[302,1134]],
    "neighbors": ["98", "100", "103", "S21", "S28"]
  },
  "100": {
    "coords": [[220,1268],[231,1257],[242,1248],[254,1239],[266,1227],[270,1226],[276,1216],[284,1216],[282,1238],[285,1240],[289,1252],[295,1264],[302,1278],[317,1290],[327,1303],[328,1321],[330,1326],[323,1331],[316,1341],[300,1358],[292,1375],[287,1391],[285,1403],[284,1406],[282,1421],[283,1425],[280,1425],[276,1431],[270,1433],[265,1433],[255,1436],[248,1435],[239,1433],[234,1431],[225,1425],[215,1414],[206,1405],[202,1396],[205,1396],[206,1386],[203,1385],[203,1378],[206,1376],[206,1373],[207,1367],[211,1360],[212,1353],[215,1351],[216,1344],[218,1341],[220,1336],[222,1326],[224,1325],[225,1314],[227,1313],[228,1295],[226,1294],[224,1283],[223,1282],[222,1277],[220,1276],[218,1268]],
    "neighbors": ["98", "99", "101", "102", "103"]
  },
  "101": {
    "coords": [[111,1345],[126,1333],[134,1325],[140,1319],[140,1315],[148,1311],[164,1303],[172,1297],[180,1292],[179,1287],[183,1283],[190,1283],[194,1280],[198,1278],[205,1274],[209,1272],[210,1276],[213,1278],[216,1286],[216,1295],[219,1297],[218,1311],[216,1313],[216,1322],[211,1325],[211,1332],[209,1338],[208,1345],[204,1352],[200,1362],[196,1370],[196,1377],[194,1381],[194,1390],[186,1395],[169,1407],[152,1419],[134,1430],[124,1435],[119,1439],[112,1441],[109,1441],[106,1431],[100,1421],[99,1417],[96,1412],[93,1410],[93,1406],[91,1404],[88,1363],[91,1360],[97,1352],[105,1351]],
    "neighbors": ["98", "100", "102", "S27"]
  },
  "102": {
    "coords": [[112,1449],[122,1448],[123,1446],[130,1444],[130,1441],[135,1440],[153,1428],[172,1415],[187,1404],[194,1401],[197,1404],[202,1413],[208,1418],[212,1426],[220,1431],[226,1435],[229,1438],[235,1439],[236,1442],[246,1446],[261,1445],[265,1442],[271,1441],[274,1438],[280,1438],[282,1434],[285,1435],[287,1442],[287,1444],[290,1454],[292,1454],[294,1460],[298,1465],[300,1468],[308,1478],[315,1486],[316,1489],[318,1491],[319,1496],[321,1497],[321,1502],[324,1509],[326,1517],[323,1520],[319,1525],[317,1528],[317,1533],[315,1533],[312,1536],[308,1535],[299,1541],[297,1545],[288,1549],[285,1555],[279,1557],[273,1561],[269,1563],[264,1565],[262,1567],[258,1567],[258,1570],[247,1571],[240,1575],[222,1573],[215,1576],[210,1572],[203,1567],[189,1554],[173,1545],[163,1538],[144,1524],[136,1515],[133,1510],[127,1504],[123,1500],[112,1486],[108,1480],[107,1462],[110,1460],[110,1455]],
    "neighbors": ["100", "101", "103", "104", "105", "S27"]
  },
  "103": {
    "coords": [[310,1363],[316,1355],[316,1353],[322,1345],[330,1338],[336,1332],[344,1329],[355,1326],[370,1327],[372,1329],[376,1332],[379,1333],[382,1337],[388,1336],[390,1361],[388,1362],[388,1373],[388,1385],[384,1387],[384,1407],[381,1412],[380,1419],[378,1421],[376,1423],[375,1427],[375,1439],[380,1443],[387,1451],[389,1454],[388,1464],[381,1470],[378,1476],[371,1480],[366,1483],[353,1494],[340,1506],[333,1511],[332,1502],[329,1502],[329,1494],[327,1492],[322,1486],[319,1476],[312,1472],[305,1462],[302,1456],[299,1448],[298,1448],[297,1441],[295,1438],[294,1426],[293,1411],[294,1406],[294,1395],[308,1365],[308,1365]],
    "neighbors": ["99", "100", "102", "104", "S28"]
  },
  "104": {
    "coords": [[332,1526],[335,1523],[337,1519],[344,1514],[356,1500],[367,1493],[369,1491],[375,1487],[377,1487],[379,1483],[382,1482],[385,1484],[395,1485],[398,1496],[402,1498],[404,1500],[404,1507],[400,1509],[400,1516],[394,1523],[394,1534],[394,1540],[390,1543],[392,1550],[388,1553],[388,1559],[386,1560],[380,1570],[378,1575],[380,1583],[382,1585],[382,1591],[385,1593],[384,1595],[380,1596],[373,1601],[366,1611],[363,1611],[358,1612],[354,1614],[327,1615],[324,1612],[318,1609],[310,1605],[306,1600],[304,1599],[303,1591],[302,1590],[301,1584],[302,1583],[304,1574],[305,1570],[307,1562],[310,1562],[312,1556],[313,1553],[314,1550],[316,1545]],
    "neighbors": ["102", "103", "105", "110", "114", "S28"]
  },
  "105": {
    "coords": [[218,1585],[236,1585],[241,1582],[250,1581],[255,1578],[259,1578],[262,1576],[276,1568],[288,1561],[300,1551],[302,1553],[300,1558],[298,1565],[297,1568],[294,1577],[294,1579],[294,1593],[296,1599],[304,1610],[313,1616],[316,1619],[321,1620],[324,1622],[334,1624],[360,1623],[357,1628],[354,1637],[354,1638],[352,1651],[350,1653],[349,1665],[346,1665],[333,1661],[327,1658],[308,1660],[304,1663],[292,1663],[284,1666],[280,1666],[274,1669],[264,1669],[261,1671],[249,1672],[239,1668],[230,1667],[226,1664],[219,1658],[212,1652],[212,1635],[210,1634],[210,1631],[213,1628],[212,1620],[215,1618],[215,1607],[218,1597],[219,1589]],
    "neighbors": ["102", "104", "106", "107", "110", "S33"]
  },
  "106": {
    "coords": [[180,1642],[189,1642],[190,1639],[201,1638],[202,1644],[203,1654],[197,1663],[197,1676],[194,1687],[198,1702],[200,1712],[203,1721],[207,1743],[217,1763],[227,1771],[236,1779],[243,1782],[247,1784],[262,1784],[269,1789],[276,1789],[277,1794],[275,1795],[273,1807],[272,1819],[271,1829],[269,1829],[266,1827],[261,1825],[259,1821],[244,1823],[239,1820],[228,1820],[226,1818],[226,1805],[218,1805],[216,1801],[207,1794],[201,1791],[194,1791],[191,1795],[188,1797],[190,1801],[189,1806],[183,1808],[177,1804],[170,1798],[157,1800],[152,1798],[153,1792],[156,1783],[157,1776],[154,1766],[147,1766],[146,1761],[142,1761],[140,1755],[138,1754],[136,1744],[137,1737],[138,1709],[134,1707],[134,1694],[139,1689],[148,1678],[153,1668],[163,1664],[165,1658],[171,1650],[175,1644]],
    "neighbors": ["105", "107", "108", "S33"]
  },
  "107": {
    "coords": [[211,1663],[217,1665],[220,1666],[228,1671],[237,1674],[244,1678],[264,1677],[275,1676],[283,1673],[297,1670],[310,1669],[323,1668],[329,1669],[342,1671],[347,1675],[346,1692],[347,1707],[353,1717],[341,1717],[329,1721],[314,1728],[301,1740],[289,1753],[286,1766],[280,1777],[277,1779],[272,1777],[266,1773],[251,1776],[246,1773],[238,1773],[230,1767],[226,1763],[221,1752],[218,1745],[215,1736],[211,1731],[211,1719],[208,1718],[207,1707],[204,1704],[205,1673],[208,1674],[207,1665]],
    "neighbors": ["105", "106", "108", "110"]
  },
  "108": {
    "coords": [[288,1784],[292,1780],[292,1770],[296,1761],[302,1752],[310,1742],[325,1730],[335,1724],[348,1724],[352,1725],[359,1731],[362,1738],[368,1744],[372,1754],[378,1756],[372,1761],[371,1771],[370,1791],[372,1803],[375,1817],[377,1822],[378,1835],[381,1839],[382,1852],[383,1852],[382,1870],[381,1876],[381,1892],[377,1896],[377,1906],[371,1908],[368,1904],[356,1904],[350,1908],[343,1912],[339,1910],[336,1902],[337,1898],[340,1896],[337,1889],[327,1887],[325,1884],[330,1877],[335,1874],[336,1863],[334,1862],[330,1859],[324,1858],[322,1862],[314,1864],[314,1858],[308,1851],[302,1850],[296,1848],[295,1852],[284,1852],[279,1852],[278,1849],[275,1847],[275,1841],[278,1839],[278,1830],[282,1829],[281,1819],[281,1808],[285,1809],[285,1794]],
    "neighbors": ["106", "107", "109", "110", "S34"]
  },
  "109": {
    "coords": [[384,1800],[381,1780],[383,1778],[384,1761],[391,1765],[403,1767],[412,1767],[426,1766],[439,1765],[441,1770],[439,1785],[446,1796],[456,1805],[460,1807],[466,1810],[473,1811],[484,1812],[498,1813],[495,1819],[490,1831],[485,1851],[488,1869],[489,1878],[490,1892],[488,1897],[482,1902],[469,1903],[464,1906],[453,1908],[450,1909],[433,1911],[432,1914],[421,1916],[411,1919],[406,1926],[384,1926],[383,1910],[388,1902],[388,1896],[390,1895],[392,1885],[390,1847],[388,1842],[388,1827],[385,1812],[384,1810]],
    "neighbors": ["108", "110", "112", "S34"]
  },
  "110": {
    "coords": [[363,1642],[365,1637],[365,1628],[368,1625],[372,1615],[378,1614],[378,1607],[384,1603],[388,1600],[397,1601],[402,1598],[411,1598],[413,1598],[426,1593],[430,1588],[436,1590],[438,1594],[434,1594],[433,1612],[435,1619],[436,1628],[441,1635],[442,1642],[448,1651],[453,1655],[460,1666],[466,1674],[467,1683],[470,1688],[470,1697],[472,1702],[474,1707],[478,1710],[475,1712],[472,1716],[463,1722],[454,1732],[447,1742],[444,1751],[438,1755],[429,1757],[428,1760],[404,1761],[400,1757],[393,1755],[389,1753],[383,1748],[378,1745],[376,1741],[370,1737],[368,1731],[364,1724],[362,1723],[362,1716],[360,1715],[357,1702],[355,1701],[356,1670],[357,1669],[358,1656],[363,1652],[362,1648]],
    "neighbors": ["104", "105", "107", "108", "109", "111", "112"]
  },
  "111": {
    "coords": [[443,1623],[443,1581],[440,1580],[441,1575],[442,1570],[446,1567],[446,1553],[450,1555],[455,1561],[458,1563],[466,1570],[475,1577],[477,1578],[480,1581],[487,1583],[493,1585],[500,1587],[506,1584],[512,1583],[518,1580],[522,1578],[524,1576],[529,1576],[538,1569],[545,1564],[547,1561],[549,1563],[549,1568],[547,1573],[544,1591],[540,1595],[542,1616],[546,1619],[546,1624],[549,1627],[551,1632],[556,1639],[557,1647],[554,1650],[547,1658],[542,1664],[536,1670],[532,1673],[525,1681],[512,1686],[500,1693],[490,1701],[484,1702],[482,1692],[480,1690],[479,1682],[476,1681],[473,1672],[469,1665],[463,1657],[461,1651],[456,1647],[452,1644],[449,1638],[446,1636]],
    "neighbors": ["110", "112", "113", "114"]
  },
  "112": {
    "coords": [[555,1772],[544,1785],[528,1792],[516,1801],[505,1801],[499,1804],[475,1805],[471,1801],[462,1801],[461,1798],[456,1795],[455,1792],[454,1791],[450,1783],[450,1766],[452,1762],[452,1754],[456,1752],[457,1746],[461,1738],[469,1732],[471,1727],[486,1715],[499,1703],[514,1694],[530,1685],[537,1681],[546,1675],[556,1663],[563,1656],[564,1646],[576,1653],[582,1657],[590,1656],[592,1659],[631,1660],[635,1657],[644,1656],[646,1660],[649,1660],[649,1664],[652,1667],[653,1674],[649,1680],[642,1692],[631,1706],[616,1720],[609,1728],[602,1730],[598,1734],[588,1735],[588,1738],[582,1739],[578,1743],[572,1745],[565,1755]],
    "neighbors": ["109", "110", "111", "113", "S29"]
  },
  "113": {
    "coords": [[664,1619],[644,1626],[639,1634],[635,1642],[633,1643],[632,1648],[625,1648],[620,1653],[613,1652],[607,1649],[589,1650],[583,1647],[577,1645],[569,1641],[563,1631],[558,1630],[558,1623],[556,1621],[555,1603],[555,1586],[557,1584],[559,1560],[553,1556],[552,1552],[557,1548],[561,1543],[563,1534],[567,1533],[569,1522],[570,1521],[571,1497],[567,1494],[567,1489],[571,1491],[577,1492],[604,1492],[609,1488],[622,1488],[632,1488],[635,1485],[659,1484],[660,1491],[657,1499],[657,1512],[663,1527],[677,1531],[688,1533],[698,1535],[709,1536],[713,1538],[729,1539],[730,1542],[741,1544],[744,1552],[744,1565],[749,1570],[745,1575],[741,1578],[734,1582],[722,1583],[716,1587],[706,1597],[694,1607],[690,1611],[686,1615],[678,1615],[676,1618]],
    "neighbors": ["111", "112", "114", "S29", "S28"]
  },
  "114": {
    "coords": [[450,1536],[449,1526],[446,1524],[445,1517],[443,1513],[437,1505],[427,1503],[420,1501],[413,1500],[412,1497],[406,1493],[404,1482],[410,1480],[416,1476],[426,1471],[434,1465],[442,1459],[449,1455],[454,1453],[467,1454],[475,1463],[486,1469],[514,1470],[520,1465],[530,1468],[542,1470],[548,1475],[555,1487],[560,1493],[561,1508],[558,1511],[558,1523],[556,1533],[549,1542],[539,1553],[526,1565],[514,1573],[510,1577],[488,1577],[482,1574],[479,1573],[477,1571],[475,1571],[470,1567],[465,1562],[461,1558],[460,1557],[456,1553]],
    "neighbors": ["104", "111", "113", "S28"]
  },
  "115": {
    "coords": [[756,1449],[750,1445],[749,1424],[753,1422],[758,1414],[761,1412],[767,1410],[776,1404],[787,1400],[789,1396],[791,1395],[793,1390],[801,1388],[803,1386],[808,1385],[811,1381],[823,1381],[825,1378],[834,1378],[833,1374],[845,1374],[845,1378],[848,1384],[849,1396],[845,1397],[843,1403],[839,1406],[841,1419],[851,1428],[855,1436],[853,1441],[851,1446],[844,1449],[835,1454],[824,1460],[815,1465],[798,1474],[793,1479],[783,1481],[777,1484],[769,1487],[759,1490],[751,1487],[749,1472],[753,1471],[753,1466],[757,1466],[755,1456]],
    "extensions": [[[871,1322],[860,1310],[865,1302],[869,1289],[886,1291],[886,1305],[882,1309],[882,1316]]],
    "neighbors": ["S23"]
  },
  "116": {
    "coords": [[514,1982],[501,1973],[500,1962],[499,1961],[498,1954],[500,1953],[500,1951],[507,1948],[512,1945],[515,1945],[519,1941],[524,1940],[525,1936],[529,1936],[537,1934],[541,1930],[546,1927],[561,1929],[571,1931],[582,1931],[589,1933],[610,1935],[614,1937],[624,1938],[624,1940],[631,1943],[639,1949],[638,1957],[635,1965],[631,1970],[629,1980],[631,1992],[634,1997],[634,2004],[632,2008],[627,2012],[624,2020],[619,2022],[605,2022],[587,2020],[582,2013],[574,2011],[567,2003],[564,1998],[558,1991],[553,1988],[543,1987],[533,1989]],
    "neighbors": ["S34"]
  }
};

//add extra fields to each region
for (let r_num=0; r_num < Object.keys(regions_info).length; r_num++) {
  let l_desig = Object.keys(regions_info)[r_num];
  regions_info[l_desig].buildings = [];
  regions_info[l_desig].units = {};
  //units of other nations on land not owned by nation (or not colonized yet by nation)
  //foreign has type similar to building housing
  /*
  {
    "self":{
      "unhoused": [{
        name: "citizen",
        task: false,
        location: {
          region: desig,
          building: "foreign"
        }
      }],
      "numbers": {
        "citizen": 1
      }
    }
  }
  */
  regions_info[l_desig].foreign_units = {};
  regions_info[l_desig].residence_tax = 2;
  regions_info[l_desig].owner = "";
}

//player's nation
let self_nation = {
  name: "",
  slogan: "",
  color: "",
  land_tax: 2,
  wealth: 50,
  supply: 60,
  happiness: 0,
  owned_regions: [],
  construction: [],
  recruitment: [],
  colonization: {},
  //eg, temp increase/decrease in happiness or production due to event
  effects: []
};

//units moving
let unit_movements = {
  /*example:
  "move-id-00001": {
    "type": "colonist",
    "nation": "self",
    "amount": 1,
    "from": "45",
    "to": "46",
    "current": "46",
    "start": 104,
    "end": 155,
    "move_id": "move-id-00001",
    "path": ["45", "46"]
  }
  */
};

//event requirement checking function generators
function event_req_check_gen(event) {
  return function() {
    if (events[event].status === "completed") {
      return true;
    } else {
      return false;
    }
  }
}

function building_req_check_gen(type, desigs) {
  if (desigs === "anywhere") {
    desigs = self_nation.owned_regions;
  }
  return function() {
    for (let i=0; i < desigs.length; i++) {
      let r_bs = regions_info[desigs[i]].buildings;
      for (let ii=0; ii < r_bs.length; ii++) {
        let r_b = r_bs[ii];
        if (r_b.type === type) {
          return true;
        }
      }
    }
    return false;
  };
}

function unit_in_region_foreign_req_check_gen(unit, nation, desig) {
  return function() {
  let fu_nums = regions_info[desig].foreign_units[nation].numbers;
    if (unit === "any") {
      if (fu_nums['citizen'] !== 0 || fu_nums['conscript'] !== 0 || fu_nums['merchant'] !== 0 || fu_nums['colonist'] !== 0) {
        return true;
      }
    } else {
      if (fu_nums[unit] !== 0) {
        return true;
      }
    }
    return false;
  }
}

let event_triggers = {
  //for example, either {next: "adventure-treasure-1-success", desig: "15"} or {next: "adventure-treasure-1-fail", desig: 74}, or false, if unencountered
  //the desig is not required ofc, just additional info
  "adventure-treasure-1": false
};

function trigger_req_check_gen(current_event, previous_event) {
  return function() {
    return event_triggers[previous_event].next === current_event;
  };
}

//break events into sections
let events = {
  //tutorial
  "tutorial-build-a-farm": {
    name: "Tutorial: Build a Farm",
    slug: "tutorial-build-a-farm",
    type: "tutorial",
    text: "The supply stockpiles are starting to run low. Build a farm to ensure steady supply production (click the region, go to construction and build the farm).",
    choices: [
      {text: "Ok.", next: "tutorial-farm-workers", tooltip: "", effects: []},
      {text: "Farm? Our people don't need such luxuries.", next: "", tooltip: [""], effects: []}
    ],
    requirements: [],
    repeatable: false,
    //"unseen", "in progress", "completed", "rejected"
    status: "unseen",
    chance: 1
  },
  "tutorial-farm-workers": {
    name: "Tutorial: Farm Workers",
    slug: "tutorial-farm-workers",
    type: "tutorial",
    text: "Now, assign a citizen to the farm to start producing supply (switch to 'units' view, click citizen, and assign to farm).",
    choices: [
      {text: "Got it.", next: "", tooltip: [], effects: []}
    ],
    requirements: [event_req_check_gen("tutorial-build-a-farm"), building_req_check_gen("farm", "anywhere")],
    repeatable: false,
    status: "unseen",
    chance: 1
  },
  //domestic
  "dirty-streets": {
    name: "Dirty Streets",
    slug: "dirty-streets",
    type: "domestic",
    text: "The streets of [self_nation:name] are filthy! The citizenry are disgusted, and demand cleanliness",
    choices: [
      //if next is an array, randomly choose next from array
      {text: "Hire street cleaners.", next: "", tooltip: ["-5 wealth"], effects: [{type: "wealth", amount: -5}]},
      {text: "Clean up the mess you made! Those who litter will be fined.", next: "", tooltip: ["+5 wealth, -3 happiness for 180 days"], effects: [{type: "wealth", amount: 5}, {type: "happiness", amount: 5, duration : 360}]}
    ],
    requirements: [],
    repeatable: true,
    status: "unseen",
    chance: 0.05,
    //chance to repeat after event has already been done
    second_chance: 0.01
  },
  //adventures!
  "adventure-treasure-1": {
    name: "Treasure?",
    slug: "adventure-treasure-1",
    type: "adventure",
    text: "Rumors about an old treasure hoard in [random_region:unclaimed,close] have reached [self_nation:name]. If the rumors prove true, a great wealth could be ours!",
    choices: [
      //if next is an array, randomly choose next from array
      {text: "Prepare an expedition!", next: ["adventure-treasure-1-success", "adventure-treasure-1-fail"], tooltip: ["Send any unit to the region"], effects: []},
      {text: "Rumors cannot be trusted.", next: "", tooltip: [], effects: [], rejected: true}
    ],
    requirements: [],
    repeatable: true,
    status: "unseen",
    chance: 0.04,
    //chance to repeat after event has already been done
    second_chance: 0.01
  },
  "adventure-treasure-1-success": {
    name: "Treasure Found!",
    slug: "adventure-treasure-1-success",
    type: "adventure",
    text: "The treasure has been found!",
    choices: [
      //if next is an array, randomly choose next from array
      {text: "Good!", next: "", tooltip: ["Gain 50 Wealth"], effects: [{type: "wealth", amount: 50}]}
    ],
    requirements: [trigger_req_check_gen("adventure-treasure-1-success", "adventure-treasure-1"), function() {unit_in_region_foreign_req_check_gen("any", "self", event_triggers["adventure-treasure-1"].desig)()}],
    repeatable: true,
    status: "unseen",
    chance: 1
  },
  "adventure-treasure-1-fail": {
    name: "Treasure Found!",
    slug: "adventure-treasure-1-fail",
    type: "adventure",
    text: "We found... nothing.",
    choices: [
      //if next is an array, randomly choose next from array
      {text: "That's fine, the real treasure was the friends we made along the way!", next: "", tooltip: ["Increase happiness by 5% for a year"], effects: [{type: "happiness", amount: 5, duration : 360}]},
      {text: "What a waste of time.", next: "", tooltip: [""], effects: []}
    ],
    requirements: [trigger_req_check_gen("adventure-treasure-1-fail", "adventure-treasure-1"), function() {unit_in_region_foreign_req_check_gen("any", "self", event_triggers["adventure-treasure-1"].desig)()}],
    repeatable: true,
    status: "unseen",
    chance: 1
  }
  //weather
  //disasters
  //festivals, etc
  //foreign
  //trade
};

//development util functions
/**
 * @param {number[]} jumble
 * @return {string}
 */
function jumble_to_points(jumble) {
  //[1,2,3,4] to [[1,2],[3,4]]
  let points = [];
  for (let i=0; i < jumble.length/2; i++) {
    points.push([jumble[i*2], jumble[i*2+1]]);
  }
  return JSON.stringify(points);
}

function super_mega_fast_forward() {
  clearInterval(window.tick_interval_id);
  window.tick_interval_id = setInterval(tick, 50);
}

class Point {
  /**
   * @param {Canvas} canvas
   * @return {number[]} coords
   * @return {number} radius
   * @return {string} color
   */
  constructor(canvas, coords, radius, color) {
    this.canvas = canvas;
    this.coords = coords;
    this.radius = radius;
    this.color = color;
    this.display = true;
    this.canvas.components.push(this);
  }
  update() {
    if (this.display) {
      let path = new Path2D();
      path.arc(this.coords[0], this.coords[1], this.radius, 0, 2*Math.PI);
      this.canvas.context.fillStyle = this.color;
      this.canvas.context.fill(path);
    }
  }
}

//non dev util functions
function is_mobile() {
  if (navigator.userAgent) {
    let mobile_uas = ["iPhone", "iPad", "iPod", "Mobile Safari", "Android", "Blackberry", "Opera Mini", "IEMobile", "Blackberry", "SamsungBrowser"];
    for (let i=0; i < mobile_uas.length; i++) {
      if (navigator.userAgent.includes(mobile_uas[i])) {
        return true;
      }
    }
  }
  return false;
}

function distance(p1, p2) {
  return Math.round(Math.sqrt((Math.abs(p1[0]-p2[0])**2)+(Math.abs(p1[1]-p2[1])**2)));
}

window.game_is_mobile_device = is_mobile();

//this method is to allow canvas.components to have priorities
//that should make things draw in the order that they should be in, much easier
//for example, a building built after the overlay is initialized should be drawn before the overlay not after
//obviously
/**
 * @param {any} item
 * @param {string} priority
 */
Array.prototype.pushOrder = function(item, priority) {
  //a building, resource, or unit icon on the map. must be above map and below overlay
  if (!canvas) {
    console.error("Array.pushOrder called before canvas initialized?");
    return;
  }
  if (priority === "mapIcon") {
    //so, find overlay and put itself right before it
    let overlay_index = canvas.components.findIndex(element => element.image_url === "/images/nnom_overlay.png" || element.image_url === "/images/nnom_overlay2.png");
    if (overlay_index === -1) {
      //no overlay exists yet
      canvas.components.push(item);
    } else {
      canvas.components.splice(overlay_index, 0, item);
    }
  }
}

//classes
class Canvas {
  /**
   * @param {number[]} size
   * @param {string} id
   */
  constructor(size, id, contextOptions=undefined) {
    this.size = size;
    this.canvas = document.createElement("CANVAS");
    this.canvas.id = id;
    this.canvas.width = size[0];
    this.canvas.height = size[1];
    this.canvas.tabIndex = 1;
    document.body.appendChild(this.canvas);
    this.context = this.canvas.getContext('2d', contextOptions);
    this.components = [];
    this.events = {};
    //this.event_functions is not meant to be read. internal use only
    this.event_functions = {};
    this.frame = 0;
    //modifications
    this.regions = [];
    this.sea = [];
    //unit classes, which are just the images
    this.units = [];
    this.scroll_temp_disabled = true;
    this.keydown_temp_disabled = true;
    this.click_temp_disabled = false;
    this.touchmove_temp_disabled = true;
    this.move_mode = false;
  }
  update() {
    this.frame += 1;
    this.clear();
    for (let i=0; i < this.components.length; i++) {
      this.components[i].update();
    }
  }
  clear() {
    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
  }
  reset() {
    this.components = [];
    document.body.style.cursor = "default";
    //dont forget to remove all event listeners
    for (let i=0; i < Object.keys(this.event_functions).length; i++) {
      let event = Object.keys(this.event_functions)[i];
      let event_function = this.event_functions[event];
      this.canvas.removeEventListener(event, event_function);
    }
    this.event_functions = {};
    this.events = {};
  }
  /**
   * @param {[new (name: string) => any]} object
   * @param {number} new_index
   */
  changeOrder(object, new_index) {
    this.components.splice(new_index, 0, object);
  }
  //new (name: string) => any means any class (eg TextButton)
  /**
   * @param {string} event
   * @param {[new (name: string) => any]} objects
   * @param {boolean} [overwrite=true]
   */
  addEvent(event, objects, overwrite=true) {
    //prevent overwriting
    if (this.events[event] && !overwrite) {
      this.events[event] = [].concat(this.events[event], objects);
    } else if (!this.events[event]) {
      this.events[event] = objects;
      //to make sure multiple event listeners arent added, only add the listener the first time addEvent() is called for event, after a reset/start. simplified; we only need one event listener per event, prevent there being multiple
      //add components to the event separately
      let self = this;
      function canvasEventHandler(e) {
        self.clearDeadEvents();
        let event_items = self.events[event];
        if (!event_items) {
          return;
        }
        for (let i=0; i < event_items.length; i++) {
          let component = event_items[i];
          component[event](e);
        }
        if (e.type === "contextmenu") {
          return false;
        }
      }
      this.canvas.addEventListener(event, canvasEventHandler);
      this.event_functions[event] = canvasEventHandler;
    } else {
      this.events[event] = objects;
    }
  }
  //when components no longer exist, get rid of the events for them too
  clearDeadEvents() {
    for (let i=0; i < Object.keys(this.events).length; i++) {
      let event_name = Object.keys(this.events)[i];
      for (let j=0; j < this.events[event_name].length; j++) {
        let obj = this.events[event_name][j];
        //if component no longer exists
        if (!this.components.includes(obj)) {
          this.events[event_name].splice(j, 1);
        }
      }
    }
  }
}

class DeferLoadImage extends Image {
  constructor(url, load_on, send_loaded_event) {
    super();
    this.url = url;
    this.load_on = load_on;
    this.send_loaded_event = send_loaded_event;
  }
  //custom events
  customimageload(e) {
    if (e.detail[this.load_on]) {
      super.src = this.url;
      if (send_loaded_event) {
        //wait for loaded event from image, then send loaded event
      }
    }
  }
}

class TextButton {
  /**
   * @param {Canvas} canvas
   * @param {[number[], number[][]]} coords
   * @param {string} text
   * @param {string} text_info
   * @param {string} background_color
   * @param {string} text_color
   * @param {string} feedback_text_color
   * @param {boolean} rounded
   * @param {string} border
   * @param {boolean} underline
   * @param {Function} onclick
   * @param {bool} obey_click_temp_disabled
   */
  constructor(canvas, coords, text, text_info, background_color, text_color, feedback_text_color, rounded, border, underline, onclick, obey_click_temp_disabled) {
    this.canvas = canvas;
    //coords is [[text_x, text_y], [[button_top_x, button_top_y], [button_bottom_x, button_bottom_y]]]
    this.coords = coords;
    this.text = text;
    this.text_info = text_info;
    this.background_color = background_color;
    this.text_color = text_color;
    this.feedback_text_color = feedback_text_color;
    this.feedback = false;
    this.rounded = rounded;
    this.border = border;
    this.underline = underline;
    //this.path = undefined;
    this.display = true;
    this.set_cursor = false;
    let self = this;
    this.click_unwrapped = onclick;
    this.obey_ctd = obey_click_temp_disabled;
    this.click = function(e) {
      if (self.obey_ctd) {
        if (canvas.click_temp_disabled) return;
      }
      //check if within coords
      if ((e.offsetX > self.coords[1][0][0] && e.offsetX < self.coords[1][1][0]) && (e.offsetY > self.coords[1][0][1] && e.offsetY < self.coords[1][1][1]) && this.display) {
        //button feedback
        self.feedback = true;
        setTimeout(function() {
          self.feedback = false;
        }, 175);
        //now run given function, pass in optional self parameter
        self.click_unwrapped(self);
      }
    };
    this.mousemove = function(e) {
      if ((e.offsetX > self.coords[1][0][0] && e.offsetX < self.coords[1][1][0]) && (e.offsetY > self.coords[1][0][1] && e.offsetY < self.coords[1][1][1]) && this.display) {
        if (self.obey_ctd) {
          if (canvas.click_temp_disabled) return;
        }
        self.set_cursor = true;
        document.body.style.cursor = "pointer";
        //button feedback
        self.feedback = true;
      } else {
        if (self.set_cursor) {
          self.set_cursor = false;
          document.body.style.cursor = "default";
        }
        self.feedback = false;
      }
    }
    //dont overwrite!
    this.canvas.addEvent("click", [this], false);
    this.canvas.addEvent("mousemove", [this], false);
    this.canvas.components.push(this);
  }
  update() {
    if (!this.display) {
      return;
    }
    //button
    if (this.coords[1] && this.background_color) {
      //draw outline
      //fill
      if (this.rounded) {
        let path = new Path2D();
        //top left corner (arc measures are radians, clockwise)
        path.arc(this.coords[1][0][0]+15, this.coords[1][0][1]+15, 15, Math.PI, 3/2*Math.PI);
        //top right
        path.arc(this.coords[1][1][0]-15, this.coords[1][0][1]+15, 15, 3/2*Math.PI, 2*Math.PI);
        //bottom right
        path.arc(this.coords[1][1][0]-15, this.coords[1][1][1]-15, 15, 0, Math.PI/2);
        //bottom left
        path.arc(this.coords[1][0][0]+15, this.coords[1][1][1]-15, 15, Math.PI/2, Math.PI);
        path.lineTo(this.coords[1][0][0], this.coords[1][0][1]+15);
        this.canvas.context.fillStyle = this.background_color;
        this.canvas.context.fill(path);
        if (this.border) {
          this.canvas.context.strokeStyle = this.border;
          this.canvas.context.stroke(path);
        }
      } else if (this.background_color) {
        //much easier
        if (this.border) {
          this.canvas.context.strokeStyle = this.border;
          this.canvas.context.strokeRect(this.coords[1][0][0], this.coords[1][0][1], this.coords[1][1][0]-this.coords[1][0][0], this.coords[1][1][1]-this.coords[1][0][1]);
        }
        this.canvas.context.fillStyle = this.background_color;
        this.canvas.context.fillRect(this.coords[1][0][0], this.coords[1][0][1], this.coords[1][1][0]-this.coords[1][0][0], this.coords[1][1][1]-this.coords[1][0][1]);
      }
    }
    //text
    if (this.text) {
      if (this.feedback) {
        //change color of text
        this.canvas.context.fillStyle = this.feedback_text_color;
      } else {
        this.canvas.context.fillStyle = this.text_color;
      }
      //playaround with font and font size
      this.canvas.context.font = this.text_info;
      this.canvas.context.fillText(this.text, this.coords[0][0], this.coords[0][1]);
      if (this.underline) {
        let measurement = this.canvas.context.measureText(this.text);
        let line = new Path2D();
        //example: "18px Arial" into 18
        //let text_height = Math.ceil(Number(this.text_info.split("px")[0]));
        //text coordinates are from lower left corner so above not needed
        line.moveTo(this.coords[0][0], this.coords[0][1]+2);
        line.lineTo(this.coords[0][0]+Math.ceil(measurement.width), this.coords[0][1]+2);
        this.canvas.context.strokeStyle = this.text_color;
        if (this.feedback) {
          this.canvas.context.strokeStyle = this.feedback_text_color;
        } else {
          this.canvas.context.strokeStyle = this.text_color;
        }
        this.canvas.context.stroke(line);
      }
    }
  }
}

class ImageButton {
  /**
   * @param {Canvas} canvas
   * @param {number[]} coords
   * @param {number[]} size
   * @param {string} image_url
   * @param {Image} image
   * @param {Function} onclick
   * @param {bool} obey_click_temp_disabled
   */
  constructor(canvas, coords, size, image_url, image, onclick, obey_click_temp_disabled) {
    this.canvas = canvas;
    //upper left corner?
    this.coords = coords;
    this.size = size;
    this.image_url = image_url;
    this.image = image;
    this.obey_ctd = obey_click_temp_disabled;
    this.set_cursor = false;
    this.display = true;
    let self = this;
    this.click = function(e) {
      if (self.obey_ctd) {
        if (canvas.click_temp_disabled) return;
      }
      //check if within coords
      if ((e.offsetX > self.coords[0] && e.offsetX < self.coords[0]+self.size[0]) && (e.offsetY > self.coords[1] && e.offsetY < self.coords[1]+self.size[1]) && this.display) {
        onclick(self);
      }
    }
    this.canvas.addEvent("click", [this], false);
    this.mousemove = function(e) {
      if ((e.offsetX > self.coords[0] && e.offsetX < self.coords[0]+self.size[0]) && (e.offsetY > self.coords[1] && e.offsetY < self.coords[1]+self.size[1]) && this.display) {
        if (self.obey_ctd) {
          if (canvas.click_temp_disabled) return;
        }
        self.set_cursor = true;
        document.body.style.cursor = "pointer";
        //button feedback
      } else {
        if (self.set_cursor) {
          self.set_cursor = false;
          document.body.style.cursor = "default";
        }
      }
    }
    this.canvas.addEvent("mousemove", [this], false);
    this.canvas.components.push(this);
  }
  update() {
    if (!this.display) return;
    if (!this.image) {
      this.image = new Image();
      this.image.src = this.image_url;
    }
    this.canvas.context.drawImage(this.image, this.coords[0], this.coords[1], this.size[0], this.size[1]);
  }
}

class BasicImage {
  /**
   * @param {Canvas} canvas
   * @param {number[]} coords
   * @param {number[]} size
   * @param {string} image_url
   * @param {Image} image
   */
  constructor(canvas, coords, size, image_url, image, onclick) {
    this.canvas = canvas;
    this.coords = coords;
    this.size = size;
    this.image_url = image_url;
    this.image = image;
    this.canvas.components.push(this);
  }
  update() {
    if (!this.image) {
      this.image = new Image();
      this.image.src = this.image_url;
    }
    this.canvas.context.drawImage(this.image, this.coords[0], this.coords[1], this.size[0], this.size[1]);
  }
}

class StaticBackground {
  /**
   * @param {Canvas} canvas
   * @param {image_url} string
   * @param {string} color
   * @param {Image} image
   */
  constructor(canvas, image_url, color, image) {
    this.canvas = canvas;
    this.image_url = image_url;
    this.color = color;
    this.image = image;
    this.canvas.components.push(this);
    this.crop = false;
  }
  update() {
    if (this.image_url) {
      if (!this.image) {
        this.image = new Image();
        this.image.src = this.image_url;
      }
      if (this.crop) {
        this.canvas.context.drawImage(this.image, 0, 0, 1200, 700, 0, 0, this.canvas.canvas.width, this.canvas.canvas.height);
      } else {
        this.canvas.context.drawImage(this.image, 0, 0, this.canvas.canvas.width, this.canvas.canvas.height);
      }
    } else if (this.color) {
      this.canvas.context.fillStyle = this.color;
      this.canvas.context.fillRect(0, 0, this.canvas.canvas.width, this.canvas.canvas.height);
    }
  }
}

class MovingBackground {
  /**
   * @param {Canvas} canvas
   * @param {image_url} string
   * @param {Image} image
   */
  constructor(canvas, image_url, image) {
    this.canvas = canvas;
    this.image_url = image_url;
    this.image = image;
    this.canvas.components.push(this);
  }
  update() {
    if (!this.image) {
      this.image = new Image();
      this.image.src = this.image_url;
    }
    //due to safari bug >:( negative coord images aren't displayed properly
    //https://stackoverflow.com/questions/53470133/html5-canvas-drawimage-safari-12-0-bug-tested-on-ios-12-1-mac-os-mojave
    this.canvas.context.drawImage(this.image, window.gameTranslate[0], window.gameTranslate[1], 1200*window.gameScaleFactor, 700*window.gameScaleFactor, 0, 0, this.canvas.canvas.width, this.canvas.canvas.height);
  }
}

class Modal {
  constructor(canvas, coords, color, rounded, background_opacity, border) {
    this.canvas = canvas;
    this.canvas.scroll_temp_disabled = true;
    this.canvas.keydown_temp_disabled = true;
    this.canvas.click_temp_disabled = true;
    this.canvas.touchmove_temp_disabled = true;
    //[[x, y], [x, y]]
    this.coords = coords;
    this.color = color;
    this.rounded = rounded;
    this.background_opacity = background_opacity;
    this.border = border;
    //members of the modal
    this.members = [];
    this.canvas.components.push(this);
    this.intervals = [];
    //https://stackoverflow.com/questions/4011793/this-is-undefined-in-javascript-class-methods
    this.close = this.close.bind(this);
  }
  close() {
    //reenable map stuff
    this.canvas.scroll_temp_disabled = false;
    this.canvas.keydown_temp_disabled = false;
    this.canvas.click_temp_disabled = false;
    this.canvas.touchmove_temp_disabled = false;
    //set cursor back to normal
    document.body.style.cursor = "default";
    //should also enable canvas onclick and stuff
    //remove self and members
    this.canvas.components = this.canvas.components.filter(function (item) {
      return this !== item && !this.members.includes(item);
    }, this);
    this.intervals.forEach(function(interval) {
      clearInterval(interval);
    });
  }
  update() {
    //disable canvas onclick and stuff
    //greyed out background
    this.canvas.context.fillStyle = "rgba(255, 255, 255, "+String(this.background_opacity)+")";
    this.canvas.context.fillRect(0, 0, this.canvas.canvas.width, this.canvas.canvas.height);
    //actual modal
    if (this.rounded) {
      let path = new Path2D();
      //top left corner (arc measures are radians, clockwise)
      path.arc(this.coords[0][0]+15, this.coords[0][1]+15, 15, Math.PI, 3/2*Math.PI);
      //top right
      path.arc(this.coords[1][0]-15, this.coords[0][1]+15, 15, 3/2*Math.PI, 2*Math.PI);
      //bottom right
      path.arc(this.coords[1][0]-15, this.coords[1][1]-15, 15, 0, Math.PI/2);
      //bottom left
      path.arc(this.coords[0][0]+15, this.coords[1][1]-15, 15, Math.PI/2, Math.PI);
      path.lineTo(this.coords[0][0], this.coords[0][1]+15);
      this.canvas.context.fillStyle = this.color;
      this.canvas.context.fill(path);
      if (this.border) {
        this.canvas.context.strokeStyle = this.border;
        this.canvas.context.stroke(path);
      }
    }
  }
}

/*
class EventModal {
  //
}
*/

/**
 * @param {number[][]} coords
 * @param {number} scale
 */
function scaleCoords(coords, scale) {
  //this scales relative to [0,0]. Maybe do it relative to the center of canvas? Dunno
  //coords: [[x, y], [x, y]]
  let new_coords = [];
  for (let i=0; i < coords.length; i++) {
    new_coords.push([Math.round(coords[i][0]*1/scale), Math.round(coords[i][1]*1/scale)]);
  }
  return new_coords;
}

/**
 * @param {number[][]} coords
 * @param {number} translate
 */
function translateCoords(coords, translate) {
  //coords: [[x, y], [x, y]]
  let new_coords = [];
  for (let i=0; i < coords.length; i++) {
    new_coords.push([coords[i][0]-translate[0], coords[i][1]-translate[1]]);
  }
  return new_coords;
}

//clockwise
function rotateCoord(coord, center, rad) {
  //translate center to origin
  let trans_coord = [coord[0]-center[0], coord[1]-center[1]];
  //rotate
  //x2 = x1 * cos theta - y1 * sin theta
  //y2 = y1 * cos theta + x1 * sin theta
  let rotated_coord = [Math.round(trans_coord[0]*Math.cos(rad) - trans_coord[1]*Math.sin(rad)), Math.round(trans_coord[1]*Math.cos(rad) + trans_coord[0]*Math.sin(rad))];
  //translate center back to normal position
  let retrans_coord = [rotated_coord[0]+center[0], rotated_coord[1]+center[1]];
  return retrans_coord;
}

//find center point of a region
function findAveragePoint(region_desig) {
  let coords = regions_info[region_desig].coords;
  let total_x = 0;
  let total_y = 0;
  for (let i=0; i < coords.length; i++) {
    total_x += coords[i][0];
    total_y += coords[i][1];
  }
  return [Math.round(total_x/coords.length), Math.round(total_y/coords.length)];
}

let game_overlay = new Image();
game_overlay.src = "/images/nnom_overlay.png";
let game_overlay2 = new Image();
game_overlay2.src = "/images/nnom_overlay2.png";

//lower left icons

let settingsImage = new Image();
settingsImage.src = "/images/icons/settings.png";

let logsImage = new Image();
logsImage.src = "/images/icons/logs.png";

let overlay2_objects = [];
function toggleOverlay() {
  //toggles between 9 button overlay and info panel overlay (difference is in lower left corner)
  if (window.gameOverlayObject.image_url === "/images/nnom_overlay.png") {
    window.gameOverlayObject.image_url = "/images/nnom_overlay2.png";
    window.gameOverlayObject.image = game_overlay2;
    //overlay2_objects
    let happiness_display = new Text(canvas, [232, 685], "Happiness: "+String(self_nation.happiness)+"%", "17px Arial", "black", false, 90, "happiness-display");
    overlay2_objects.push(happiness_display);
    //map view
    let left_map_view = new TextButton(canvas, [[373, 605], [[370, 590], [382, 607]]], "‹", "25px Arial", false, "black", "black", false, false, false, function() {
      let current_index = window.game_views.indexOf(window.game_view);
      current_index--;
      if (current_index < 0) {
        current_index = window.game_views.length-1;
      }
      window.game_view = window.game_views[current_index];
      canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"game-view": window.game_view}}));
    }, true);
    overlay2_objects.push(left_map_view);
    let right_map_view = new TextButton(canvas, [[528, 605], [[525, 590], [537, 607]]], "›", "25px Arial", false, "black", "black", false, false, false, function() {
      let current_index = window.game_views.indexOf(window.game_view);
      current_index++;
      if (current_index === window.game_views.length) {
        current_index = 0;
      }
      window.game_view = window.game_views[current_index];
      canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"game-view": window.game_view}}));
    }, true);
    overlay2_objects.push(right_map_view);
    let game_view_text = new Text(canvas, [420, 605], window.game_view, "15px Arial", "black", false, false, "game-view");
    overlay2_objects.push(game_view_text);
    //settings cog
    let settings_btn = new ImageButton(canvas, [160, 653], [65, 38], false, settingsImage, create_settings_modal, true);
    overlay2_objects.push(settings_btn);
    let logs_btn = new ImageButton(canvas, [92, 653], [64, 38], false, logsImage, function() {}, true);
    overlay2_objects.push(logs_btn);
  } else if (window.gameOverlayObject.image_url === "/images/nnom_overlay2.png") {
    window.gameOverlayObject.image_url = "/images/nnom_overlay.png";
    window.gameOverlayObject.image = game_overlay;
    //get rid of overlay2 objects
    canvas.components = canvas.components.filter(function(item) {
      return !overlay2_objects.includes(item);
    });
    overlay2_objects = [];
  }
}

//buildings, units

let settlementImage = new Image();
settlementImage.src = "/images/buildings/settlement.png";

let settlementImage_simp = new Image();
settlementImage_simp.src = "/images/buildings/settlement_simp.png";

let townImage = new Image();
townImage.src = "/images/buildings/town.png";

let townImage_simp = new Image();
townImage_simp.src = "/images/buildings/town_simp.png";

let cityImage = new Image();
cityImage.src = "/images/buildings/city.png";

let cityImage_simp = new Image();
cityImage_simp.src = "/images/buildings/city_simp.png";

let farmImage_simp = new Image();
farmImage_simp.src = "/images/buildings/farm_simp.png";

let citizenImage = new Image();
citizenImage.src = "/images/units/citizen.png";

let colonistImage = new Image();
colonistImage.src = "/images/units/colonist.png";

let conscriptImage = new Image();
conscriptImage.src = "/images/units/conscript.png";

let merchantImage = new Image();
merchantImage.src = "/images/units/merchant.png";

const buildingImages = {
  settlement: settlementImage_simp,
  town: townImage_simp,
  city: cityImage_simp,
  farm: farmImage_simp
}

//just the picture of building on map, not info
class Building {
  //picture of building
  constructor(canvas, region_desig, building_name) {
    this.canvas = canvas;
    this.region_desig = region_desig;
    this.building_name = building_name;
    this.path = new Path2D();
    this.clicked = false;
    this.display = true;
    //text classes and what not that appear in panel on click of building
    this.info_objs = [];
    //calculate coords of where to put
    this.living = ["settlement", "town", "city"];
    let avg_p = findAveragePoint(this.region_desig);
    if (this.living.includes(this.building_name)) {
      this.coords = [[avg_p[0]-30, avg_p[1]-30], [avg_p[0]+30, avg_p[1]+30]];
      if (this.building_name === "settlement") {
        this.buildingImage = settlementImage;
        this.simpBuildingImage = buildingImages.settlement;
      } else if (this.building_name === "town") {
        this.buildingImage = townImage;
        this.simpBuildingImage = buildingImages.town;
      } else if (this.building_name === "city") {
        this.buildingImage = cityImage;
        this.simpBuildingImage = buildingImages.city;
      }
    } else if (this.building_name === "farm") {
      //slightly smaller
      this.coords = [[avg_p[0]-62, avg_p[1]-62], [avg_p[0]-12, avg_p[1]-12]];
      this.buildingImage = buildingImages.farm;
      this.simpBuildingImage = buildingImages.farm;
    }
    //onclick that adds info to bottom left panel, also stops region modal from opening.
    //maybe special cursor?
    this.canvas.addEvent("click", [this], false);
    regions_info[this.region_desig].region_obj.buildings.push(this);
    this.canvas.components.pushOrder(this, "mapIcon");
  }
  click(e) {
    if (this.canvas.click_temp_disabled) {
      return;
    }
    if (this.canvas.context.isPointInPath(this.path, e.offsetX, e.offsetY) && !this.clicked && this.display) {
      toggleOverlay();
      //valid click
      let name = new Text(this.canvas, [370, 605], this.building_name, "18px Arial", "black", false, 180, undefined);
      //check if currently upgrading
      let self = this;
      let self_obj = regions_info[this.region_desig].buildings.filter(function(item) {
        return item.type === self.building_name;
      })[0];
      if (self_obj.currently_upgrading) {
        let upgrade_in_prog = self_nation.construction.filter(function(item) {
          return item.desig == self.region_desig && item.upgrade_of === self.building_name;
        });
        upgrade_in_prog = upgrade_in_prog[0];
        //find out how many days are left in construction
        let remaining_days = upgrade_in_prog.dur-(window.ticks-upgrade_in_prog.start);
        let upgrading1 = new Text(this.canvas, [370, 672], "Now Upgrading", "12px Arial", "black", false, 180, undefined);
        this.info_objs.push(upgrading1);
        let upgrading2 = new Text(this.canvas, [370, 685], String(remaining_days)+"~ Days Left", "12px Arial", "black", false, 180, undefined);
        this.info_objs.push(upgrading2);
      }
      if (this.living.includes(this.building_name)) {
        let housed_units_num = self_obj.homes.length;
        let housed_text = new Text(this.canvas, [370, 627], "Housing: "+String(housed_units_num), "12px Arial", "black", false, 180, undefined);
        this.info_objs.push(housed_text);
      } else if (self_obj.workers !== undefined) {
        let workers = new Text(this.canvas, [370, 627], "Workers: "+String(self_obj.workers), "12px Arial", "black", false, 180, "farm-workers");
        this.info_objs.push(workers);
        //button to assign worker, button to unassign worker
        let parent = this;
        let assign = new TextButton(canvas, [[230, 651], [[227, 632], [327, 657]]], "Assign 1 Worker", "12px Arial", false, "black", "#041616", false, false, false, function(self) {
          //see if available citizen
          //regions_info[this.region_desig]
          let buildings = regions_info[parent.region_desig].buildings;
          let found_citizen = false;
          for (let i=0; i < buildings.length; i++) {
            let building = buildings[i];
            if (building.homes) {
              for (let j=0; j < building.homes.length; j++) {
                if (!building.homes[j].task && building.homes[j].name === "citizen") {
                  //available, give task to citizen
                  found_citizen = true;
                  regions_info[parent.region_desig].buildings[i].homes[j].task = "farm";
                  break;
                }
              }
            }
          }
          if (!found_citizen) {
            //fail message
            self.text = "Failed";
            setTimeout(function() {
              self.text = "Assign 1 Worker";
            }, 500);
            return;
          }
          //add worker
          for (let i=0; i < buildings.length; i++) {
            if (buildings[i].type === "farm") {
              buildings[i].workers += 1;
              self.text = "Success";
              setTimeout(function() {
                self.text = "Assign 1 Worker";
              }, 800);
              canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"farm-workers": "Workers: "+String(self_obj.workers)}}));
              return;
            }
          }
        }, true);
        this.info_objs.push(assign);
        let unassign = new TextButton(canvas, [[230, 681], [[227, 662], [327, 687]]], "Remove 1 Worker", "12px Arial", false, "black", "#041616", false, false, false, function(self) {
          //see if available citizen
          //regions_info[this.region_desig]
          let buildings = regions_info[parent.region_desig].buildings;
          let found_citizen = false;
          for (let i=0; i < buildings.length; i++) {
            let building = buildings[i];
            if (building.homes) {
              for (let j=0; j < building.homes.length; j++) {
                if (building.homes[j].task === "farm" && building.homes[j].name === "citizen") {
                  //remove task
                  found_citizen = true;
                  regions_info[parent.region_desig].buildings[i].homes[j].task = false;
                  break;
                }
              }
            }
          }
          if (!found_citizen) {
            //fail message
            self.text = "Failed";
            setTimeout(function() {
              self.text = "Remove 1 Worker";
            }, 500);
            return;
          }
          //add worker
          for (let i=0; i < buildings.length; i++) {
            if (buildings[i].type === "farm") {
              buildings[i].workers -= 1;
              self.text = "Success";
              setTimeout(function() {
                self.text = "Remove 1 Worker";
              }, 800);
              canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"farm-workers": "Workers: "+String(self_obj.workers)}}));
              return;
            }
          }
        }, true);
        this.info_objs.push(unassign);
      }
      this.info_objs.push(name);
      this.clicked = true;
    } else {
      if (!this.canvas.context.isPointInPath(window.game_overlay_transparent.get_path(), e.offsetX, e.offsetY)) {
        return;
      }
      if (this.clicked) {
        toggleOverlay();
      }
      //this will also trigger if settlement clicked twice. this is intended behavior
      this.clicked = false;
      let self = this;
      this.canvas.components = this.canvas.components.filter(function(value) {
        return !self.info_objs.includes(value);
      });
      this.info_objs = [];
    }
  }
  update() {
    //hide buildings if wrong view
    if (window.game_view !== "buildings" && this.display) {
      this.display = false;
    } else if (window.game_view === "buildings" && !this.display) {
      this.display = true;
    }
    if (!this.display) return;
    let use_image;
    if (window.gameScaleFactor <= 1) {
      use_image = this.buildingImage;
    } else {
      use_image = this.simpBuildingImage;
    }
    let mod_coords = scaleCoords(translateCoords(this.coords, window.gameTranslate), window.gameScaleFactor);
    this.canvas.context.drawImage(use_image, mod_coords[0][0], mod_coords[0][1], mod_coords[1][0]-mod_coords[0][0], mod_coords[1][1]-mod_coords[0][1]);
    //make path
    let path = new Path2D();
    if (this.living.includes(this.building_name)) {
      //center x, center y, radius, start angle, end angle
      //circle path
      path.arc((mod_coords[0][0]+mod_coords[1][0])/2, (mod_coords[0][1]+mod_coords[1][1])/2, (mod_coords[1][0]-mod_coords[0][0])/2, 0, 2*Math.PI);
    } else {
      //square path
      path.moveTo(mod_coords[0][0], mod_coords[0][1]);
      path.lineTo(mod_coords[1][0], mod_coords[0][1]);
      path.lineTo(mod_coords[1][0], mod_coords[1][1]);
      path.lineTo(mod_coords[0][0], mod_coords[1][1]);
      path.lineTo(mod_coords[0][0], mod_coords[0][1]);
    }
    this.path = path;
  }
}

class UnitCard {
  //citizen, colonist, conscript (has 3 subtypes), merchant on the province modal
  /**
   * @param {Canvas} canvas
   * @param {[number[], number, number]} coords
   * @param {string} maintype
   * @param {string} desig
   * @param {string} benefits
   * @param {string} border
   * @param {string[]} text_infos
   */
  constructor(canvas, coords, maintype, desig, border, text_infos) {
    this.canvas = canvas;
    //coords: [[x1, y1], width, height]
    this.coords = coords;
    this.maintype = maintype;
    this.desig = desig;
    this.border = border;
    //[title font, quantity/description font, subtype quantity font]
    this.text_infos = text_infos;
    //switch case for image
    switch (this.maintype) {
      case "citizen":
        this.image = citizenImage;
        break;
      case "colonist":
        this.image = colonistImage;
        break;
      case "conscript":
        this.image = conscriptImage;
        break;
      case "merchant":
        this.image = merchantImage;
        break;
      default:
        //this should never happen
        break;
    }
    this.canvas.components.push(this);
  }
  update() {
    let path = new Path2D();
    path.moveTo(this.coords[0][0], this.coords[0][1]);
    path.lineTo(this.coords[0][0]+this.coords[1], this.coords[0][1]);
    path.lineTo(this.coords[0][0]+this.coords[1], this.coords[0][1]+this.coords[2]);
    path.lineTo(this.coords[0][0], this.coords[0][1]+this.coords[2]);
    path.lineTo(this.coords[0][0], this.coords[0][1]);
    this.canvas.context.strokeStyle = this.border;
    this.canvas.context.stroke(path);
    //show name, image, amount, amount of sub variants
    let middle = [this.coords[0][0]+this.coords[1]/2, this.coords[0][1]+this.coords[2]/2];
    this.canvas.context.fillStyle = "black";
    //name
    this.canvas.context.font = this.text_infos[0];
    let name_width = this.canvas.context.measureText(this.maintype).width;
    this.canvas.context.fillText(this.maintype, middle[0]-name_width/2, this.coords[0][1]+25);
    //image
    this.canvas.context.drawImage(this.image, this.coords[0][0]+15, this.coords[0][1]+15, this.coords[1]-30, this.coords[1]-30);
    //check regions_info for amounts
    let quantity = 0;
    let sub_quantities = {};
    let maintypes_list = ["citizen", "colonist", "conscript", "merchant"];
    let units_list = regions_info[this.desig].units;
    for (let i=0; i < Object.keys(units_list).length; i++) {
      let unit_name = Object.keys(units_list)[i];
      if (unit_name === this.maintype) {
        quantity += units_list[unit_name];
        if (this.maintype === "conscript") {
          sub_quantities["conscript"] = units_list[unit_name];
        }
      } else if (!maintypes_list.includes(this.maintype)) {
        //then this is a subtype, so check to see if we are military
        if (this.maintype === "conscript") {
          quantity += units_list[unit_name];
          sub_quantities[unit_name] = units_list[unit_name];
        }
      }
    }
    //display quantities
    this.canvas.context.font = this.text_infos[1];
    this.canvas.context.fillText("Amount: "+String(quantity), this.coords[0][0]+5, this.coords[0][1]+175);
    if (this.maintype === "conscript") {
      //display sub quantities
      this.canvas.context.font = this.text_infos[2];
      //sub_quantities
      for (let i=0; i < Object.keys(sub_quantities); i++) {
        let subunit_name = Object.keys(sub_quantities)[i];
        let subunit_quantity = sub_quantities[subunit_name];
        this.canvas.context.fillText(subunit_name+": "+String(sub_quantities), this.coords[0][0]+5, this.coords[0][1]+175+(i+1)*11);
      }
    }
    //action row: move, recruit (code not here, but should be done in province modal)
  }
}

function colonizable(nation, desig) {
  //check to see if region already owned
  if (regions_info[desig].owner) {
    return false;
  }
  //check to see if region already being colonized
  if (self_nation.colonization[desig]) {
    return false;
  }
  //region must be adjacent to already owned land, or adjacent to ocean
  let d_neighbors = regions_info[desig].neighbors;
  for (let d=0; d < d_neighbors.length; d++) {
    if (d_neighbors[d].startsWith("S")) {
      return true;
    }
  }
  let borders = [];
  let owned;
  if (nation === "self") {
    owned = self_nation.owned_regions;
  }
  for (let i=0; i < owned.length; i++) {
    let neighbors = regions_info[owned[i]].neighbors;
    for (let j=0; j < neighbors.length; j++) {
      if (!borders.includes(neighbors[j])) {
        borders.push(neighbors[j]);
      }
    }
  }
  if (borders.includes(desig)) {
    return true;
  }
  return false;
}

function sea_accessible_only(desig) {
  let non_sea = regions_info[desig].neighbors.findIndex(function(item) {
    return !item.startsWith("S");
  });
  if (non_sea === -1) {
    return true;
  }
  return false;
}

//find shortest path from region to region, breadth
function pathfind(from, to, sea=false) {
  //if region's only neighbors are sea provs, and unit can't cross sea... well obviously that region is not accessible
  if (sea_accessible_only(to) && !sea) {
    return;
  }
  let checks = [[from]];
  let visited_edges = [];
  //19 layers, but should end way quicker
  for (let i=0; i < 19; i++) {
    let checks_copy = checks;
    for (let j=0; j < checks_copy.length; j++) {
      let edge = checks_copy[j].slice(-1)[0];
      if (visited_edges.includes([edge, checks_copy[j].length])) continue;
      visited_edges.push([edge, checks_copy[j].length]);
      //leave alone if already success
      if (edge === to) continue;
      if (!sea && edge.startsWith("S")) continue;
      //need to make modifications for sea tiles, later
      let neighbors = regions_info[edge].neighbors;
      for (let n=0; n < neighbors.length; n++) {
        let nn = neighbors[n];
        let s = [...checks_copy[j]];
        s.push(nn);
        if (neighbors.length === 1 && nn !== to) {
          //if dead end, don't add
          continue;
        }
        //add to edges
        checks.push(s);
      }
      //remove edge
      checks = checks.filter(function(item) {
        return item.slice(-1)[0] !== edge;
      });
    }
    let solution_found = checks.find(function(item) {return item.slice(-1)[0] === to}) ? true : false;
    if (solution_found) break;
  }
  //remove
  checks = checks.filter(function(item) {
    return item.slice(-1)[0] === to;
  });
  //find and return shortest
  checks.sort(function (a, b) {
    return a.length - b.length;
  });
  return checks[0];
}

/*example:
  "move-id-00001": {
    "type": "colonist",
    "nation": "self",
    "amount": 1,
    "from": "45",
    "to": "46",
    "current": "46",
    "start": 104,
    "end": 155,
    "move_id": "move-id-00001",
    "path": ["45", "46"]
  }
*/

function get_move_id() {
  window.move_ids++;
  let mid = String(window.move_ids);
  //pad
  mid = "0".repeat(5-mid.length)+mid;
  return "move-id-"+mid;
}

function move_unit(nation, type, amount, desig, to, to_path=false, sea=false) {
  //remove
  //add to unit_movements
  let mid = get_move_id();
  if (!to_path) {
    to_path = pathfind(desig, to);
    //failed to generate path
    if (!to_path) {
      return false;
    }
  }
  unit_movements[mid] = {
    "type": type,
    "nation": nation,
    "amount": amount,
    "from": desig,
    "to": to,
    "current": desig,
    "start": window.ticks,
    "end": window.ticks+units_info[type].speed*(to_path.length-1),
    "move_id": mid,
    "path": to_path
  };
  new Unit(canvas, nation, desig, type, mid, false);
  return true;
}

class Unit {
  //picture of unit, like barbarian hordes, or to indicate (military?) presence in region, also its clicks and stuff
  constructor(canvas, nation, region_desig, type, move_id="", foreign=false) {
    this.canvas = canvas;
    //nation/owner
    this.nation = nation;
    //province desig
    this.region_desig = region_desig;
    //unit type
    this.type = type;
    this.move_id = move_id;
    this.foreign = foreign;
    //for now, dont support multiple units in one group
    if (this.type === "citizen") {
      this.image = citizenImage;
    } else if (this.type === "colonist") {
      this.image = colonistImage;
    } else if (this.type === "conscript") {
      //or other military subtype
      this.image = conscriptImage;
    } else if (this.type === "merchant") {
      this.image = merchantImage;
    }
    this.display = true;
    this.clicked = false;
    this.unit_amount = 0;
    this.move_amount = 0;
    this.info_objs = [];
    this.path = new Path2D();
    //register for click and contextmenu
    this.canvas.addEvent("click", [this], false);
    this.canvas.addEvent("customunitmove", [this], false);
    //this.canvas.addEvent("contextmenu", this, false);
    this.canvas.units.push(this);
    this.canvas.components.pushOrder(this, "mapIcon");
  }
  customunitmove(e) {
    //canvas.canvas.dispatchEvent(new CustomEvent("customunitmove", {detail: {"dest": self.desig}}));
    if (this.canvas.move_mode && this.clicked) {
      //move
      let dest_desig = e.detail.dest;
      if ((this.region_desig === dest_desig && !this.foreign && !this.move_id) || this.move_amount === 0) {
        //every customunitmove event comes with a overlay toggle
        //so we need to set clicked to false and clean everything up
        //otherwise the overlay toggle in Unit's `click` will be triggered
        this.clicked = false;
        this.canvas.move_mode = false;
        let self = this;
        this.canvas.components = this.canvas.components.filter(function(value) {
          return !self.info_objs.includes(value);
        });
        this.info_objs = [];
        return;
      }
      let success = move_unit(this.nation, this.type, this.move_amount, this.region_desig, dest_desig);
      if (success) {
        this.clicked = false;
        this.canvas.move_mode = false;
        //get rid of info objs
        let self = this;
        this.canvas.components = this.canvas.components.filter(function(value) {
          return !self.info_objs.includes(value);
        });
        this.info_objs = [];
        //remove unit
        if (this.move_id) {
          unit_movements[this.move_id].amount -= this.move_amount;
          if (unit_movements[this.move_id].amount === 0) {
            delete unit_movements[this.move_id];
            //remove unit card
            this.remove();
          }
        } else if (this.foreign) {
          regions_info[this.region_desig].foreign_units[this.nation].numbers[this.type] -= this.move_amount;
          //is zero or undefined
          if (!regions_info[this.region_desig].foreign_units[this.nation].numbers[this.type]) {
            //remove unit card
            this.remove();
          }
          for (let r=0; r < this.move_amount; r++) {
            //todo: special logic if citizen has task?
            let r_i = regions_info[this.region_desig].foreign_units[this.nation].unhoused.findIndex(function(item) {
              return item.name === self.type;
            });
            let r_unhoused = regions_info[this.region_desig].foreign_units[this.nation].unhoused;
            regions_info[this.region_desig].foreign_units[this.nation].unhoused = [...r_unhoused.slice(0,r_i), ...r_unhoused.slice(r_i+1)];
          }
        } else {
          regions_info[this.region_desig].units[this.type] -= this.move_amount;
          if (regions_info[this.region_desig].units[this.type] === 0) {
            //remove unit card
            this.remove();
          }
          let removed_count = 0;
          //remove from housing
          for (let b=0; b < regions_info[this.region_desig].buildings.length; b++) {
            let building = regions_info[this.region_desig].buildings[b];
            if (!building.homes) continue;
            let b_h = JSON.parse(JSON.stringify(building.homes));
            for (let u=0; u < b_h.length; u++) {
              if (removed_count === this.move_amount) {
                break;
              }
              if (b_h[u].task) {
                continue;
              }
              if (b_h[u].name === this.type) {
                //remove
                let f_i = regions_info[this.region_desig].buildings[b].homes.findIndex(function(item) {
                  return item.name === self.type && !item.task;
                });
                regions_info[this.region_desig].buildings[b].homes.splice(f_i, 1);
                removed_count++;
              }
            }
            if (removed_count === this.move_amount) {
              break;
            }
          }
        }
      }
    }
  }
  click(e) {
    //left (move) click means option to click on map, select region to move to
    if (this.canvas.click_temp_disabled) {
      return;
    }
    if (this.canvas.context.isPointInPath(this.path, e.offsetX, e.offsetY) && !this.clicked && this.display) {
      toggleOverlay();
      this.clicked = true;
      let name = new Text(this.canvas, [370, 605], this.type, "18px Arial", "black", false, 180, undefined);
      this.info_objs.push(name);
      //find amount of units
      let unit_amount = regions_info[this.region_desig].units[this.type];
      if (this.foreign) {
        unit_amount = regions_info[this.region_desig].foreign_units[this.nation].numbers[this.type];
      } else if (this.move_id) {
        let movement_info = unit_movements[this.move_id];
        if (!movement_info) {
          unit_amount = 0;
        } else {
          unit_amount = movement_info.amount;
        }
      }
      this.unit_amount = unit_amount;
      this.move_amount = unit_amount;
      //make sure the units don't have tasks, make them unmovable if so
      if (!this.foreign && !this.move_id) {
        for (let b=0; b < regions_info[this.region_desig].buildings.length; b++) {
          let building = regions_info[this.region_desig].buildings[b];
          if (!building.homes) continue;
          for (let u=0; u < building.homes.length; u++) {
            let housed_unit = building.homes[u];
            if (housed_unit.name === this.type && housed_unit.task) {
              //remove one from move_amount
              this.move_amount -= 1;
            }
          }
        }
      } else if (this.foreign) {
        for (let fu=0; fu < regions_info[this.region_desig].foreign_units["self"].unhoused.length; fu++) {
          let f_unit = regions_info[this.region_desig].foreign_units["self"].unhoused[fu];
          if (f_unit.name === this.type && f_unit.task) {
            this.move_amount -= 1;
          }
        }
      }
      let amount_text = new Text(this.canvas, [370, 627], "Units: "+String(unit_amount), "12px Arial", "black", false, 180, undefined);
      this.info_objs.push(amount_text);
      let owner = this.nation;
      if (owner === "self") {
        owner = self_nation.name+" (you)";
      }
      let owner_text = new Text(this.canvas, [370, 640], "Owner: "+owner, "12px Arial", "black", false, 180, undefined);
      this.info_objs.push(owner_text);
      let moveable_text = new Text(this.canvas, [370, 653], "Movable: "+String(this.move_amount)+"/"+String(this.unit_amount), "12px Arial", "black", false, 180, undefined);
      this.info_objs.push(moveable_text);
      if (this.type === "colonist" && this.nation === "self" && !this.move_id) {
        //check if current region is colonizable, add colonization button
        if (colonizable(this.nation, this.region_desig)) {
          let colonize_button = new TextButton(canvas, [[230, 651], [[227, 632], [327, 657]]], "", "12px Arial", false, "black", "#041616", false, false, false, function() {}, true);
          colonize_button.display = false;
          this.info_objs.push(colonize_button);
          //functions
          let self = this;
          function handle_uncolonize() {
            //remove task
            let busy_co_i = regions_info[self.region_desig].foreign_units["self"].unhoused.findIndex(function(item) {
              return item.task === "colonizing" && item.name === "colonist";
            });
            regions_info[self.region_desig].foreign_units["self"].unhoused[busy_co_i].task = false;
            //remove info
            delete self_nation.colonization[self.region_desig];
            colonize_button.click_unwrapped = handle_colonize;
            colonize_button.text = "Colonize";
          }
          function handle_colonize() {
            //double check to make sure it is still colonizable
            if (colonizable(self.nation, self.region_desig)) {
              //add info
              /*
              {
                "44":  {
                  desig: str,
                  nation: str,
                  start: int,
                  finish: int
                }
              }
              */
              self_nation.colonization[self.region_desig] = {
                desig: self.region_desig,
                nation: "self",
                start: window.ticks,
                finish: window.ticks+units_info.colonist.colonize_base
              };
              //add task
              let free_co_i = regions_info[self.region_desig].foreign_units["self"].unhoused.findIndex(function(item) {
                return !item.task && item.name === "colonist";
              });
              regions_info[self.region_desig].foreign_units["self"].unhoused[free_co_i].task = "colonizing";
            }
            colonize_button.click_unwrapped = handle_uncolonize;
            colonize_button.text = "Stop Colonize";
          }
          if (self_nation.colonization[this.region_desig]) {
            colonize_button.text = "Stop Colonize";
            colonize_button.click_unwrapped = handle_uncolonize;
            colonize_button.display = true;
          } else {
            colonize_button.text = "Colonize";
            colonize_button.click_unwrapped = handle_colonize;
            colonize_button.display = true;
          }
        }
      }
      //don't let the player move the units of other nations... obviously
      if (this.nation === "self") {
        this.canvas.move_mode = true;
        let instructions = new OverlayInstructions(canvas, "You are in Move mode. Left click destination to move unit.", [600, 44], "20px Arial", "white", "green");
        this.info_objs.push(instructions);
      }
    } else {
      if (!this.canvas.context.isPointInPath(window.game_overlay_transparent.get_path(), e.offsetX, e.offsetY)) {
        return;
      }
      if (this.clicked) {
        this.canvas.move_mode = false;
        toggleOverlay();
      }
      //this will also trigger if unit clicked twice. this is intended behavior
      this.clicked = false;
      let self = this;
      this.canvas.components = this.canvas.components.filter(function(value) {
        return !self.info_objs.includes(value);
      });
      this.info_objs = [];
    }
  }
  contextmenu(e) {
    //find amount of units
    //right click click means option to click on map, select unit to merge with/attack
  }
  remove() {
    if (this.clicked) {
      this.clicked = false;
      this.canvas.move_mode = false;
      toggleOverlay();
      let self = this;
      this.canvas.components = this.canvas.components.filter(function(value) {
        return !self.info_objs.includes(value);
      });
      this.info_objs = [];
    }
    this.canvas.units = this.canvas.units.filter(function (item) {
      return this !== item;
    }, this);
    this.canvas.components = this.canvas.components.filter(function (item) {
      return this !== item;
    }, this);
  }
  update() {
    let movement_info = unit_movements[this.move_id];
    if (this.move_id) {
      //remove self if movement info disappears
      if (!movement_info) {
        this.remove();
        return;
      }
      if (movement_info.current !== this.region_desig) {
        this.region_desig = movement_info.current;
      }
    }
    if (window.game_view !== "units" && this.display) {
      this.display = false;
    } else if (window.game_view === "units" && !this.display) {
      this.display = true;
    }
    if (!this.display) return;
    //calculate coords
    let avg_p = findAveragePoint(this.region_desig);
    let coords;
    let center_coord;
    //the images are pretty big
    if (!this.move_id && !this.foreign) {
      if (this.type === "citizen") {
        coords = [[avg_p[0]-28, avg_p[1]-56], [avg_p[0]+28, avg_p[1]+0]];
      } else if (this.type === "colonist") {
        coords = [[avg_p[0]-61, avg_p[1]-28], [avg_p[0]-5, avg_p[1]+25]];
      } else if (this.type === "conscript") {
        //or other military subtype
        coords = [[avg_p[0]+10, avg_p[1]-28], [avg_p[0]+66, avg_p[1]+28]];
      } else if (this.type === "merchant") {
        coords = [[avg_p[0]-28, avg_p[1]+2], [avg_p[0]+28, avg_p[1]+58]];
      }
    } else if (this.foreign) {
      //foreign units
      let base_center_coord = [avg_p[0]+45, avg_p[1]-80];
      let f_index;
      let f_count = 0;
      let f_units_num = 0;
      //find what other foreign units are currently in province, then rotate
      //todo: fix, use foreign_units.numbers instead
      let foreign_u = regions_info[this.region_desig].foreign_units;
      for (let c_num=0; c_num < Object.keys(foreign_u).length; c_num++) {
        let nation = Object.keys(foreign_u)[c_num];
        let nation_f_u = foreign_u[nation];
        if (nation === this.nation) {
          f_index = Object.keys(nation_f_u).indexOf(nation_f_u.numbers[this.type])+f_count;
        }
        f_count += Object.keys(nation_f_u.numbers).length;
      }
      if (!f_index) {
        this.remove();
        return;
      }
      let rotated = rotateCoord(base_center_coord, avg_p, Math.PI/8+f_index*Math.PI/4);
      coords = [[rotated[0]-24, rotated[1]-24], [rotated[0]+24, rotated[1]+24]];
    } else {
      //calculate coords of moving unit
      //find what other moving units are currently in province, then rotate
      let base_center_coord = [avg_p[0], avg_p[1]-80];
      let self = this;
      let moving_in_region = Object.values(unit_movements).filter(function(item) {
        return item.current === self.region_desig;
      });
      let moving_index = moving_in_region.findIndex(function(item) {
        return item.move_id === self.move_id;
      });
      //8 units around the circle possible
      let rotated = rotateCoord(base_center_coord, avg_p, moving_index*Math.PI/4);
      center_coord = rotated;
      coords = [[rotated[0]-24, rotated[1]-24], [rotated[0]+24, rotated[1]+24]];
    }
    if (this.move_id) {
      //draw line from to destination
      let dest_path = new Path2D();
      dest_path.moveTo(...scaleCoords(translateCoords([center_coord], window.gameTranslate), window.gameScaleFactor)[0]);
      dest_path.lineTo(...scaleCoords(translateCoords([avg_p], window.gameTranslate), window.gameScaleFactor)[0]);
      let self = this;
      let remaining_path = movement_info.path.slice(movement_info.path.findIndex(function(item) {return item === self.region_desig})+1);
      for (let i=0; i < remaining_path.length; i++) {
        let new_avg_p = findAveragePoint(remaining_path[i]);
        new_avg_p = scaleCoords(translateCoords([new_avg_p], window.gameTranslate), window.gameScaleFactor)[0];
        dest_path.lineTo(...new_avg_p);
      }
      this.canvas.context.strokeStyle = "black";
      this.canvas.context.lineWidth = 2;
      this.canvas.context.stroke(dest_path);
    }
    //show unit icon
    let mod_coords = scaleCoords(translateCoords(coords, window.gameTranslate), window.gameScaleFactor);
    if (this.clicked) {
      let center_x = Math.round((mod_coords[0][0]+mod_coords[1][0])/2);
      let center_y = Math.round((mod_coords[0][1]+mod_coords[1][1])/2);
      //glow around selected unit
      if (window.settings.gradient) {
        let circle_path = new Path2D();
        circle_path.arc(center_x, center_y, Math.floor(35*1/window.gameScaleFactor), 0, 2*Math.PI);
        let rad_grad = this.canvas.context.createRadialGradient(center_x, center_y, 0, center_x, center_y, Math.floor(26*1/window.gameScaleFactor));
        rad_grad.addColorStop(0, "yellow");
        rad_grad.addColorStop(0.7, "yellow");
        rad_grad.addColorStop(1, "rgba(0,0,0,0)");
        this.canvas.context.fillStyle = rad_grad;
        this.canvas.context.fill(circle_path);
      }
      //yellow line that indicates what region the selected unit is in
      let region_line = new Path2D();
      region_line.moveTo(center_x, center_y);
      region_line.lineTo(...scaleCoords(translateCoords([avg_p], window.gameTranslate), window.gameScaleFactor)[0]);
      this.canvas.context.strokeStyle = "yellow";
      this.canvas.context.lineWidth = 2;
      this.canvas.context.stroke(region_line);
    }
    this.canvas.context.drawImage(this.image, mod_coords[0][0], mod_coords[0][1], mod_coords[1][0]-mod_coords[0][0], mod_coords[1][1]-mod_coords[0][1]);
    //add path for onclick, make hit box smaller than image
    let path = new Path2D();
    //smaller path
    let coords2 = [[coords[0][0]+14, coords[0][1]+2], [coords[1][0]-14, coords[1][1]-2]];
    let mod_coords2 = scaleCoords(translateCoords(coords2, window.gameTranslate), window.gameScaleFactor);
    path.moveTo(mod_coords2[0][0], mod_coords2[0][1]);
    path.lineTo(mod_coords2[1][0], mod_coords2[0][1]);
    path.lineTo(mod_coords2[1][0], mod_coords2[1][1]);
    path.lineTo(mod_coords2[0][0], mod_coords2[1][1]);
    path.lineTo(mod_coords2[0][0], mod_coords2[0][1]);
    this.path = path;
    //small rectangle below representing unit size and country
    if (window.gameScaleFactor <= 1.6) {
      let color;
      if (this.nation === "self") {
        color = self_nation.color;
      }
      let unit_amount = regions_info[this.region_desig].units[this.type];
      if (this.foreign) {
        unit_amount = regions_info[this.region_desig].foreign_units[this.nation].numbers[this.type];
      } else if (this.move_id) {
        let movement_info = unit_movements[this.move_id];
        unit_amount = movement_info.amount;
      }
      let bar_width = unit_amount*5;
      //max width of 40
      if (bar_width > 40) {
        bar_width = 40;
      }
      bar_width = Math.round(bar_width*1/window.gameScaleFactor);
      let bar_height = 5;
      bar_height = Math.round(bar_height*1/window.gameScaleFactor);
      let rect_path = new Path2D();
      let rect_x = Math.round((mod_coords2[1][0]+mod_coords2[0][0])/2-bar_width/2);
      rect_path.rect(rect_x, mod_coords2[1][1]+2, bar_width, bar_height);
      let rect_color = "white";
      if (this.nation === "self") {
        rect_color = self_nation.color;
      }
      this.canvas.context.fillStyle = rect_color;
      this.canvas.context.fill(rect_path);
      this.canvas.context.lineWidth = 1;
      this.canvas.context.strokeStyle = "black";
      this.canvas.context.stroke(rect_path);
    }
  }
}

class Marker {
  //
}

class SeaTile {
  /**
   * @param {Canvas} canvas
   * @param {number[][]} coords
   * @param {string} desig
   */
  constructor(canvas, coords, desig) {
    this.canvas = canvas;
    this.og_coords = coords;
    this.coords = coords;
    this.desig = desig;
    this.path = undefined;
    //color for debug purposes only
    this.color_debug = false;
    this.canvas.components.pushOrder(this, "mapIcon");
    this.canvas.sea.push(this);
  }
  update() {
    //sea tiles don't need to be displayed, they already are on the base map
    this.coords = translateCoords(this.og_coords, window.gameTranslate);
    this.coords = scaleCoords(this.coords, window.gameScaleFactor);
    let path = new Path2D();
    path.moveTo(...this.coords[0]);
    for (let i=1; i < this.coords.length; i++) {
      path.lineTo(...this.coords[i]);
    }
    path.lineTo(...this.coords[0]);
    this.path = path;
    if (this.color_debug) {
      //debug only!
      this.canvas.context.fillStyle = "green";
      this.canvas.context.fill(path);
    }
    return;
  }
}

class Region {
  /**
   * @param {Canvas} canvas
   * @param {number[][]} coords
   * @param {string} color
   * @param {string} desig
   * @param {number[][][]} extensions
   */
  constructor(canvas, coords, color, desig, extensions) {
    this.canvas = canvas;
    //original coords
    this.og_coords = coords;
    this.coords = coords;
    this.color = color;
    //use desig to get object where buildings, units, etc are stored
    this.desig = desig;
    this.paths = [];
    //extensions are array of extra coords. Essentially detaches areas that are still part of the region. In our case its islands and stuff
    this.extensions = extensions
    //building icons on this region
    this.buildings = [];
    //likely, will set onclick and possible mousemove functions externally
    //above should be set depending on scene
    this.canvas.components.pushOrder(this, "mapIcon");
    this.canvas.regions.push(this);
  }
  update() {
    //reset paths
    this.paths = [];
    //this.coords = scaleCoords(this.og_coords, window.gameScaleFactor);
    //this.coords = translateCoords(this.coords, window.gameTranslate);
    //translate, then scale. scale than translate desyncs the background and regions, and is generally inaccurate
    this.coords = translateCoords(this.og_coords, window.gameTranslate);
    this.coords = scaleCoords(this.coords, window.gameScaleFactor);
    let path = new Path2D();
    path.moveTo(...this.coords[0]);
    for (let i=1; i < this.coords.length; i++) {
      path.lineTo(...this.coords[i]);
    }
    path.lineTo(...this.coords[0]);
    this.canvas.context.fillStyle = this.color;
    this.canvas.context.fill(path);
    this.paths.push(path);
    if (this.extensions) {
      //draw extension coords too
      for (let j=0; j < this.extensions.length; j++) {
        let extension_coords = this.extensions[j];
        let modified_extension_coords = scaleCoords(translateCoords(extension_coords, window.gameTranslate), window.gameScaleFactor);
        let extension_path = new Path2D();
        extension_path.moveTo(...modified_extension_coords[0]);
        for (let k=1; k < modified_extension_coords.length; k++) {
          extension_path.lineTo(...modified_extension_coords[k]);
        }
        extension_path.lineTo(...modified_extension_coords[0]);
        this.canvas.context.fillStyle = this.color;
        this.canvas.context.fill(extension_path);
        this.paths.push(extension_path);
      }
    }
  }
  /*
  click() {
    //
  }
  mousemove() {
    //
  }
  */
}

//transparent part of an overlay. anything in path should be interactable, anything outside is part of the overlay.
//if region is under overlay (not in transparent path), it should not be interactable
class OverlayTransparentPath {
  /**
   * @param {number[][]} coords 
   */
  constructor(coords) {
    this.coords = coords;
    let path = new Path2D();
    path.moveTo(...this.coords[0]);
    for (let i=1; i < this.coords.length; i++) {
      path.lineTo(...this.coords[i]);
    }
    path.lineTo(...this.coords[0]);
    this.path = path;
  }
  get_path() {
    return this.path;
  }
}

//a little rectangle thing that will indicate whether time is paused, normal, sped up
class SpeedSelected {
  /**
   * @param {Canvas} canvas 
   * @param {string} speed 
   */
  constructor(canvas, speed) {
    this.canvas = canvas;
    this.speed = speed;
    this.canvas.components.push(this);
  }
  update() {
    let coords;
    if (this.speed === "pause") {
      coords = [[669,533],[672,541],[674,551],[675,555],[676,563],[699,562],[700,534]];
    } else if (this.speed === "normal") {
      coords = [[698,534],[698,563],[725,562],[725,535],[724,534]];
    } else if (this.speed === "fast") {
      coords = [[723,534],[723,562],[762,562],[763,534]];
    }
    let path = new Path2D();
    path.moveTo(...coords[0]);
    for (let i=1; i < coords.length; i++) {
      path.lineTo(...coords[i]);
    }
    path.lineTo(...coords[0]);
    this.canvas.context.fillStyle = "rgba(255, 255, 0, 0.4)";
    this.canvas.context.fill(path);
  }
}

class Text {
  /**
   * @param {Canvas} canvas
   * @param {number[]} coords
   * @param {string} text
   * @param {string} text_info
   * @param {string} color
   * @param {string} stroke_color
   * @param {number} maxwidth
   * @param {string} identity
   */
  constructor(canvas, coords, text, text_info, color, stroke_color, maxwidth, identity) {
    this.canvas = canvas;
    this.coords = coords;
    this.text = text;
    this.text_info = text_info;
    this.stroke_color = stroke_color;
    this.color = color;
    this.maxwidth = maxwidth;
    this.identity = identity;
    if (this.identity) {
      this.canvas.addEvent("customtextchange", [this], false);
      this.canvas.addEvent("customcoordschange", [this], false);
    }
    //this.display should be set from outside
    this.display = true;
    this.shadowBlur = 5;
    this.lineWidth = 10;
    this.canvas.components.push(this);
  }
  customtextchange(text_obj) {
    //if it is "0" then we should let it happen
    if (text_obj.detail[this.identity] !== undefined && text_obj.detail[this.identity] !== false) {
      this.text = text_obj.detail[this.identity];
    }
  }
  customcoordschange(coords_obj) {
    //if text changes, coords may need to change too
    if (coords_obj.detail[this.identity]) {
      this.coords = coords_obj.detail[this.identity];
    }
  }
  update() {
    if (!this.display) {
      return;
    }
    if (this.text === undefined || this.text === false) {
      return;
    }
    this.canvas.context.font = this.text_info;
    //eg: shadow-white
    if (this.stroke_color) {
      if (this.stroke_color.startsWith('shadow-')) {
        if (window.settings.shadow) {
          this.canvas.context.shadowColor = this.stroke_color.split("-")[1];
          this.canvas.context.shadowBlur = this.shadowBlur;
          this.canvas.context.lineWidth = this.lineWidth;
        }
      } else {
        this.canvas.context.strokeStyle = this.stroke_color;
        this.canvas.context.strokeText(this.text, this.coords[0], this.coords[1], this.maxwidth);
      }
    }
    if (this.color) {
      this.canvas.context.fillStyle = this.color;
      if (this.maxwidth) {
        this.canvas.context.fillText(this.text, this.coords[0], this.coords[1], this.maxwidth);
      } else {
        this.canvas.context.fillText(this.text, this.coords[0], this.coords[1]);
      }
    }
    if (this.stroke_color) {
      if (this.stroke_color.startsWith('shadow-')) {
        //reset
        this.canvas.context.shadowBlur = 0;
        this.canvas.context.lineWidth = 1;
      }
    }
  }
}

//instead of one line of text, take in any amount of text
//generate as many lines as needed and have consistent line lengths
//will be used to improve the help page
class Paragraph {
  /**
   * @param {Canvas} canvas
   * @param {string} text
   * @param {string} text_info
   * @param {string} text_color
   * @param {number[]} coord
   * @param {number} max_width
   * @param {bool} identity
   */
  constructor(canvas, text, text_info, text_color, coord, max_width, identity) {
    this.canvas = canvas;
    this.text = text;
    this.text_info = text_info;
    this.text_color = text_color;
    this.coord = coord;
    this.max_width = max_width;
    this.identity = identity;
    if (this.identity) {
      this.canvas.addEvent("customtextchange", [this], false);
    }
    //sets this.lines
    this.calculate_lines();
    this.canvas.components.push(this);
  }
  calculate_lines() {
    let lines = [];
    let line = "";
    this.canvas.context.font = this.text_info;
    let words = this.text.split(" ");
    for (let w=0; w < words.length; w++) {
      line += words[w];
      let width = this.canvas.context.measureText(line).width;
      if (width > this.max_width) {
        //remove last word
        line = line.split(" ").slice(0, -1).join(" ");
        lines.push(line);
        line = words[w];
      }
      if (w === words.length-1) {
        lines.push(line);
        break;
      }
      line += " ";
    }
    this.lines = lines;
  }
  customtextchange(text_obj) {
    if (text_obj.detail[this.identity] !== undefined && text_obj.detail[this.identity] !== false) {
      this.text = text_obj.detail[this.identity];
      this.calculate_lines();
    }
  }
  update() {
    let text_height = Number(this.text_info.split("px")[0]);
    for (let l=0; l < this.lines.length; l++) {
      let line = this.lines[l];
      this.canvas.context.font = this.text_info;
      this.canvas.context.fillStyle = this.text_color;
      this.canvas.context.fillText(line, this.coord[0], this.coord[1] + (text_height+2)*l, this.max_width);
    }
  }
}

//makes more sense for Link to extend TextButton not Text
class Link extends TextButton {
  /**
   * @param {Canvas} canvas
   * @param {string} link
   * @param {number[]} coords
   * @param {string} text
   * @param {string} text_info
   * @param {string} text_color
   * @param {string} feedback_text_color
   * @param {boolean} underline
   */
  constructor(canvas, link, coords, text, text_info, text_color, feedback_text_color, underline) {
    //measure text width, get bounding box
    canvas.context.font = text_info;
    let textWidth = canvas.context.measureText(text).width;
    //get text height
    let textHeight = Number(text_info.split("px")[0]);
    //coords is at bottom left of text 
    let boundingbox = [[coords[0]-5, coords[1]-textHeight-5], [coords[0]+textWidth+5, coords[1]+5]];
    //call new TextButton() essentially
    super(canvas, [coords, boundingbox], text, text_info, false, text_color, feedback_text_color, false, false, underline, function() {
      window.open(link, '_blank');
    });
    this.link = link;
  }
  update() {
    super.update();
  }
}

//displays: 1/4, 2/4, etc etc
class Counter extends Text {
  //
}

//does not include label
class TextInput {
  /**
   * @param {Canvas} canvas
   * @param {[number[], number[][]]} coords
   * @param {string} placeholder
   * @param {string} text_info
   * @param {string} inactive_color
   * @param {string} active_color
   * @param {string} background_color
   * @param {string} border
   * @param {boolean} dotted_border
   * @param {number} max_length
   * @param {string[]?} fb_add
   */
  constructor(canvas, coords, placeholder, text_info, inactive_color, active_color, background_color, border, dotted_border, max_length, fb_add) {
    this.canvas = canvas;
    //coords: [text location: [x, y], [bounding box [x, y], [x, y]]]
    this.coords = coords;
    this.placeholder = placeholder;
    this.current_text = this.placeholder;
    this.text_info = text_info;
    this.inactive_color = inactive_color;
    this.active_color = active_color;
    this.background_color = background_color;
    this.border = border;
    this.dotted_border = dotted_border;
    this.max_length = max_length;
    //front back add: [text to add to front, text to add to back]
    //eg: input is "Queso", fb_add = ["¿", "?"], input output is "¿Queso?" but current_text is just "Queso"
    this.fb_add = fb_add;
    this.active = false;
    let self = this;
    //onclick modify contents
    this.click = function(e) {
      //check if within coords
      if ((e.offsetX > self.coords[1][0][0] && e.offsetX < self.coords[1][1][0]) && (e.offsetY > self.coords[1][0][1] && e.offsetY < self.coords[1][1][1])) {
        //mobile keyboard popup
        if (window.game_is_mobile_device) {
          self.current_text = "";
          self.active = true;
          let prompt_text = prompt();
          if (!prompt_text) {
            self.active = false;
            self.current_text = self.placeholder;
            return;
          }
          self.current_text = prompt_text;
          if (self.max_length) {
            if (self.current_text.length > self.max_length) {
              self.current_text = self.current_text.slice(0, self.max_length);
            }
          }
          if (!self.current_text) {
            self.current_text = self.placeholder;
          }
          self.active = false;
          return;
        }
        if (self.current_text === self.placeholder) {
          self.current_text = "";
        }
        self.active = true;
      } else {
        if (self.current_text === "") {
          self.current_text = this.placeholder;
        }
        self.active = false;
      }
    };
    this.canvas.addEvent("click", [this], false);
    //detect key inputs while active
    this.keydown = function(e) {
      if (self.active) {
        //ignore key press is over max length
        if (e.key === "Backspace" || e.key === "Delete") {
          self.current_text = self.current_text.substring(0, self.current_text.length-1);
        } else {
          if (self.current_text.length >= self.max_length && self.max_length) {
            return;
          }
          if (e.key.length !== 1) {
            return;
          }
          self.current_text += e.key;
        }
      }
    }
    this.canvas.addEvent("keydown", [this], false);
    //onhover pointer
    this.set_cursor = false;
    this.mousemove = function(e) {
      if ((e.offsetX > self.coords[1][0][0] && e.offsetX < self.coords[1][1][0]) && (e.offsetY > self.coords[1][0][1] && e.offsetY < self.coords[1][1][1])) {
        self.set_cursor = true;
        document.body.style.cursor = "text";
        //button feedback
      } else {
        if (self.set_cursor) {
          self.set_cursor = false;
          document.body.style.cursor = "default";
        }
      }
    }
    this.canvas.addEvent("mousemove", [this], false);
    this.canvas.components.push(this);
  }
  update() {
    if (this.background_color) {
      this.canvas.context.fillStyle = this.background_color;
      let width = this.coords[1][1][0]-this.coords[1][0][0];
      let height = this.coords[1][1][1]-this.coords[1][0][1];
      this.canvas.context.fillRect(this.coords[1][0][0], this.coords[1][0][1], width, height);
      if (this.border) {
        if (this.active) {
          this.canvas.context.strokeStyle = this.active_color;
        } else {
          this.canvas.context.strokeStyle = this.inactive_color;
        }
        if (this.dotted_border) {
          this.canvas.context.setLineDash([10, 10]);
        }
        this.canvas.context.strokeRect(this.coords[1][0][0], this.coords[1][0][1], width, height);
        if (this.dotted_border) {
          this.canvas.context.setLineDash([]);
        }
      }
    }
    this.canvas.context.font = this.text_info;
    let maxwidth = this.coords[1][1][0] - this.coords[1][0][0] - (this.coords[0][0]-this.coords[1][0][0]) - 3;
    if (this.active) {
      this.canvas.context.fillStyle = this.active_color;
    } else {
      this.canvas.context.fillStyle = this.inactive_color;
    }
    if (this.fb_add) {
      this.canvas.context.fillText(this.fb_add[0]+this.current_text+this.fb_add[1], this.coords[0][0], this.coords[0][1], maxwidth);
    } else {
      this.canvas.context.fillText(this.current_text, this.coords[0][0], this.coords[0][1], maxwidth);
    }
  }
}

class Slider {
  /**
   * @param {Canvas} canvas
   * @param {[number[], number[]]} coords
   * @param {string[]} points
   * @param {string} default_point
   * @param {string} color
   * @param {string} circle_color
   * @param {string} text_info
   * @param {Function} onchange
   */
  constructor(canvas, coords, points, default_point, color, circle_color, text_info, onchange) {
    this.canvas = canvas;
    //[[start], [end]]
    this.coords = coords;
    this.points = points;
    this.current = default_point;
    this.color = color;
    this.circle_color = circle_color;
    this.text_info = text_info;
    this.onchange = onchange;
    //indicates whether being currently dragged or not
    this.dragging = false;
    //onclick events, drag (onmousedown, onmouseup)
    this.canvas.addEvent("click", [this], false);
    this.canvas.addEvent("mousedown", [this], false);
    this.canvas.addEvent("mouseup", [this], false);
    this.canvas.components.push(this);
  }
  mousedown(e) {
    let p_interval = (this.coords[1][0] - this.coords[0][0])/(this.points.length - 1);
    for (let i=0; i < this.points.length; i++) {
      let p_dist = distance([this.coords[0][0]+(p_interval*i), this.coords[0][1]], [e.offsetX, e.offsetY]);
      if (p_dist < 15) {
        this.dragging = true;
      }
    }
  }
  mouseup(e) {
    if (!this.dragging) return;
    let p_interval = (this.coords[1][0] - this.coords[0][0])/(this.points.length - 1);
    for (let i=0; i < this.points.length; i++) {
      let p_dist = distance([this.coords[0][0]+(p_interval*i), this.coords[0][1]], [e.offsetX, e.offsetY]);
      //if points are less than 15 pixels apart that would be bad. dont do that people!
      if (p_dist < 15) {
        this.current = this.points[i];
        this.onchange(this.current);
      }
    }
  }
  click(e) {
    let p_interval = (this.coords[1][0] - this.coords[0][0])/(this.points.length - 1);
    for (let i=0; i < this.points.length; i++) {
      let p_dist = distance([this.coords[0][0]+(p_interval*i), this.coords[0][1]], [e.offsetX, e.offsetY]);
      //if points are less than 15 pixels apart that would be bad. dont do that people!
      if (p_dist < 15) {
        this.current = this.points[i];
        this.onchange(this.current);
      }
    }
  }
  update() {
    this.canvas.context.fillStyle = this.color;
    this.canvas.context.strokeStyle = this.color;
    this.canvas.context.font = this.text_info;
    //this is the horizontal line where you drag at
    let path = new Path2D();
    path.moveTo(this.coords[0][0], this.coords[0][1]);
    path.lineTo(this.coords[1][0], this.coords[1][1]);
    //change line size?
    this.canvas.context.stroke(path);
    let p_interval = (this.coords[1][0] - this.coords[0][0])/(this.points.length - 1);
    for (let i=0; i < this.points.length; i++) {
      //the little vertical lines indicating where a point is
      let path2 = new Path2D();
      path2.moveTo(this.coords[0][0]+(p_interval*i), this.coords[0][1]-6);
      path2.lineTo(this.coords[0][0]+(p_interval*i), this.coords[0][1]+6);
      this.canvas.context.stroke(path2);
      this.canvas.context.fillText(this.points[i], this.coords[0][0]+(p_interval*i)-3, this.coords[0][1]+20);
    }
    //create circle indicator where the current point is
    let path3 = new Path2D();
    this.canvas.context.fillStyle = this.circle_color;
    path3.arc(this.coords[0][0]+(p_interval*this.points.indexOf(this.current)), this.coords[0][1], 7, 0, 2*Math.PI);
    this.canvas.context.fill(path3);
  }
}

class ProgressBar {
  /**
   * @param {Canvas} canvas
   * @param {[number[], number, number]} coords
   * @param {number} max
   * @param {string?} fill_color
   * @param {string?} border_color
   */
  constructor(canvas, coords, value_function, max, fill_color, border_color) {
    this.canvas = canvas;
    //[[top left corner], width, height]
    this.coords = coords;
    //call this function to get the current value (this way live updates are possible)
    this.value_function = value_function;
    this.max = max;
    this.fill_color = fill_color;
    this.border_color = border_color;
    this.finished = false;
    this.display = true;
    this.canvas.components.push(this);
  }
  update() {
    if (!this.display) return;
    //calculate progress
    let progress = Math.round(this.coords[1]*(this.value_function()/this.max));
    if (progress >= this.coords[1]) {
      progress = this.coords[1];
      this.finished = true;
    }
    //fill
    this.canvas.context.fillStyle = this.fill_color;
    this.canvas.context.fillRect(...this.coords[0], progress, this.coords[2]);
    //outline/border
    this.canvas.context.strokeStyle = this.border_color;
    this.canvas.context.strokeRect(...this.coords[0], this.coords[1], this.coords[2]);
  }
}

//toggles a bool variable
class Toggle {
  /**
   * @param {Canvas} canvas
   * @param {[number[], number[]]} coords
   * @param {Function} get_function
   * @param {Function} change_function
   */
  constructor(canvas, coords, get_function, change_function) {
    this.canvas = canvas;
    this.coords = coords;
    this.get_function = get_function;
    this.change_function = change_function;
    //this.path = new Path2D();
    this.canvas.addEvent("click", [this], false);
    this.canvas.components.push(this);
  }
  click(e) {
    //e.offsetX e.offsetY
    if (this.canvas.context.isPointInPath(this.path, e.offsetX, e.offsetY)) {
      if (this.get_function()) {
        this.change_function(false);
      } else {
        this.change_function(true);
      }
    }
  }
  update() {
    let path = new Path2D();
    path.moveTo(...this.coords);
    //width: 70
    //radius: 15
    path.arc(this.coords[0], this.coords[1]+15, 15, Math.PI/2, Math.PI*3/2);
    path.rect(this.coords[0], this.coords[1], 40, 30)
    path.arc(this.coords[0]+40, this.coords[1]+15, 15, -Math.PI/2, -Math.PI*3/2);
    canvas.context.lineWidth = 3;
    canvas.context.strokeStyle = "black";
    canvas.context.stroke(path);
    if (this.get_function()) {
      canvas.context.fillStyle = "green";
    } else {
      canvas.context.fillStyle = "red";
    }
    this.path = path;
    canvas.context.fill(path);
    //inner circle
    canvas.context.fillStyle = "white";
    let path_inner = new Path2D();
    if (this.get_function()) {
      path_inner.arc(this.coords[0]+40, this.coords[1]+16, 13, 0, Math.PI*2);
    } else {
      path_inner.arc(this.coords[0], this.coords[1]+16, 13, 0, Math.PI*2);
    }
    canvas.context.fill(path_inner);
  }
}

//instructions that appears when for example, unit left clicked on map. instructions would say "click any region to move unit there"
class OverlayInstructions {
  /**
   * @param {Canvas} canvas
   * @param {string} text
   * @param {number[]} coords
   * @param {string} text_info
   * @param {string} color
   * @param {string} background_color
   */
  constructor(canvas, text, coords, text_info, color, background_color) {
    this.canvas = canvas;
    this.text = text;
    //coords: [width, height]
    this.coords = coords;
    this.text_info = text_info;
    this.color = color;
    this.background_color = background_color;
    this.canvas.components.push(this);
  }
  update() {
    //write rect
    let r = new Path2D();
    let start_x = Math.round((1200-this.coords[0])/2);
    //r.rect(start_x, 0, this.coords[0], this.coords[1]);
    r.moveTo(start_x+this.coords[0], this.coords[1]-20);
    r.lineTo(start_x+this.coords[0], 0);
    r.lineTo(start_x, 0);
    r.lineTo(start_x, this.coords[1]-20);
    r.arc(start_x+20, this.coords[1]-20, 20, Math.PI/2, Math.PI);
    r.lineTo(start_x+20, this.coords[1]);
    r.lineTo(start_x+this.coords[0]-20, this.coords[1]);
    r.arc(start_x+this.coords[0]-20, this.coords[1]-20, 20, 0, Math.PI/2);
    this.canvas.context.fillStyle = this.background_color;
    this.canvas.context.fill(r);
    //write text
    this.canvas.context.fillStyle = this.color;
    this.canvas.context.font = this.text_info;
    let textWidth = this.canvas.context.measureText(this.text).width;
    let textHeight = Number(this.text_info.split("px")[0]);
    this.canvas.context.fillText(this.text, start_x+(this.coords[0]-textWidth)/2, (this.coords[1]-textHeight)/2+textHeight);
  }
}

//construction card for build menu. displays building name, description+benefits, image and cost
class ConstructionCard {
  /**
   * @param {Canvas} canvas
   * @param {[number[], number, number]} coords
   * @param {string} name
   * @param {Image} image
   * @param {string} benefits
   * @param {string} description
   * @param {{supply: number, wealth: number, duration: number}} cost
   * @param {[string[], string[], string[], string[]]} text_infos
   * @param {string} background_color
   * @param {string?} border
   * @param {string?} identity
   */
  constructor(canvas, coords, name, image, benefits, description, cost, text_infos, background_color, border, identity) {
    this.canvas = canvas;
    //[[top left corner], width, height]
    this.coords = coords;
    //info
    this.image = image;
    //text
    this.name = name;
    this.benefits = benefits;
    this.description = description;
    //{supply: int, wealth: int, duration: int}
    this.cost = cost;
    //[[font, color], [font, color], [font, color], [font, color]]
    this.text_infos = text_infos;
    //colors
    this.background_color = background_color;
    //[name color, benefit color, description color, cost color]
    this.border = border;
    //use for changing the text
    this.identity = identity;
    //if the building card doesnt represent any building and should be empty
    this.nothing = false;
    this.canvas.components.push(this);
  }
  update() {
    let path = new Path2D();
    path.moveTo(this.coords[0][0], this.coords[0][1]);
    path.lineTo(this.coords[0][0]+this.coords[1], this.coords[0][1]);
    path.lineTo(this.coords[0][0]+this.coords[1], this.coords[0][1]+this.coords[2]);
    path.lineTo(this.coords[0][0], this.coords[0][1]+this.coords[2]);
    path.lineTo(this.coords[0][0], this.coords[0][1]);
    if (this.border) {
      this.canvas.context.strokeStyle = this.border;
      this.canvas.context.stroke(path);
    }
    if (this.background_color) {
      this.canvas.context.fillStyle = this.background_color;
      this.canvas.context.fill(path);
    }
    if (this.nothing) {
      this.canvas.context.font = this.text_infos[0][0];
      this.canvas.context.fillStyle = this.text_infos[0][1];
      let middle = [this.coords[0][0]+this.coords[1]/2, this.coords[0][1]+this.coords[2]/2];
      let name_width = this.canvas.context.measureText("Nothing here").width;
      this.canvas.context.fillText("Nothing here", middle[0]-name_width/2, this.coords[0][1]+this.coords[2]/2);
      return;
    }
    //put name in top center of box
    this.canvas.context.font = this.text_infos[0][0];
    this.canvas.context.fillStyle = this.text_infos[0][1];
    let middle = [this.coords[0][0]+this.coords[1]/2, this.coords[0][1]+this.coords[2]/2];
    let name_width = this.canvas.context.measureText(this.name).width;
    this.canvas.context.fillText(this.name, middle[0]-name_width/2, this.coords[0][1]+25);
    //put image below it (image should be square)
    this.canvas.context.drawImage(this.image, this.coords[0][0]+35, this.coords[0][1]+30, this.coords[1]-70, this.coords[1]-70);
    //benefit text
    //condense this messed up "thing" into a variable so I dont have to see it too much
    let text_y = this.coords[0][1]+30+(this.coords[1]-70)+5;
    this.canvas.context.font = this.text_infos[1][0];
    this.canvas.context.fillStyle = this.text_infos[1][1];
    this.canvas.context.fillText(this.benefits, this.coords[0][0]+10, text_y, this.coords[2]-50);
    //description text
    text_y += Number(this.text_infos[1][0].split("px")[0])+1;
    this.canvas.context.font = this.text_infos[2][0];
    this.canvas.context.fillStyle = this.text_infos[2][1];
    this.canvas.context.fillText(this.description, this.coords[0][0]+10, text_y, this.coords[2]-50);
    //benefits text
    text_y += Number(this.text_infos[2][0].split("px")[0])+1;
    this.canvas.context.font = this.text_infos[3][0];
    this.canvas.context.fillStyle = this.text_infos[3][1];
    this.canvas.context.fillText("Wealth: "+String(this.cost.wealth)+", Supply: "+String(this.cost.supply)+", Build Time: "+String(this.cost.duration), this.coords[0][0]+10, text_y, this.coords[2]-50);
  }
  customtextchange(text_obj) {
    if (text_obj.detail[this.identity]) {
      this.name = text_obj.detail[this.identity].name;
      this.benefits = text_obj.detail[this.identity].benefits;
      this.description = text_obj.detail[this.identity].description;
      this.cost = text_obj.detail[this.identity].cost;
      this.image = text_obj.detail[this.identity].image;
    }
  }
}

//shorthand functions for unit objects
function make_citizen(desig, building_name) {
  add_to_units(desig, "citizen");
  return {
    name: "citizen",
    task: false,
    location: {
      region: desig,
      building: building_name
    }
  };
}

function make_colonist(desig, building_name) {
  add_to_units(desig, "colonist");
  return {
    name: "colonist",
    location: {
      region: desig,
      building: building_name
    }
  };
}

function make_conscript(desig, building_name) {
  add_to_units(desig, "conscript");
  return {
    name: "conscript",
    location: {
      region: desig,
      building: building_name
    }
  };
}

function make_merchant(desig, building_name) {
  add_to_units(desig, "merchant");
  return {
    name: "merchant",
    task: false,
    location: {
      region: desig,
      building: building_name
    }
  };
}

//true is success, false is failed
//don't worry future self, subtypes should be already handled using this system
function convert_units(desig, unit_name, into_unit_name, time) {
  if (regions_info[desig].units[unit_name]) {
    //remove from homes
    let found = false;
    let building_name;
    for (let i=0; i < regions_info[desig].buildings.length; i++) {
      let building = regions_info[desig].buildings[i];
      if (!building.homes) continue;
      //check all
      for (let j=0; j < building.homes.length; j++) {
        let unit = building.homes[i];
        if (unit.task) {
          continue;
        }
        if (unit.name === unit_name) {
          //if (unit.)
          found = true;
          //get rid of it in homes
          regions_info[desig].buildings[i].homes = [...building.homes.slice(0,j), ...building.homes.slice(j+1)];
          //add a placeholder, to ensure things cannot go over capacity
          regions_info[desig].buildings[i].homes.push({
            name: "locked",
            location: {
              region: desig,
              building: building.type
            }
          });
          building_name = building.type;
          break;
        }
      }
    }
    if (!found) {
      return false;
    }
    //remove from list
    regions_info[desig].units[unit_name] -= 1;
    //remove unit from map
    if (regions_info[desig].units[unit_name] === 0) {
      let gone_unit = canvas.units.find(function(item) {
        return item.region_desig === desig && item.type === unit_name && !item.move_id;
      });
      gone_unit.remove();
    }
    self_nation.recruitment.push({
      desig: desig,
      building: building_name,
      from: unit_name,
      to: into_unit_name,
      finish: window.ticks+time
    });
    return true;
  } else {
    return false;
  }
}

let canvas = new Canvas([1200,700], "game-canvas");

function add_to_units(desig, unit_name) {
  if (regions_info[desig].units[unit_name] && regions_info[desig].units[unit_name] !== 0) {
    regions_info[desig].units[unit_name] += 1;
  } else {
    if (window.ticks > 0) {
      let owner = regions_info[desig].owner;
      new Unit(canvas, owner, desig, unit_name);
    }
    regions_info[desig].units[unit_name] = 1;
  }
}

//overlay path for game scene
window.game_overlay_transparent = new OverlayTransparentPath([[24,541],[21,22],[1174,24],[1175,541],[870,542],[869,562],[806,563],[807,531],[664,527],[642,504],[657,473],[640,482],[642,456],[621,441],[615,430],[605,433],[606,442],[582,449],[578,469],[583,479],[569,473],[586,505],[554,531],[550,563],[355,563],[355,545]]);

//requestAnimationFrame(canvas.update)
//12 fps
//increase fps?
setInterval(function() {
  canvas.update();
}, 1000/12);

//preload game map
let background_map = new Image();
background_map.src = "/images/nnommap_big.png";
let affinity_start_background = new Image();
affinity_start_background.src = "/images/modified_affinity_screen.png";
let transparent_selection_map = new Image();
transparent_selection_map.src = "/images/transparent_selection_map.png";

function check_colonization() {
  /*
  {
    "44":  {
      desig: str,
      nation: str,
      start: int,
      finish: int
    }
  }
  */
  for (let i=0; i < Object.keys(self_nation.colonization).length; i++) {
    let c_desig = Object.keys(self_nation.colonization)[i];
    let colonize_info = self_nation.colonization[c_desig];
    if (colonize_info.finish === window.ticks) {
      //colonization successful
      //remove task from colonist
      let c_i = regions_info[c_desig].foreign_units["self"].unhoused.findIndex(function(item) {
        return item.task === "colonizing" && item.name === "colonist";
      });
      regions_info[c_desig].foreign_units["self"].unhoused[c_i].task = false;
      //add to owned
      self_nation.owned_regions.push(c_desig);
      regions_info[c_desig].owner = "self";
      regions_info[c_desig].region_obj.color = self_nation.color;
      //remove colonization info
      delete self_nation.colonization[c_desig];
    }
  }
}

function check_recruitment() {
  /*self_nation.recruitment.push({
    desig: desig,
    building: building_name,
    from: unit_name,
    to: into_unit_name,
    finish: window.ticks+time,
  });*/
  for (let i=0; i < self_nation.recruitment.length; i++) {
    let rec = self_nation.recruitment[i];
    let desig = rec.desig;
    if (rec.finish <= window.ticks) {
      for (let j=0; j < regions_info[desig].buildings.length; j++) {
        let building = regions_info[desig].buildings[j];
        if (building.type === rec.building) {
          let locked_index = building.homes.findIndex(function(item) {
            return item.name === "locked";
          });
          //remove locked
          regions_info[desig].buildings[j].homes = [...building.homes.slice(0,locked_index), ...building.homes.slice(locked_index+1)];
          //add to housing
          if (rec.to === "citizen") {
            regions_info[desig].buildings[j].homes.push(make_citizen(rec.desig, rec.building));
          } else if (rec.to === "colonist") {
            regions_info[desig].buildings[j].homes.push(make_colonist(rec.desig, rec.building));
          } else if (rec.to === "conscript") {
            regions_info[desig].buildings[j].homes.push(make_conscript(rec.desig, rec.building));
          } else if (rec.to === "merchant") {
            regions_info[desig].buildings[j].homes.push(make_merchant(rec.desig, rec.building));
          }
          //remove from recruitment
          self_nation.recruitment = [...self_nation.recruitment.slice(0,i), ...self_nation.recruitment.slice(i+1)];
          break;
        }
      }
    }
  }
}

/*example:
  "move-id-00001": {
    "type": "colonist",
    "nation": "self",
    "amount": 1,
    "from": "45",
    "to": "46",
    "current": "46",
    "start": 104,
    "end": 155,
    "move_id": "move-id-00001",
    "path": ["45", "46"]
  }
*/

function add_to_foreign(desig, nation, unit_name) {
  if (regions_info[desig].foreign_units[nation].numbers[unit_name]) {
    regions_info[desig].foreign_units[nation].numbers[unit_name] += 1;
  } else {
    if (window.ticks > 0) {
      new Unit(canvas, nation, desig, unit_name, false, true);
    }
    regions_info[desig].foreign_units[nation].numbers[unit_name] = 1;
  }
}

function check_movement() {
  for (let i=0; i < Object.keys(unit_movements).length; i++) {
    let mv_info = unit_movements[Object.keys(unit_movements)[i]];
    let unit_speed = units_info[mv_info.type].speed;
    let dur = mv_info.end-mv_info.start;
    let prog = window.ticks-mv_info.start;
    let current_r = mv_info.path[Math.floor(prog/dur*mv_info.path.length)];
    if (dur === 0) {
      current_r = mv_info.to;
    }
    if (mv_info.current !== current_r) {
      unit_movements[Object.keys(unit_movements)[i]].current = current_r;
    }
    //we use >= and not === because in the situation a foreign unit is moving in to housing, it starts and ends at the same tick
    //so we want to make sure the movement ends in the next tick, because not possible to end the same tick due to order of functions called
    if (window.ticks >= mv_info.end) {
      delete unit_movements[Object.keys(unit_movements)[i]];
      //add it to the prov
      //if prov owner is self, find some housing
      let housed = false;
      let homeless_remainder = 0;
      if (regions_info[mv_info.to]) {
        if (regions_info[mv_info.to].owner === "self" && mv_info.nation === "self") {
          //try and find housing
          for (let j=0; j < regions_info[mv_info.to].buildings.length; j++) {
            let building = regions_info[mv_info.to].buildings[j];
            if (building.homes) {
              if (buildings_info[building.type].ho > building.homes.length) {
                for (let a=0; a < mv_info.amount; a++) {
                  add_to_units(mv_info.to, mv_info.type);
                  building.homes.push({
                    name: mv_info.type,
                    task: false,
                    location: {
                      region: mv_info.to,
                      building: building.type
                    }
                  });
                  if (buildings_info[building.type].ho <= building.homes.length) {
                    homeless_remainder = mv_info.amount-(a+1);
                    break;
                  }
                }
                housed = true;
                break;
              }
            }
          }
        }
      }
      //if not owner or if not housing, be foreign unit
      if (!housed || homeless_remainder !== 0) {
        let r_fu = regions_info[mv_info.to].foreign_units;
        if (!r_fu[mv_info.nation]) {
          r_fu[mv_info.nation] = {
            "unhoused": [],
            "numbers": {}
          };
        }
        let homeless_amount = mv_info.amount;
        if (homeless_remainder) {
          homeless_amount = homeless_remainder;
        }
        for (let a=0; a < homeless_amount; a++) {
          regions_info[mv_info.to].foreign_units[mv_info.nation].unhoused.push({
            name: mv_info.type,
            task: false,
            location: {
              region: mv_info.to,
              building: "foreign"
            }
          });
          //add to numbers
          add_to_foreign(mv_info.to, mv_info.nation, mv_info.type);
        }
      }
    }
  }
}

function check_construction() {
  for (let i=0; i < self_nation.construction.length; i++) {
    let c = self_nation.construction[i];
    if (c.start+c.dur < window.ticks) {
      //construction finished
      let prev_b;
      if (c.upgrade_of) {
        //get rid of building this was an upgrade of
        prev_b = regions_info[c.desig].buildings = regions_info[c.desig].buildings.filter(function(building) {
          return building.type === c.upgrade_of && building.currently_upgrading;
        });
        prev_b = prev_b[0];
        regions_info[c.desig].buildings = regions_info[c.desig].buildings.filter(function(building) {
          return building.type !== c.upgrade_of && building.currently_upgrading;
        });
        //get rid of building info text, if any
        //first find the component, to get the list of components that are building info text
        prev_b_component = canvas.components.filter(function(item) {
          return item.region_desig === c.desig && item.building_name === c.upgrade_of;
        });
        prev_b_component = prev_b_component[0];
        //dont bother removing the info text components if there are none, obviously
        if (prev_b_component.info_objs.length > 0) {
          canvas.components = canvas.components.filter(function(value) {
            return !prev_b_component.info_objs.includes(value);
          });
        }
        //remove Building class from components
        canvas.components = canvas.components.filter(function(item) {
          return item.region_desig !== c.desig || item.building_name !== c.upgrade_of;
        });
      }
      let b_add = {
        name: "Unnamed "+c.type,
        type: c.type,
        currently_upgrading: false,
        last_prod: 0
      }
      //remove last prod if not relevant
      //add homes if relevant
      if (["settlement", "town", "city"].includes(c.type)) {
        b_add.homes = [];
        //todo: transfer units if upgraded
        if (["town", "city"].includes(c.type)) {
          b_add.homes = prev_b.homes;
        }
      } else if (["farm"].includes(c.type)) {
        b_add.workers = 0;
      }
      regions_info[c.desig].buildings.push(b_add);
      new Building(canvas, c.desig, c.type);
      //get rid of construction
      self_nation.construction.splice(i, 1);
    }
  }
}

function calculate_happiness() {
  let calculated_happiness = 50;
  for (let i=0; i < self_nation.owned_regions.length; i++) {
    let o_region = regions_info[self_nation.owned_regions[i]];
    let citizens = 0;
    for (let j=0; j < o_region.buildings.length; j++) {
      let o_building = o_region.buildings[j];
      if (buildings_info[o_building.type].ef.hap) {
        //if building has a special effect on happiness (negative or positive)
        calculated_happiness += buildings_info[o_building.type].ef.hap;
      }
      if (o_building.homes) {
        citizens += o_building.homes.filter(function (item) {
          return item.name === "citizen";
        }).length;
      }
    }
    //+1 happiness
    calculated_happiness += citizens;
    //tax rate
    switch (o_region.residence_tax) {
      case 0:
        //no effect on happiness
        break;
      case 1:
        calculated_happiness -= 1;
        break;
      case 2:
        calculated_happiness -= 3;
        break;
      case 3:
        calculated_happiness -= 6;
        break;
      case 4:
        calculated_happiness -= 12;
        break;
      case 5:
        calculated_happiness -= 20;
        break;
      default:
        break;
    }
  }
  //it is a percentage so it cannot go below or above certain levels
  if (calculated_happiness > 100) {
    calculated_happiness = 100;
  } else if (calculated_happiness < 0) {
    calculated_happiness = 0;
  }
  self_nation.happiness = calculated_happiness;
  canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"happiness-display": "Happiness: "+String(self_nation.happiness)+"%"}}));
}

//UNHOUSED_UPKEEP_MULT
//subtract supply for units, and subtract even more for units that are moving, unhoused
function upkeep() {
  //should use .values() instead but w/e
  for (let r=0; r < Object.keys(regions_info).length; r++) {
    let r_info = regions_info[Object.keys(regions_info)[r]];
    if (!r_info.owner) continue;
    //check housed units
    for (let h=0; h < Object.keys(r_info.units).length; h++) {
      let h_name = Object.keys(r_info.units)[h];
      let h_quant = r_info.units[h_name];
      if (r_info.owner === "self") {
        self_nation.wealth -= units_info[h_name].base_upkeep.wealth*h_quant/3;
        self_nation.supply -= units_info[h_name].base_upkeep.supply*h_quant/3;
      }
    }
    //check foreign units
    //cpp. haha
    for (let c=0; c < Object.keys(r_info.foreign_units).length; c++) {
      let n_name = Object.keys(r_info.foreign_units)[c];
      //loop through that country's units
      let unit_numbers = r_info.foreign_units[n_name].numbers;
      for (let cu=0; cu < Object.keys(unit_numbers).length; cu++) {
        let n_unit_name = Object.keys(unit_numbers)[cu];
        let n_unit_num = unit_numbers[n_unit_name];
        if (n_name === "self") {
          self_nation.wealth -= units_info[n_unit_name].base_upkeep.wealth*n_unit_num*UNHOUSED_UPKEEP_MULT/3;
          self_nation.supply -= units_info[n_unit_name].base_upkeep.supply*n_unit_num*UNHOUSED_UPKEEP_MULT/3;
        }
      }
    }
  }
  //check moving units
  for (let m=0; m < Object.keys(unit_movements).length; m++) {
    //move id
    let mid = Object.keys(unit_movements)[m];
    let m_info = unit_movements[mid];
    if (m_info.nation === "self") {
      self_nation.wealth -= units_info[m_info.type].base_upkeep.wealth*m_info.amount*UNHOUSED_UPKEEP_MULT/3;
      self_nation.supply -= units_info[m_info.type].base_upkeep.supply*m_info.amount*UNHOUSED_UPKEEP_MULT/3;
    }
  }
}

function residence_tax_payment(pay_period) {
  for (let i=0; i < self_nation.owned_regions.length; i++) {
    let o_region = regions_info[self_nation.owned_regions[i]];
    let citizens = 0;
    for (let j=0; j < o_region.buildings.length; j++) {
      let o_building = o_region.buildings[j];
      if (o_building.homes) {
        citizens += o_building.homes.filter(function (item) {
          return item.name === "citizen";
        }).length;
      }
    }
    self_nation.wealth += (o_region.residence_tax * citizens) / pay_period;
  }
}

function unit_production() {
  for (let i=0; i < self_nation.owned_regions.length; i++) {
    let o_region = regions_info[self_nation.owned_regions[i]];
    for (let j=0; j < o_region.buildings.length; j++) {
      let o_building = o_region.buildings[j];
      let o_b_info = buildings_info[o_building.type];
      if (o_building.last_prod+o_b_info.per < window.ticks) {
        o_region.buildings[j].last_prod = window.ticks;
        if (o_b_info.pr.ci > 0) {
          //check homes and make sure not full already
          if (o_building.homes.length < o_b_info.ho) {
            o_region.buildings[j].homes.push(make_citizen(self_nation.owned_regions[i], "settlement"));
          }
        }
        if (o_b_info.pr.su > 0) {
          //multiply by amount of citizens working there
          self_nation.supply += o_b_info.pr.su*o_building.workers;
        }
      }
    }
  }
}

function calculate_happiness_contribution(desig) {
  let contrib = 0;
  let o_region = regions_info[desig];
  let citizens = 0;
  for (let j=0; j < o_region.buildings.length; j++) {
    let o_building = o_region.buildings[j];
    if (buildings_info[o_building.type].ef.hap) {
      //if building has a special effect on happiness (negative or positive)
      contrib += buildings_info[o_building.type].ef.hap;
    }
    if (o_building.homes) {
      citizens += o_building.homes.filter(function (item) {
        return item.name === "citizen";
      }).length;
    }
  }
  //+1 happiness for each citizen
  contrib += citizens;
  //tax rate also affects happiness
  switch (o_region.residence_tax) {
    case 0:
      //no effect on happiness
      break;
    case 1:
      contrib -= 1;
      break;
    case 2:
      contrib -= 3;
      break;
    case 3:
      contrib -= 6;
      break;
    case 4:
      contrib -= 12;
      break;
    case 5:
      contrib -= 20;
      break;
    default:
      break;
  }
  return contrib;
}

function calculate_wealth_contribution(desig) {
  let contrib = 0;
  let o_region = regions_info[desig];
  let citizens = 0;
  for (let j=0; j < o_region.buildings.length; j++) {
    let o_building = o_region.buildings[j];
    if (buildings_info[o_building.type].ef.hap) {
      //if building has a special effect on happiness (negative or positive)
      contrib += buildings_info[o_building.type].ef.hap;
    }
    if (o_building.homes) {
      citizens += o_building.homes.filter(function (item) {
        return item.name === "citizen";
      }).length;
    }
  }
  switch (o_region.residence_tax) {
    case 0:
      //no effect on happiness
      break;
    case 1:
      contrib += 1 * citizens;
      break;
    case 2:
      contrib += 2 * citizens;
      break;
    case 3:
      contrib += 3 * citizens;
      break;
    case 4:
      contrib += 4 * citizens;
      break;
    case 5:
      contrib += 5 * citizens;
      break;
    default:
      break;
  }
  return contrib;
}

function tick() {
  //1 second = 1 day
  //update time
  //apparently js ints are accurate up to 15 digits, so with 1 tick a second, should not overflow or be inaccurate
  window.ticks++;
  //tax payments every season
  residence_tax_payment(90);
  unit_production();
  check_construction();
  check_recruitment();
  check_colonization();
  check_movement();
  if (window.ticks%5 === 0) {
    calculate_happiness();
  }
  //once every 15 days, but upkeep amounts are every half season (45 days)
  if (window.ticks%15 === 0) {
    upkeep();
  }
  canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"wealth-counter": Math.floor(self_nation.wealth)}}));
  canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"supply-counter": Math.floor(self_nation.supply)}}));
  let years = Math.floor(window.ticks/360);
  let seasons = Math.floor((window.ticks - years*360) / 90);
  let days = ((window.ticks - years*360) - seasons*90);
  let season_names = ["Planting", "Sun", "Harvest", "Rain"];
  let tick_date_change = new CustomEvent("customtextchange", {detail: {
    "clock-year": "Year "+String(years),
    "clock-season": season_names[seasons],
    "clock-day": "Day "+String(days)
  }});
  canvas.canvas.dispatchEvent(tick_date_change);
  //only emit coords change when new season
  if (days === 0) {
    canvas.context.font = "16px Arial";
    let season_text_width = canvas.context.measureText(season_names[seasons]).width;
    let tick_season_coords_change = new CustomEvent("customcoordschange", {detail: {
      "clock-season": [Math.floor(canvas.canvas.width/2-season_text_width/2+15), 560]
    }});
    canvas.canvas.dispatchEvent(tick_season_coords_change);
  }
}

function game_help_button() {
  window.open("/?go_to=help", '_blank');
}

let speed_selected_indicator;

function game_pause_button() {
  speed_selected_indicator.speed = "pause";
  clearInterval(window.tick_interval_id);
  window.tick_interval_id = undefined;
}

function fast_forward_button() {
  speed_selected_indicator.speed = "fast";
  clearInterval(window.tick_interval_id);
  window.tick_interval_id = setInterval(tick, 167);
}

function normal_speed_button() {
  speed_selected_indicator.speed = "normal";
  clearInterval(window.tick_interval_id);
  window.tick_interval_id = setInterval(tick, 667);
}

function get_buildable_buildings(desig) {
  //iterate through buildings and add the upgrades, and not built
  let buildable = [];
  let region_buildings = regions_info[desig].buildings;
  for (let i=0; i < region_buildings.length; i++) {
    let upgrades = buildings_info[region_buildings[i].type].upgrades;
    for (let j=0; j < upgrades.length; j++) {
      let upgradable_building = buildings_info[upgrades[j]];
      if (!upgradable_building) continue;
      buildable.push({
        name: upgrades[j],
        image: buildingImages[upgrades[j]],
        benefits: upgradable_building.benefits,
        description: upgradable_building.description,
        cost: {
          duration: upgradable_building.dur,
          wealth: upgradable_building.co.wealth,
          supply: upgradable_building.co.supply
        },
        upgrade_of: region_buildings[i].type
      });
    }
  }
  let region_building_names = region_buildings.map(item => item.type);
  for (let j=0; j < Object.keys(buildings_info).length; j++) {
    let building_name = Object.keys(buildings_info)[j];
    let building_info = buildings_info[building_name];
    //not an upgrade of something else
    if (!building_info.from) {
      //make sure building isn't already built
      if (!region_building_names.includes(building_name)) {
        //add
        buildable.push({
          name: building_name,
          image: buildingImages[building_name],
          benefits: building_info.benefits,
          description: building_info.description,
          cost: {
            duration: building_info.dur,
            wealth: building_info.co.wealth,
            supply: building_info.co.supply
          }
        });
      }
    }
  }
  //placeholder for now
  /*return [{
    //name, image, benefits, description, cost
    name: "settlement",
    image: settlementImage_simp,
    benefits: "Homes 3 units.",
    description: "A small settlement just getting started.",
    cost: {
      duration: 50,
      wealth: 25,
      supply: 75
    }
  }];*/
  return buildable;
}

//options is an optional dict with "goto" (section to jump to) and maybe "filter" (filter for units)
/**
 * @param {string} desig
 */
function create_region_modal(desig, options) {
  let player_owned_region = regions_info[desig].owner === "self";
  let region_obj = regions_info[desig];
  //actual modal
  let region_modal = new Modal(canvas, [[100, 100], [canvas.canvas.width-100, canvas.canvas.height-100]], "white", true, 0.7, "black");
  //close button
  let close_button = new TextButton(canvas, [[region_modal.coords[1][0]-47, region_modal.coords[0][1]+47], [[region_modal.coords[1][0]-50, region_modal.coords[0][1]+10], [region_modal.coords[1][0]-10, region_modal.coords[0][1]+50]]], "x", "34px Arial", false, "black", "#041616", false, false, true, region_modal.close, false);
  region_modal.members.push(close_button);
  //section functions
  let current_section = [];
  function clear_current_section() {
    region_modal.intervals.forEach(function(interval) {
      clearInterval(interval);
    });
    region_modal.intervals = [];
    canvas.components = canvas.components.filter(function (item) {
      return !current_section.includes(item);
    });
    region_modal.members = region_modal.members.filter(function (item) {
      return !current_section.includes(item);
    });
    current_section = [];
  }
  function switch_to_overview() {
    clear_current_section();
    let r_info = regions_info[desig];
    //new Text(canvas, coords, text, text_info, color, stroke_color, maxwidth, identity)
    //owner, neighbors (with "link"?)
    if (self_nation.owned_regions.includes(desig)) {
      let owner_text = new Text(canvas, [325, 205], "Owner: "+self_nation.name+" (you)", "22px Arial", "black", false, 675, undefined);
      current_section.push(owner_text);
      region_modal.members.push(owner_text);
    }
    //"Neighbours: "+r_info.neighbors.join(", ")
    let owner_text = new Text(canvas, [325, 230], "Neighbours: "+r_info.neighbors.join(", "), "22px Arial", "black", false, 675, undefined);
    current_section.push(owner_text);
    region_modal.members.push(owner_text);
    //supply, wealth, happiness contribution
    let ha_contrib = new Text(canvas, [325, 255], "Region's Net Happiness Contribution: "+String(calculate_happiness_contribution(desig)), "22px Arial", "black", false, 675, undefined);
    current_section.push(ha_contrib);
    region_modal.members.push(ha_contrib);
    let we_contrib = new Text(canvas, [325, 280], "Region's Net Wealth Contribution: "+String(calculate_wealth_contribution(desig)), "22px Arial", "black", false, 675, undefined);
    current_section.push(we_contrib);
    region_modal.members.push(we_contrib);
    //units
    //buildings
    //regions_info.buildings
    //resources
  }
  function switch_to_construct() {
    function construct_fail(btn) {
      let og_bc = btn.background_color;
      btn.background_color = "red";
      setTimeout(function() {
        btn.background_color = og_bc;
      }, 150);
      setTimeout(function() {
        btn.background_color = "red";
      }, 300);
      setTimeout(function() {
        btn.background_color = og_bc;
      }, 450);
    }
    function construct_success(btn) {
      let og_bc = btn.background_color;
      btn.background_color = "green";
      setTimeout(function() {
        btn.background_color = og_bc;
      }, 200);
    }
    //buildings
    clear_current_section();
    let buildable_buildings = get_buildable_buildings(desig);
    /*
    if (buildable_buildings.length === 0) {
      //
      return;
    }
    */
    let construction_index = 0; //and construction_index+1
    //buildable_buildings[construction_index]
    let cc1_b = buildable_buildings[construction_index];
    let cc1;
    if (!cc1_b) {
      cc1 = new ConstructionCard(canvas, [[450, 200], 230, 260], undefined, undefined, undefined, undefined, undefined, [["22px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"]], "lightblue", "black", "cc1");
      cc1.nothing = true;
    } else {
      cc1 = new ConstructionCard(canvas, [[450, 200], 230, 260], cc1_b.name, cc1_b.image, cc1_b.benefits, cc1_b.description, cc1_b.cost, [["22px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"]], "lightblue", "black", "cc1");
    }
    current_section.push(cc1);
    region_modal.members.push(cc1);
    let cc2_b = buildable_buildings[construction_index+1];
    let cc2;
    if (!cc2_b) {
      cc2 = new ConstructionCard(canvas, [[700, 200], 230, 260], undefined, undefined, undefined, undefined, undefined, [["22px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"]], "lightblue", "black", "cc2");
      cc2.nothing = true;
    } else {
      cc2 = new ConstructionCard(canvas, [[700, 200], 230, 260], cc2_b.name, cc2_b.image, cc2_b.benefits, cc2_b.description, cc2_b.cost, [["22px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"], ["16px Arial", "black"]], "lightblue", "black", "cc2");
    }
    current_section.push(cc2);
    region_modal.members.push(cc2);
    //construct buttons
    //"gold"
    let buy_cc1 = new TextButton(canvas, [[550, 495], [[500, 470], [635, 505]]], "Buy", "22px Arial", "#dbbe1a", "#efe8ee", "white", true, "black", false, function(self){
      //nothing should be bought if cc1 is empty... obviously
      if (cc1.nothing) {
        return;
      }
      //make sure construction of this is not already happening
      let items = self_nation.construction.filter(function(item) {
        return item.desig === desig && item.type === cc1_b.name
      });
      if (items.length !== 0) {
        //construction is already happening
        construct_fail(self);
        return;
      }
      items = region_obj.buildings.filter(function(item) {
        return item.type === cc1_b.upgrade_of;
      });
      if (items.length !== 0) {
        if (items[0].currently_upgrading) {
          //construction is already happening
          construct_fail(self);
          return;
        }
      }
      //check supply and wealth
      let cc1_cost = cc1.cost;
      if (self_nation.wealth < cc1_cost.wealth) {
        construct_fail(self);
        return;
      } else if (self_nation.supply < cc1_cost.supply) {
        construct_fail(self);
        return;
      }
      //subtract supply and wealth
      self_nation.wealth = self_nation.wealth - cc1_cost.wealth;
      self_nation.supply -= cc1_cost.supply;
      //add to construction queue
      let add_to_queue = {
        type: cc1_b.name,
        start: window.ticks,
        dur: cc1_cost.duration,
        desig: desig
      };
      //ternary operator
      add_to_queue.upgrade_of = cc1_b.upgrade_of ? cc1_b.upgrade_of : false;
      self_nation.construction.push(add_to_queue);
      //modify current building to currently_upgrading = true
      if (cc1_b.upgrade_of) {
        let upgrading_index = regions_info[desig].buildings.findIndex(function (item) {
          return item.type === cc1_b.upgrade_of;
        });
        region_obj.buildings[upgrading_index].currently_upgrading = true;
      }
      construct_success(self);
    }, false);
    current_section.push(buy_cc1);
    region_modal.members.push(buy_cc1);
    let buy_cc2 = new TextButton(canvas, [[800, 495], [[750, 470], [885, 505]]], "Buy", "22px Arial", "#dbbe1a", "#efe8ee", "white", true, "black", false, function(self){
      //nothing should be bought if cc2 is empty... obviously
      if (cc2.nothing) {
        return;
      }
      //make sure construction of this is not already happening
      let items = self_nation.construction.filter(function(item) {
        return item.desig === desig && item.type === cc2_b.name
      });
      if (items.length !== 0) {
        //construction is already happening
        construct_fail(self);
        return;
      }
      items = region_obj.buildings.filter(function(item) {
        return item.type === cc2_b.upgrade_of;
      });
      if (items.length !== 0) {
        if (items[0].currently_upgrading) {
          //construction is already happening
          construct_fail(self);
          return;
        }
      }
      //check supply and wealth
      let cc2_cost = cc2.cost;
      if (self_nation.wealth < cc2_cost.wealth) {
        construct_fail(self);
        return;
      } else if (self_nation.supply < cc2_cost.supply) {
        construct_fail(self);
        return;
      }
      //subtract supply and wealth
      self_nation.wealth = self_nation.wealth - cc2_cost.wealth;
      self_nation.supply -= cc2_cost.supply;
      //add to construction queue
      let add_to_queue = {
        type: cc2_b.name,
        start: window.ticks,
        dur: cc2_cost.duration,
        desig: desig
      };
      //ternary operator
      add_to_queue.upgrade_of = cc2_b.upgrade_of ? cc2_b.upgrade_of : false;
      self_nation.construction.push(add_to_queue);
      //modify current building to currently_upgrading = true
      if (cc2_b.upgrade_of) {
        let upgrading_index = regions_info[desig].buildings.findIndex(function (item) {
          return item.type === cc2_b.upgrade_of;
        });
        region_obj.buildings[upgrading_index].currently_upgrading = true;
      }
      construct_success(self);
    }, false);
    current_section.push(buy_cc2);
    region_modal.members.push(buy_cc2);
    //left, right
    let left_btn = new TextButton(canvas, [[400, 330], [[385, 275], [415, 340]]], "‹", "60px Arial", false, "black", "#041616", false, false, false, function() {
      if (Object.keys(buildable_buildings).length > 2) {
        //if 2 or less, no need for pagination
        construction_index += 2;
        if (construction_index > Object.keys(buildable_buildings).length-1) {
          //loop back to 0
          construction_index = 0;
        }
        //change cc1_b, cc2_b, and then emit a customtextchange to change construction card text
        cc1_b = buildable_buildings[construction_index];
        cc2_b = buildable_buildings[construction_index+1];
        canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {
          "cc1": {
            name: cc1_b.name,
            benefits: cc1_b.benefits,
            description: cc1_b.description,
            cost: cc1_b.cost,
            image: cc1_b.image
          }
        }}));
        canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {
          "cc2": {
            name: cc2_b.name,
            benefits: cc2_b.benefits,
            description: cc2_b.description,
            cost: cc2_b.cost,
            image: cc1_b.image
          }
        }}));
      }
    }, false);
    current_section.push(left_btn);
    region_modal.members.push(left_btn);
    let right_btn = new TextButton(canvas, [[955, 330], [[940, 275], [970, 340]]], "›", "60px Arial", false, "black", "#041616", false, false, false, function() {
      if (Object.keys(buildable_buildings).length > 2) {
        //if 2 or less, no need for pagination
        construction_index -= 2;
        if (construction_index < 0) {
          //loop forward to end
          if (Object.keys(buildable_buildings).length%2 === 0) {
            //even
            construction_index = Object.keys(buildable_buildings).length-2;
          } else {
            //odd
            construction_index = Object.keys(buildable_buildings).length-1;
          }
        }
        //change cc1_b, cc2_b, and then emit a customtextchange to change construction card text
        cc1_b = buildable_buildings[construction_index];
        cc2_b = buildable_buildings[construction_index+1];
        canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {
          "cc1": {
            name: cc1_b.name,
            benefits: cc1_b.benefits,
            description: cc1_b.description,
            cost: cc1_b.cost,
            image: cc1_b.image
          }
        }}));
        canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {
          "cc2": {
            name: cc2_b.name,
            benefits: cc2_b.benefits,
            description: cc2_b.description,
            cost: cc2_b.cost,
            image: cc1_b.image
          }
        }}));
      }
    }, false);
    current_section.push(right_btn);
    region_modal.members.push(right_btn);
  }
  function switch_to_taxes() {
    clear_current_section();
    //residence tax is based on citizens and merchants
    let r_tax_h_effect = {
      "0": "-0",
      "1": -1,
      "2": -3,
      "3": -6,
      "4": -12,
      "5": -20
    };
    let r_tax_header = new Text(canvas, [345, 240], "Residence Tax", "26px Arial", "black", false, false, undefined);
    current_section.push(r_tax_header);
    region_modal.members.push(r_tax_header);
    let r_tax_slider = new Slider(canvas, [[350, 275], [canvas.canvas.width-200, 275]], ["0", "1", "2", "3", "4", "5"], String(region_obj.residence_tax), "gray", "black", "12px Arial", function(new_value) {
      region_obj.residence_tax = Number(new_value);
      canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"rt-effect-text": "Effect: "+r_tax_h_effect[String(new_value)]+" happiness"}}));
    });
    current_section.push(r_tax_slider);
    region_modal.members.push(r_tax_slider);
    let rt_effect_text = new Text(canvas, [350, 325], "Effect: "+String(r_tax_h_effect[String(region_obj.residence_tax)])+" happiness", "18px Arial", "Black", false, false, "rt-effect-text");
    current_section.push(rt_effect_text);
    region_modal.members.push(rt_effect_text);
  }
  function switch_to_units() {
    function unit_move_modal() {
      //
    }
    function unit_recruit_modal(type) {
      region_modal.close();
      //create new modal
      let recruit_modal = new Modal(canvas, [[300, 150], [canvas.canvas.width-300, canvas.canvas.height-150]], "white", true, 0.7, "black");
      //modal children
      let close_button = new TextButton(canvas, [[recruit_modal.coords[1][0]-47, recruit_modal.coords[0][1]+47], [[recruit_modal.coords[1][0]-50, recruit_modal.coords[0][1]+10], [recruit_modal.coords[1][0]-10, recruit_modal.coords[0][1]+50]]], "x", "34px Arial", false, "black", "#041616", false, false, true, recruit_modal.close, false);
      recruit_modal.members.push(close_button);
      //
      //show options
      let title = new Text(canvas, [325, 200], "", "27px Arial", "black", false, 400, undefined);
      if (type === "citizen") {
        //conscript, merchant, colonist to citizen (military subtypes cannot be converted to citizen)
        title.text = "Recruit Citizen";
        let tip = new Text(canvas, [325, 220], "tip: settlement chain buildings will produce citizens as long as there is available housing", "12px Arial", "black", false, 500, undefined);
        recruit_modal.members.push(tip);
        //conscript
        let from_conscript = new TextButton(canvas, [[330, 250], [[325, 230], [490, 260]]], "Convert from Conscript", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function(self) {
          let success = convert_units(desig, "conscript", "citizen", units_info.citizen.convert_into);
          if (success) {
            let og_text = self.text;
            self.text = "Converting...";
            setTimeout(function() {
              self.text = og_text;
            }, 750);
          } else {
            let og_text = self.text;
            self.color = "red";
            self.text = "Failed!";
            setTimeout(function() {
              self.color = "#dbbe1a";
              self.text = og_text;
            }, 750);
          }
        }, false);
        recruit_modal.members.push(from_conscript);
        let from_conscript_info = new Text(canvas, [325, 275], "Will take "+String(units_info.citizen.convert_into)+" days", "12px Arial", "black", false, 200, undefined);
        recruit_modal.members.push(from_conscript_info);
        //merchant
        let from_merchant = new TextButton(canvas, [[330, 300], [[325, 280], [490, 310]]], "Convert from Merchant", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function(self) {
          let success = convert_units(desig, "merchant", "citizen", units_info.citizen.convert_into);
          if (success) {
            let og_text = self.text;
            self.text = "Converting...";
            setTimeout(function() {
              self.text = og_text;
            }, 750);
          } else {
            let og_text = self.text;
            self.color = "red";
            self.text = "Failed!";
            setTimeout(function() {
              self.color = "#dbbe1a";
              self.text = og_text;
            }, 750);
          }
        }, false);
        recruit_modal.members.push(from_merchant);
        let from_merchant_info = new Text(canvas, [325, 325], "Will take "+String(units_info.citizen.convert_into)+" days", "12px Arial", "black", false, 200, undefined);
        recruit_modal.members.push(from_merchant_info);
        //colonist
        let from_colonist = new TextButton(canvas, [[330, 350], [[325, 330], [490, 360]]], "Convert from Colonist", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function(self) {
          let success = convert_units(desig, "colonist", "citizen", units_info.citizen.convert_into);
          if (success) {
            let og_text = self.text;
            self.text = "Converting...";
            setTimeout(function() {
              self.text = og_text;
            }, 750);
          } else {
            let og_text = self.text;
            self.color = "red";
            self.text = "Failed!";
            setTimeout(function() {
              self.color = "#dbbe1a";
              self.text = og_text;
            }, 750);
          }
        }, false);
        recruit_modal.members.push(from_colonist);
        let from_colonist_info = new Text(canvas, [325, 375], "Will take "+String(units_info.citizen.convert_into)+" days", "12px Arial", "black", false, 200, undefined);
        recruit_modal.members.push(from_colonist_info);
      } else if (type === "conscript") {
        //citizen to conscript
        title.text = "Recruit Conscript";
        let from_citizen = new TextButton(canvas, [[330, 250], [[325, 230], [480, 260]]], "Convert from Citizen", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function(self) {
          let success = convert_units(desig, "citizen", "conscript", units_info.conscript.convert_into);
          if (success) {
            let og_text = self.text;
            self.text = "Converting...";
            setTimeout(function() {
              self.text = og_text;
            }, 750);
          } else {
            let og_text = self.text;
            self.color = "red";
            self.text = "Failed!";
            setTimeout(function() {
              self.color = "#dbbe1a";
              self.text = og_text;
            }, 750);
          }
        }, false);
        recruit_modal.members.push(from_citizen);
        let from_citizen_info = new Text(canvas, [325, 275], "Will take "+String(units_info.conscript.convert_into)+" days", "12px Arial", "black", false, 200, undefined);
        recruit_modal.members.push(from_citizen_info);
      } else if (type === "merchant") {
        //citizen to merchant
        title.text = "Recruit Merchant";
        let from_citizen = new TextButton(canvas, [[330, 250], [[325, 230], [480, 260]]], "Convert from Citizen", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function(self) {
          let success = convert_units(desig, "citizen", "merchant", units_info.merchant.convert_into);
          if (success) {
            let og_text = self.text;
            self.text = "Converting...";
            setTimeout(function() {
              self.text = og_text;
            }, 750);
          } else {
            let og_text = self.text;
            self.color = "red";
            self.text = "Failed!";
            setTimeout(function() {
              self.color = "#dbbe1a";
              self.text = og_text;
            }, 750);
          }
        }, false);
        recruit_modal.members.push(from_citizen);
        let from_citizen_info = new Text(canvas, [325, 275], "Will take "+String(units_info.merchant.convert_into)+" days", "12px Arial", "black", false, 200, undefined);
        recruit_modal.members.push(from_citizen_info);
      } else if (type === "colonist") {
        //citizen to colonist
        title.text = "Recruit Colonist";
        let from_citizen = new TextButton(canvas, [[330, 250], [[325, 230], [480, 260]]], "Convert from Citizen", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function(self) {
          let success = convert_units(desig, "citizen", "colonist", units_info.colonist.convert_into);
          if (success) {
            let og_text = self.text;
            self.text = "Converting...";
            setTimeout(function() {
              self.text = og_text;
            }, 750);
          } else {
            let og_text = self.text;
            self.color = "red";
            self.text = "Failed!";
            setTimeout(function() {
              self.color = "#dbbe1a";
              self.text = og_text;
            }, 750);
          }
        }, false);
        recruit_modal.members.push(from_citizen);
        let from_citizen_info = new Text(canvas, [325, 275], "Will take "+String(units_info.colonist.convert_into)+" days", "12px Arial", "black", false, 200, undefined);
        recruit_modal.members.push(from_citizen_info);
      } else {
        //conscript to the subtype
        title.text = "Recruit "+type[0].toUpperCase()+type.slice(1);
        //
        //if ()
      }
      recruit_modal.members.push(title);
      //use `desig`
    }
    //units
    clear_current_section();
    let citizen_card = new UnitCard(canvas, [[300, 190], 180, 300], "citizen", desig, "black", ["20px Arial", "15px Arial", "10px Arial"]);
    current_section.push(citizen_card);
    region_modal.members.push(citizen_card);
    let colonist_card = new UnitCard(canvas, [[490, 190], 180, 300], "colonist", desig, "black", ["20px Arial", "15px Arial", "10px Arial"]);
    current_section.push(colonist_card);
    region_modal.members.push(colonist_card);
    let conscript_card = new UnitCard(canvas, [[680, 190], 180, 300], "conscript", desig, "black", ["20px Arial", "15px Arial", "10px Arial"]);
    current_section.push(conscript_card);
    region_modal.members.push(conscript_card);
    let merchant_card = new UnitCard(canvas, [[870, 190], 180, 300], "merchant", desig, "black", ["20px Arial", "15px Arial", "10px Arial"]);
    current_section.push(merchant_card); 
    region_modal.members.push(merchant_card);
    //if owned by player, display move and recruit buttons
    if (player_owned_region) {
      let move_btn1 = new TextButton(canvas, [[327, 470], [[310, 450], [380, 480]]], "Move", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, unit_move_modal, false);
      current_section.push(move_btn1);
      region_modal.members.push(move_btn1);
      let recruit_btn1 = new TextButton(canvas, [[411, 470], [[400, 450], [470, 480]]], "Recruit", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function() {unit_recruit_modal('citizen')}, false);
      current_section.push(recruit_btn1);
      region_modal.members.push(recruit_btn1)
      let move_btn2 = new TextButton(canvas, [[517, 470], [[500, 450], [570, 480]]], "Move", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, unit_move_modal, false);
      current_section.push(move_btn2);
      region_modal.members.push(move_btn2);
      let recruit_btn2 = new TextButton(canvas, [[601, 470], [[590, 450], [660, 480]]], "Recruit", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function() {unit_recruit_modal('colonist')}, false);
      current_section.push(recruit_btn2);
      region_modal.members.push(recruit_btn2);
      let move_btn3 = new TextButton(canvas, [[707, 470], [[690, 450], [760, 480]]], "Move", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, unit_move_modal, false);
      current_section.push(move_btn3);
      region_modal.members.push(move_btn3);
      let recruit_btn3 = new TextButton(canvas, [[791, 470], [[780, 450], [850, 480]]], "Recruit", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function() {unit_recruit_modal('conscript')}, false);
      current_section.push(recruit_btn3);
      region_modal.members.push(recruit_btn3);
      let move_btn4 = new TextButton(canvas, [[897, 470], [[880, 450], [950, 480]]], "Move", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, unit_move_modal, false);
      current_section.push(move_btn4);
      region_modal.members.push(move_btn4);
      let recruit_btn4 = new TextButton(canvas, [[981, 470], [[970, 450], [1040, 480]]], "Recruit", "15px Arial", "#dbbe1a", "#efe8ee", "white", false, "black", false, function() {unit_recruit_modal('merchant')}, false);
      current_section.push(recruit_btn4);
      region_modal.members.push(recruit_btn4);
      //also display progress bar for unit recruitment
      let recruitments = self_nation.recruitment.filter(function(item) {
        return item.desig === desig;
      });
      let progresses = [];
      for (let i=0; i < recruitments.length; i++) {
        //dont show after the 12th recruitment.. won't fit
        if (i === 12) break;
        let column = Math.floor(i/4);
        let row = i-column*4;
        let r = recruitments[i];
        let label = new Text(canvas, [300+270*column, 512+18*row], r.from+" to "+r.to+" recruitment: ", "16px Arial", "black", false, 150, undefined);
        let progress = new ProgressBar(canvas, [[455+270*column, 500+18*row], 100, 16], function() {return units_info[r.to].convert_into-(r.finish-window.ticks)}, units_info[r.to].convert_into, "black", "black");
        progresses.push([label, progress]);
        region_modal.members.push(label);
        current_section.push(label);
        region_modal.members.push(progress);
        current_section.push(progress);
      }
      let delete_check = setInterval(function() {
        for (let p=0; p < progresses.length; p++) {
          if (progresses[p][1].finished && progresses[p][1].display) {
            progresses[p][0].text += "Finished!";
            progresses[p][0].maxwidth = 225;
            //remove progress bar?
            progresses[p][1].display = false;
          }
        }
      }, 2000);
      region_modal.intervals.push(delete_check);
    }
  }
  //region name? number designation maybe?
  //todo: add names when nnom finishes them
  let name = new Text(canvas, [750, 150], "(ID: "+desig+")", "35px Arial", "gray", false, 100, undefined);
  region_modal.members.push(name);
  //sidebar: overview, build, taxes, units (should be buttons under the hood)
  //#282828
  //new TextButton(canvas, [[center[0]/2-30, 425], [[center[0]/2-100, 390], [center[0]/2+100, 440]]], "Play", "28px Arial", "red", "#e5d5e3", "white", true, "black", false, selection_part_1_scene);
  let overview = new TextButton(canvas, [[150, 205], [[140, 160], [275, 210]]], "Overview", "28px Arial", false, "black", "black", false, "black", true, function(self) {
    //make sure not already selected
    if (!self.underline) {
      canvas.canvas.dispatchEvent(new CustomEvent("customsectionchange", {detail: {picked: "overview"}}));
      self.underline = true;
      switch_to_overview();
    }
  }, false);
  overview.customsectionchange = function(e) {
    if (e.detail.picked !== "overview") {
      this.underline = false;
    }
  }
  region_modal.members.push(overview);
  let construct, taxes;
  let unit_coords = [[150, 265], [[140, 220], [275, 270]]];
  if (player_owned_region) {
    construct = new TextButton(canvas, [[150, 265], [[140, 220], [275, 270]]], "Construct", "28px Arial", false, "black", "black", false, "black", false, function(self) {
      //make sure not already selected
      if (!self.underline) {
        canvas.canvas.dispatchEvent(new CustomEvent("customsectionchange", {detail: {picked: "construct"}}));
        self.underline = true;
        switch_to_construct();
      }
    }, false);
    construct.customsectionchange = function(e) {
      if (e.detail.picked !== "construct") {
        this.underline = false;
      }
    }
    region_modal.members.push(construct);
    taxes = new TextButton(canvas, [[150, 325], [[140, 280], [275, 330]]], "Taxes", "28px Arial", false, "black", "black", false, "black", false, function(self) {
      //make sure not already selected
      if (!self.underline) {
        canvas.canvas.dispatchEvent(new CustomEvent("customsectionchange", {detail: {picked: "taxes"}}));
        self.underline = true;
        switch_to_taxes();
      }
    }, false);
    taxes.customsectionchange = function(e) {
      if (e.detail.picked !== "taxes") {
        this.underline = false;
      }
    }
    region_modal.members.push(taxes);
    canvas.addEvent("customsectionchange", [construct, taxes], false);
    unit_coords = [[150, 385], [[140, 340], [275, 390]]];
  }
  let units = new TextButton(canvas, unit_coords, "Units", "28px Arial", false, "black", "black", false, "black", false, function(self) {
    //make sure not already selected
    if (!self.underline) {
      canvas.canvas.dispatchEvent(new CustomEvent("customsectionchange", {detail: {picked: "units"}}));
      self.underline = true;
      switch_to_units();
    }
  }, false);
  units.customsectionchange = function(e) {
    if (e.detail.picked !== "units") {
      this.underline = false;
    }
  }
  region_modal.members.push(units);
  canvas.addEvent("customsectionchange", [overview, units], false);
  if (options) {
    switch (options.goto) {
      case "overview":
        overview.click_unwrapped(overview);
        break;
      case "construct":
        if (construct) {
          construct.click_unwrapped(construct);
        }
        break;
      case "taxes":
        if (taxes) {
          taxes.click_unwrapped(taxes);
        }
        break;
      case "units":
        units.click_unwrapped(units);
        break;
      default:
        break;
    }
  }
  switch_to_overview();
}

function create_sea_modal(desig) {
  //actual modal
  let sea_modal = new Modal(canvas, [[100, 100], [canvas.canvas.width-100, canvas.canvas.height-100]], "white", true, 0.7, "black");
  //close button
  let close_button = new TextButton(canvas, [[sea_modal.coords[1][0]-47, sea_modal.coords[0][1]+47], [[sea_modal.coords[1][0]-50, sea_modal.coords[0][1]+10], [sea_modal.coords[1][0]-10, sea_modal.coords[0][1]+50]]], "x", "34px Arial", false, "black", "#041616", false, false, true, sea_modal.close, false);
  sea_modal.members.push(close_button);
  let name = new Text(canvas, [750, 150], "(ID: "+desig+")", "35px Arial", "gray", false, 100, undefined);
  sea_modal.members.push(name);
  //
}

window.settings = {
  shadow: true,
  negative_coords: false,
  gradient: true
};

function create_settings_modal() {
  let settings_modal = new Modal(canvas, [[100, 100], [canvas.canvas.width-100, canvas.canvas.height-100]], "white", true, 0.7, "black");
  let close_button = new TextButton(canvas, [[settings_modal.coords[1][0]-47, settings_modal.coords[0][1]+47], [[settings_modal.coords[1][0]-50, settings_modal.coords[0][1]+10], [settings_modal.coords[1][0]-10, settings_modal.coords[0][1]+50]]], "x", "34px Arial", false, "black", "#041616", false, false, true, settings_modal.close, false);
  settings_modal.members.push(close_button);
  let name = new Text(canvas, [150, 150], "Settings", "35px Arial", "black", false, 150, undefined);
  settings_modal.members.push(name);
  //toggles for settings
  let shadow_label = new Text(canvas, [150, 200], "Text Shadow:", "14px Arial", "black", false, 250, undefined);
  settings_modal.members.push(shadow_label);
  let shadow_toggle = new Toggle(canvas, [425, 185], function(){return window.settings.shadow}, function(new_bool){window.settings.shadow = new_bool});
  settings_modal.members.push(shadow_toggle);
  let negative_label = new Text(canvas, [150, 240], "Map negative coords (impossible on safari):", "14px Arial", "black", false, 250, undefined);
  settings_modal.members.push(negative_label);
  let negative_toggle = new Toggle(canvas, [425, 225], function(){return window.settings.negative_coords}, function(new_bool){window.settings.negative_coords = new_bool});
  settings_modal.members.push(negative_toggle);
  let gradient_label = new Text(canvas, [150, 280], "Gradients:", "14px Arial", "black", false, 250, undefined);
  settings_modal.members.push(gradient_label);
  let gradient_toggle = new Toggle(canvas, [425, 265], function(){return window.settings.gradient}, function(new_bool){window.settings.gradient = new_bool});
  settings_modal.members.push(gradient_toggle);
}

function point_in_region(p, desig) {
  let in_region = false;
  let self = regions_info[desig].region_obj;
  for (let i=0; i < self.paths.length; i++) {
    if (canvas.context.isPointInPath(self.paths[i], p[0], p[1])) {
      in_region = true;
    }
  }
  //make sure its not in a building
  if (window.game_view === "buildings") {
    for (let i=0; i < self.buildings.length; i++) {
      if (canvas.context.isPointInPath(self.buildings[i].path, p[0], p[1])) {
        in_region = false;
      }
    }
  } else if (window.game_view === "units") {
    for (let i=0; i < canvas.units.length; i++) {
      if (canvas.context.isPointInPath(canvas.units[i].path, p[0], p[1])) {
        in_region = false;
      }
    }
  }
  return in_region;
}

function game_scene() {
  window.gameScaleFactor = 1.5;
  window.gameTranslate = [0, 0];
  //let starting_region_coords = regions_info[window.starting_region].coords[0];
  if (Number(window.starting_region) == 11) {
    //11 is special case because kinda far
    window.gameTranslate = [75, 300];
  } else if (Number(window.starting_region) >= 74 && Number(window.starting_region) <= 77) {
    window.gameTranslate = [600, 1100];
  } else if (Number(window.starting_region) <= 20) {
    window.gameTranslate = [0, 0];
  } else if (Number(window.starting_region) <= 29) {
    window.gameTranslate = [600, 0];
  } else if (Number(window.starting_region) <= 42) {
    window.gameTranslate = [600, 300];
  } else if (Number(window.starting_region) <= 67) {
    window.gameTranslate = [600, 850];
  } else if (Number(window.starting_region) <= 97) {
    window.gameTranslate  = [600, 1550];
  } else if (Number(window.starting_region) <= 115) {
    window.gameTranslate = [0, 1000];
  } else if (Number(window.starting_region) == 116) {
    window.gameTranslate = [0, 1250];
  }
  canvas.reset();
  //enable scrolling
  canvas.scroll_temp_disabled = false;
  document.onwheel = function(e) {
    if (canvas.scroll_temp_disabled) {
      return;
    }
    //negative means up, positive means down
    //down means zoom out, up means zoom in
    if (e.deltaY > 0) {
      //positive
      window.gameScaleFactor += 0.025;
    } else {
      //negative
      window.gameScaleFactor -= 0.025;
    }
    if (window.gameScaleFactor < 0.25) {
      window.gameScaleFactor = 0.25;
    } else if (window.gameScaleFactor > 2.5) {
      window.gameScaleFactor = 2.5;
    }
  }
  canvas.keydown_temp_disabled = false;
  //keeps track of the pressed keys
  window.gamePressedKeys = [];
  document.addEventListener("keydown", function(e) {
    if (canvas.keydown_temp_disabled) {
      return;
    }
    if (!window.gamePressedKeys.includes(e.key.toLowerCase())) {
      window.gamePressedKeys.push(e.key.toLowerCase());
    }
    //if up, down, left, right
    function movement_handling(key) {
      let move_change = 4;
      if (window.gamePressedKeys.includes("shift")) {
        //make it go faster when shift held down
        move_change = 7;
      }
      switch (key.toLowerCase()) {
        case "w":
        case "arrowup":
          window.gameTranslate[1] -= move_change;
          break;
        case "s":
        case "arrowdown":
          window.gameTranslate[1] += move_change;
          break;
        case "a":
        case "arrowleft":
          window.gameTranslate[0] -= move_change;
          break;
        case "d":
        case "arrowright":
          window.gameTranslate[0] += move_change;
          break;
        default: break;
      }
      //honestly I tried doing this logically but it didn't work. so I just trialed and errored a bit
      if (window.gameTranslate[0] > 2300) {
        window.gameTranslate[0] = 2300;
      } else if (window.gameTranslate[1] > 2300) {
        window.gameTranslate[1] = 2300;
      }
      if (window.settings.negative_coords) {
        if (window.gameTranslate[0] < -1700) {
          window.gameTranslate[0] = -1700;
        } else if (window.gameTranslate[1] < -700) {
          window.gameTranslate[1] = -700;
        }
      } else {
        if (window.gameTranslate[0] < 0) {
          window.gameTranslate[0] = 0;
        }  else if (window.gameTranslate[1] < 0) {
          window.gameTranslate[1] = 0;
        }
      }
    }
    movement_handling(e.key);
    let directional_keys = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight", "w", "a", "s", "d"];
    for (let i=0; i < directional_keys.length; i++) {
      if (directional_keys[i] !== e.key && window.gamePressedKeys.includes(directional_keys[i].toLowerCase())) {
        movement_handling(directional_keys[i]);
      }
    }
  });
  document.addEventListener("keyup", function(e) {
    let unpressed_key = e.key;
    window.gamePressedKeys = window.gamePressedKeys.filter(function(value) {
      return value !== unpressed_key.toLowerCase();
    });
  });
  if (is_mobile) {
    canvas.touchmove_temp_disabled = false;
    document.addEventListener("touchstart", function(e) {
      if (canvas.touchmove_temp_disabled) {
        return;
      }
      if (!canvas.context.isPointInPath(window.game_overlay_transparent.get_path(), e.touches[0].clientX, e.touches[0].clientY)) {
        return;
      }
      canvas.click_temp_disabled = true;
      window.gameTSInfo = {
        og_coords: [e.touches[0].clientX, e.touches[0].clientY],
        og_translate: window.gameTranslate
      };
    });
    document.addEventListener("touchmove", function(e) {
      if (canvas.touchmove_temp_disabled || !window.gameTSInfo) {
        return;
      }
      let x_diff = e.touches[0].clientX - window.gameTSInfo.og_coords[0];
      let y_diff = e.touches[0].clientY - window.gameTSInfo.og_coords[1];
      window.gameTranslate = [window.gameTSInfo.og_translate[0] - x_diff, window.gameTSInfo.og_translate[1] - y_diff];
      if (window.gameTranslate[0] > 2300) {
        window.gameTranslate[0] = 2300;
      } else if (window.gameTranslate[1] > 2300) {
        window.gameTranslate[1] = 2300;
      }
      if (window.settings.negative_coords) {
        if (window.gameTranslate[0] < -1700) {
          //-1700
          window.gameTranslate[0] = -1700;
        } else if (window.gameTranslate[1] < -700) {
          //-700
          window.gameTranslate[1] = -700;
        }
      } else {
        if (window.gameTranslate[0] < 0) {
          window.gameTranslate[0] = 0;
        }  else if (window.gameTranslate[1] < 0) {
          window.gameTranslate[1] = 0;
        }
      }
    });
    document.addEventListener("touchend", function(e) {
      if (canvas.touchmove_temp_disabled || !window.gameTSInfo) {
        return;
      }
      canvas.click_temp_disabled = false;
      window.gameTSInfo = undefined;
    });
    document.addEventListener("touchcancel", function(e) {
      if (canvas.touchmove_temp_disabled || !window.gameTSInfo) {
        return;
      }
      canvas.click_temp_disabled = false;
      window.gameTSInfo = undefined;
    });
  }
  //set up game scene
  let nnommap = new MovingBackground(canvas, "/images/nnommap_big.png", background_map);
  nnommap.crop = true;
  let regions_keys = Object.keys(regions_info);
  for (let i=0; i < regions_keys.length; i++) {
    //regions_info
    let r_info = regions_info[regions_keys[i]];
    regions_info[regions_keys[i]].region_obj = new Region(canvas, r_info.coords, "white", regions_keys[i], r_info.extensions);
    //set onclick and possibly hover effects
    let self = regions_info[regions_keys[i]].region_obj;
    self.click = function(e) {
      if (self.canvas.click_temp_disabled) {
        return;
      }
      if (canvas.context.isPointInPath(window.game_overlay_transparent.get_path(), e.offsetX, e.offsetY)) {
        //inside the view window, not on the overlay. ok to click
        let in_region = point_in_region([e.offsetX, e.offsetY], self.desig);
        if (in_region) {
          if (self.canvas.move_mode) {
            //send event
            canvas.canvas.dispatchEvent(new CustomEvent("customunitmove", {detail: {"dest": self.desig}}));
            //every customunitmove event results in an overlay toggle
            toggleOverlay();
          } else {
            //open up region popup
            create_region_modal(self.desig);
          }
        }
      }
    }
    canvas.addEvent("click", self, false);
  }
  let sea_keys = Object.keys(sea_info);
  for (let j=0; j < sea_keys.length; j++) {
    sea_info[sea_keys[j]].sea_obj = new SeaTile(canvas, sea_info[sea_keys[j]].coords, sea_keys[j]);
    let self = sea_info[sea_keys[j]].sea_obj;
    self.click = function(e) {
      if (self.canvas.click_temp_disabled) {
        return;
      }
      //inside the view window, not on the overlay. ok to click
      if (canvas.context.isPointInPath(window.game_overlay_transparent.get_path(), e.offsetX, e.offsetY)) {
        if (canvas.context.isPointInPath(self.path, e.offsetX, e.offsetY)) {
          //make sure units take precedence over sea tiles
          let in_region = true;
          if (window.game_view === "units") {
            for (let i=0; i < canvas.units.length; i++) {
              if (canvas.context.isPointInPath(canvas.units[i].path, e.offsetX, e.offsetY)) {
                in_region = false;
              }
            }
          } else if (window.game_view === "buildings") {
            for (let r=0; r < Object.keys(regions_info).length; r++) {
              let r_desig = Object.keys(regions_info)[r];
              //only check if region is neighbor
              if (sea_info[self.desig].neighbors.includes(r_desig)) {
                for (let b=0; b < regions_info[r_desig].buildings.length; b++) {
                  if (canvas.context.isPointInPath(regions_info[r_desig].region_obj.buildings[b].path, e.offsetX, e.offsetY)) {
                    in_region = false;
                  }
                }
              }
            }
          }
          if (in_region) {
            create_sea_modal(self.desig);
          }
        }
      }
    }
    canvas.addEvent("click", self, false);
  }
  regions_info[window.starting_region].region_obj.color = self_nation.color;
  //crown is around 15 pixels off center
  window.gameOverlayObject = new StaticBackground(canvas, "/images/nnom_overlay2.png", false, game_overlay2);
  //nation name box: lower left [555, 680]
  new Text(canvas, [555, 675], self_nation.name, "18px Arial", "black", false, 120, undefined);
  //1 second = 1 day as standard, but it should be able to be arbitrarily changed (fast forward)
  new Text(canvas, [590, 540], "Year 0", "14px Arial", "black", "shadow-white", false, "clock-year");
  //center season text
  canvas.context.font = "16px Arial";
  let season_text_width = canvas.context.measureText("Planting").width;
  new Text(canvas, [canvas.canvas.width/2-season_text_width/2+15, 560], "Planting", "16px Arial", "black", "shadow-white", false, "clock-season");
  new Text(canvas, [canvas.canvas.width/2-27+15, 575], "Season", "16px Arial", "black", "shadow-white", false, undefined);
  new Text(canvas, [590, 595], "Day 0", "14px Arial", "black", "shadow-white", false, "clock-day");
  window.tick_interval_id = setInterval(tick, 667);
  //help ("?") button
  new TextButton(canvas, [[0, 0], [[770, 535], [800, 560]]], false, false, "rgba(255, 255, 255, 0)", undefined, undefined, false, false, false, game_help_button, true);
  //timechanging buttons (pause, play, fast forward)
  //ff
  new TextButton(canvas, [[0, 0], [[725, 535], [760, 560]]], false, false, "rgba(255, 255, 255, 0)", undefined, undefined, false, false, false, fast_forward_button, true);
  //play
  new TextButton(canvas, [[0, 0], [[700, 535], [722, 560]]], false, false, "rgba(255, 255, 255, 0)", undefined, undefined, false, false, false, normal_speed_button, true);
  //pause
  new TextButton(canvas, [[0, 0], [[675, 535], [697, 560]]], false, false, "rgba(255, 255, 255, 0)", undefined, undefined, false, false, false, game_pause_button, true);
  //
  //wealth and supply counters
  new Text(canvas, [930, 612], String(self_nation.supply), "25px Arial", "black", undefined, 90, "supply-counter");
  new Text(canvas, [1054, 612], String(self_nation.wealth), "25px Arial", "black", undefined, 90, "wealth-counter");
  //starting units
  //on first tick, show the units
  for (let r_num=0; r_num < Object.keys(regions_info).length; r_num++) {
    let r_desig = Object.keys(regions_info)[r_num];
    let region = regions_info[r_desig];
    for (let u=0; u < Object.keys(region.units).length; u++) {
      let unit_name = Object.keys(region.units)[u];
      let unit_num = region.units[unit_name];
      if (unit_num > 0) {
        let owner = "";
        if (self_nation.owned_regions.includes(r_desig)) {
          owner = "self";
        }
        new Unit(canvas, owner, r_desig, unit_name);
      }
    }
  }
  //starting building
  new Building(canvas, window.starting_region, "settlement");
  let happiness_display = new Text(canvas, [232, 685], "Happiness: 50%", "17px Arial", "black", false, 90, "happiness-display");
  overlay2_objects.push(happiness_display);
  let left_map_view = new TextButton(canvas, [[373, 605], [[370, 590], [382, 607]]], "‹", "25px Arial", false, "black", "black", false, false, false, function() {
    let current_index = window.game_views.indexOf(window.game_view);
    current_index--;
    if (current_index < 0) {
      current_index = window.game_views.length-1;
    }
    window.game_view = window.game_views[current_index];
    canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"game-view": window.game_view}}));
  }, true);
  overlay2_objects.push(left_map_view);
  let right_map_view = new TextButton(canvas, [[528, 605], [[525, 590], [537, 607]]], "›", "25px Arial", false, "black", "black", false, false, false, function() {
    let current_index = window.game_views.indexOf(window.game_view);
    current_index++;
    if (current_index === window.game_views.length) {
      current_index = 0;
    }
    window.game_view = window.game_views[current_index];
    canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"game-view": window.game_view}}));
  }, true);
  overlay2_objects.push(right_map_view);
  let game_view_text = new Text(canvas, [420, 605], window.game_view, "15px Arial", "black", false, false, "game-view");
  overlay2_objects.push(game_view_text);
  //settings cog
  let settings_btn = new ImageButton(canvas, [160, 653], [65, 38], false, settingsImage, create_settings_modal, true);
  overlay2_objects.push(settings_btn);
  let logs_btn = new ImageButton(canvas, [92, 653], [64, 38], false, logsImage, function() {}, true);
  overlay2_objects.push(logs_btn);
  speed_selected_indicator = new SpeedSelected(canvas, "normal");
}

/**
 * @param {TextInput} name_input
 * @param {TextInput} slogan_input
 * @param {Text} color_input
 */
function set_nation(name_input, slogan_input, color_input) {
  //notes nation creation stuff
  self_nation.name = name_input.current_text;
  self_nation.slogan = slogan_input.current_text;
  self_nation.color = color_input.text;
  self_nation.owned_regions.push(window.starting_region);
  regions_info[window.starting_region].owner = "self";
  //to the starting region (s? in the future) we want to add a settlement with 3 citizens
  regions_info[window.starting_region].buildings.push({
    "name": "Capital",
    "type": "settlement",
    "last_prod": 0,
    "currently_upgrading": false,
    "homes": [make_citizen(window.starting_region, "settlement"), make_citizen(window.starting_region, "settlement"), make_citizen(window.starting_region, "settlement")]
  });
}

/**
 * @param {string} starting_region
 */
function selection_part_2_scene(starting_region) {
  window.starting_region = starting_region;
  canvas.reset();
  //chosen_region is a desig
  //create nation! names, nation color, traits, flags??? stuff like that.
  let center = [canvas.canvas.width, canvas.canvas.height];
  //nation name
  let name_input = new TextInput(canvas, [[center[0]/2-80, 120], [[center[0]/2-90, 90], [center[0]/2+90, 130]]], "Nation Name", "28px Arial", "gray", "black", "white", true, true, 18, undefined);
  //slogan/motto
  let slogan_input = new TextInput(canvas, [[center[0]/2-215, 160], [[center[0]/2-220, 145], [center[0]/2+220, 165]]], "This is our Slogan and we're Proud of it", "15px Arial", "gray", "black", "white", true, true, 64, ['"', '"'])
  //color (use same as help scene)
  const colors = ["Red", "Maroon", "Green", "DarkBlue", "Lime", "Purple", "Orange", "Teal", "Slategray", "DeepSkyBlue"];
  let color_index = 0;
  let color_input = new Text(canvas, [center[0]/2-40, 200], colors[color_index], "22px Arial", colors[color_index], false, undefined, "color-picker");
  new TextButton(canvas, [[center[0]/2-250, 200], [[center[0]/2-255, 165], [center[0]/2-240, 200]]], "‹", "35px Arial", false, "black", "#041616", false, false, false, function() {
    color_index--;
    //loop back
    if (color_index < 0) {
      color_index = colors.length-1;
    }
    color_input.color = colors[color_index];
    canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"color-picker": colors[color_index]}}));
  });
  //technically not accurate because text starts at lower left corner. but should be off by a little only
  new TextButton(canvas, [[center[0]/2+250, 200], [[center[0]/2+245, 165], [center[0]/2+260, 200]]], "›", "35px Arial", false, "black", "#3f3f3d", false, false, false, function() {
    color_index++;
    if (color_index >= colors.length) {
      color_index = 0;
    }
    color_input.color = colors[color_index];
    canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: {"color-picker": colors[color_index]}}));
  });
  //traits
  //to game button
  let game_btn = new TextButton(canvas, [[center[0]/2-43, 475], [[center[0]/2-60, 440], [center[0]/2+60, 490]]], "Create", "28px Arial", "red", "#e5d5e3", "white", true, "black", false, function() {
    if (name_input.current_text === name_input.placeholder || name_input.current_text === "") {
      let old_active = name_input.active_color;
      let old_inactive = name_input.inactive_color;
      //the flashing
      name_input.active_color = "#fc0a26";
      name_input.inactive_color = "#fc0a26";
      setTimeout(function() {
        name_input.active_color = old_active;
        name_input.inactive_color = old_inactive;
      }, 200);
      setTimeout(function() {
        name_input.active_color = "#fc0a26";
        name_input.inactive_color = "#fc0a26";
      }, 400);
      setTimeout(function() {
        name_input.active_color = old_active;
        name_input.inactive_color = old_inactive;
      }, 600);
      return;
    }
    set_nation(name_input, slogan_input, color_input);
    game_scene();
  });
}

function selection_part_1_scene() {
  window.gameScaleFactor = 4;
  window.gameTranslate = [-1100, -375];
  canvas.reset();
  /*
  //https://stackoverflow.com/questions/35500999/cropping-with-drawimage-not-working-in-safari
  let selectmap = new MovingBackground(canvas, "/images/transparent_selection_map.png", transparent_selection_map);
  selectmap.crop = true;
  */
  //see above commented, making it a normal image instead of movingbackground fixes a bug for safari
  let selectmap = new BasicImage(canvas, [275, 93.75], [600, 600], "/images/transparent_selection_map.png", transparent_selection_map)
  //select province
  //instructions
  new Text(canvas, [canvas.canvas.width/2-150, 100], "Select starting region", "24px Arial", "black", false, false, undefined);
  //zoomed out map
  let regions_keys = Object.keys(regions_info);
  for (let i=0; i < regions_keys.length; i++) {
    //regions_info
    let r_info = regions_info[regions_keys[i]];
    let selection_region = new Region(canvas, r_info.coords, "gray", regions_keys[i], r_info.extensions);
    //set onclick (when clicked, give option to go back, or continue and create nation)
    selection_region.click = function(e) {
      let in_path = false;
      for (let i=0; i < selection_region.paths.length; i++) {
        if (selection_region.canvas.context.isPointInPath(selection_region.paths[i], e.offsetX, e.offsetY)) {
          in_path = true;
        }
      }
      if (in_path) {
        //move on to nation customization. names and stuff I guess?
        selection_part_2_scene(selection_region.desig);
      }
    }
    canvas.addEvent("click", [selection_region], false);
    //and hover effects  (lights up yellow when region hover overed)
    selection_region.mousemove = function(e) {
      let in_path = false;
      for (let i=0; i < selection_region.paths.length; i++) {
        if (selection_region.canvas.context.isPointInPath(selection_region.paths[i], e.offsetX, e.offsetY)) {
          in_path = true;
        }
      }
      if (in_path) {
        //turn it yellow!
        selection_region.color = "yellow";
      } else {
        selection_region.color = "gray";
      }
    }
    canvas.addEvent("mousemove", [selection_region], false);
  }
  //choose traits and stuff, name
  //then go to game_scene()
}

function start_scene() {
  canvas.reset();
  //start screen
  //coords is [[text_x, text_y], [[button_top_x, button_top_y], [button_bottom_x, button_bottom_y]]]
//we want width to be around 200, height 150
  new StaticBackground(canvas, "/images/modified_affinity_screen.png", false, affinity_start_background);
  let center = [canvas.canvas.width, canvas.canvas.height];
//play game
  new TextButton(canvas, [[center[0]/2-30, 425], [[center[0]/2-100, 390], [center[0]/2+100, 440]]], "Play", "28px Arial", "red", "#e5d5e3", "white", true, "black", false, selection_part_1_scene);
  //Credits
  new TextButton(canvas, [[center[0]/2-75, 485], [[center[0]/2-100, 450], [center[0]/2+40, 500]]], "Credits", "28px Arial", "red", "#e5d5e3", "white", true, "black", false, credit_scene);
  //help
  new TextButton(canvas, [[center[0]/2+67, 485], [[center[0]/2+50, 450], [center[0]/2+100, 500]]], "?", "28px Arial", "red", "#e5d5e3", "white", true, "black", false, help_scene);
  //title
  //42px width: 356
  //65px width: close to 551
  new Text(canvas, [canvas.canvas.width/2-(551/2), 300], "Muskets and Bayonets", "65px Canterbury", "black", false, false, undefined);
}

function load_scene() {
  //
}

function help_scene() {
  const help_info = [
    {"title": "Welcome!", "content": "Muskets and Bayonets is a real time grand strategy game set in the early gunpowder era."},
    {"title": "Nation Selection", "content": "Click 'Play', and click a region to start in. Then, enter in name, slogan, and color."},
    {"title": "Mobile Support", "content": "Very good mobile support is offered. Clicking, inputting, and dragging to move all work."},
    {"title": "Map Controls", "content": "Arrow keys or WASD moves the map. Scroll wheel zooms the map in and out. Pressing shift and any of the WASD keys at the same time increases camera speed."},
    {"title": "Starting Out", "content": "The first priority should be to build a farm."},
    {"title": "Wealth", "content": "Wealth is gotten in a couple different ways. Used for construction, unit upkeep, and more."},
    {"title": "Residence Tax", "content": "Citizens living in a region pay the region's tax rate every 90 days (1 season). More citizens, more tax. Setting the tax rate too high will decrease happiness."},
    {"title": "Happiness", "content": "Many factors can affect happiness. Happiness can result in benefits and positive events, or detriments and negative events."},
    {"title": "Recruiting", "content": "Click on an owned region, and go to the 'Units' tab to recruit units. Citizens can be converted into other units. However, if they are assigned to a task, they cannot be converted. Other units can also be deconverted into citizens."},
    {"title": "Units", "content": "Units take upkeep."},
    {"title": "Moving", "content": "Left click one of your units, and left click the destination region in order to move the unit."},
    {"title": "Units: Citizens", "content": "Citizens are the core of any nation, they can do tasks, produce revenue, and easily be converted into other unit types."},
    {"title": "Units: Colonists", "content": "Colonists are necessary to colonize unclaimed land. Only regions adjacent to owned land, or regions next to sea tiles can be colonized."},
    //other units...
    {"title": "Building buildings", "content": "Click on an owned region, and go to the 'Construct' tab."},
    {"title": "Buildings", "content": "Each settlement can have one building of each chain. Buildings can produce units, resources, and provide other benefits. They take time to build, as well as supply and wealth to build."},
    {"title": "Buildings: Settlement", "content": "The settlement building and it's upgrades can house units, and slowly produce citizens."},
    {"title": "Buildings: Farms", "content": "Farms and it's upgrades produce supply, when citizens are assigned to it. The more citizens assigned to the farm, the more supply it produces."}
    //other buildings...
  ];
  canvas.reset();
  //back button
  new TextButton(canvas, [[15, 25], [[10, 10], [55, 38]]], "Back", "18px Arial", false, "black", "#041616", false, false, true, start_scene);
  //left right buttons
  new TextButton(canvas, [[200, canvas.canvas.height/2-25], [[190, canvas.canvas.height/2-85], [220, canvas.canvas.height/2-15]]], "‹", "60px Arial", false, "black", "#041616", false, false, false, function() {
    window.helpIndex--;
    //loop back
    if (window.helpIndex < 0) {
      window.helpIndex = help_info.length-1;
    }
    canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: help_info[window.helpIndex]}));
  });
  //technically not accurate because text starts at lower left corner. but should be off by a little only
  new TextButton(canvas, [[canvas.canvas.width-200, canvas.canvas.height/2-25], [[canvas.canvas.width-210, canvas.canvas.height/2-85], [canvas.canvas.width-190, canvas.canvas.height/2-15]]], "›", "60px Arial", false, "black", "#3f3f3d", false, false, false, function() {
    window.helpIndex++;
    if (window.helpIndex >= help_info.length) {
      window.helpIndex = 0;
    }
    canvas.canvas.dispatchEvent(new CustomEvent("customtextchange", {detail: help_info[window.helpIndex]}));
    canvas.context.font = "50px Arial";
    let title_text_width = canvas.context.measureText(help_info[window.helpIndex].title).width;
    canvas.canvas.dispatchEvent(new CustomEvent("customcoordschange", {detail: {
      "title": [Math.floor(canvas.canvas.width/2-title_text_width/2), 250]
    }}));
  });
  //help text
  new Text(canvas, [canvas.canvas.width/2-150, 250], help_info[window.helpIndex].title, "50px Arial", "black", false, 690, "title");
  new Paragraph(canvas, help_info[window.helpIndex].content, "21px Arial", "black", [canvas.canvas.width/2-330, 350], 690, "content")
}

function credit_scene() {
  canvas.reset();
  //back button
  new TextButton(canvas, [[15, 25], [[10, 10], [55, 38]]], "Back", "18px Arial", false, "black", "#041616", false, false, true, start_scene);
  //credits
  new Link(canvas, "https://prussia.dev", [400, 250], "Prussia", "35px Arial", "black", "blue", true);
  new Link(canvas, "https://search.aol.com/aol/search?q=nnomtnert", [canvas.canvas.width-500, 250], "Nnomtnert", "35px Arial", "black", "blue", true);
  new Paragraph(canvas, "Also thanks to Affinity (start page artist) and the Arvaldians. Huge thanks to maschek.hu for making a great image mapping tool. Fonts used: Canterbury, Arial", "18px Arial", "black", [325, 475], 610, undefined);
}

start_scene();


let query_params = new URLSearchParams(window.location.search || location.search);
if (query_params.get("go_to") === "help") {
  help_scene();
}
